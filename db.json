{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/favicon ","path":"favicon ","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0}],"Cache":[{"_id":"source/404.html","shasum":"6116ce3385ed0cadff6be92ff3b80f38974b73ee","modified":1452228062000},{"_id":"source/_posts/:2014-05-16-第一个JavaWeb项目体验.md","shasum":"2af14ce28911a2544c3dbb77c94d2911a66fd50a","modified":1452652510000},{"_id":"source/_posts/:2014-09-09-第一个自己独立开发并发布的软件.md","shasum":"daf77d14fa66872099aca333da54949a80f0bb60","modified":1452652544000},{"_id":"source/_posts/:2015-04-13-大三和同学生了个儿子.md","shasum":"58e88a7bedc0c9942a78d3c349f2727129d7f5c0","modified":1467204831000},{"_id":"source/_posts/:2015-05-06-关于《校园RMB》用户隐私相关问题的声明与致歉信.md","shasum":"1554f017601243de4e7e3e37d4b3ba2e6eeff381","modified":1453778557000},{"_id":"source/_posts/:2015-12-31-再见2015.md","shasum":"b4ae3883bc9ff9b0719222b80175a804bf8d6267","modified":1465374056000},{"_id":"source/_posts/:2016-01-30-踩坑记-系列-Guava-Lists-transform.md","shasum":"67269b73194fb3d88cf4b66309827b8613544da3","modified":1465373908000},{"_id":"source/_posts/:2016-01-31-一个写代码的调酒师.md","shasum":"24a37f0b106e9f1c54088e20617c63aeb057525d","modified":1460178363000},{"_id":"source/_posts/:2016-02-03-踩坑记-系列-用Jackson解决子类序列化后-反序列化成父类的异常.md","shasum":"82b1c001715c08c1de1efd1c5ddb3a586bd37a3c","modified":1465373888000},{"_id":"source/_posts/:2016-02-20-读书-李鸿章传.md","shasum":"3985d7bfee40bf2fdeb3c48abab1e37ca775b839","modified":1471524835000},{"_id":"source/_posts/:2016-02-21-今天交女朋友啦.md","shasum":"ee4c91c1cde6494ff7c868473414fb647d9812e3","modified":1460169434000},{"_id":"source/_posts/:2016-03-06-夯实基础-算法的时间复杂度.md","shasum":"fa5d343cbc461ff9926f66b7ba10169fb1e9bf49","modified":1465373756000},{"_id":"source/_posts/:2016-03-25-Yaml-Tutorial.md","shasum":"aa655e9e6955b025a5acd8b589154db1942ff351","modified":1460551810000},{"_id":"source/_posts/:2016-03-30-堆糖实习总结.md","shasum":"ba2dd89e4f0280e24aa4a830d05a65067e148eb9","modified":1460165563000},{"_id":"source/_posts/:2016-06-09-匆匆.md","shasum":"57eb726fea02a7bb0d81e5738e6d7fab0d762bb1","modified":1465461422000},{"_id":"source/_posts/:2016-06-09-百字书评.md","shasum":"69610d181d478db37275dc15590615a4e83d3aac","modified":1481948444000},{"_id":"source/_posts/:2016-07-03-Mac茶话会.md","shasum":"e9d4e89d00c356765f232af2a3d3287437e54445","modified":1467862836000},{"_id":"source/_posts/:2016-08-09-使用Kubernetes改造米喜部署环境-阶段性总结.md","shasum":"48e4f897bce8a9527f28969d4518ba818078badf","modified":1470815678000},{"_id":"source/_posts/:2016-08-18-Kubernetes集群性能监控-Heapster.md","shasum":"02004977920883dde498ee82ef80bd6d8a7e42d8","modified":1471590349000},{"_id":"source/_posts/:2016-08-25-Docker-Kubernetes-Intro.md","shasum":"f2032e5c9e77df07fae262db45f31f2582f6b399","modified":1474938545000},{"_id":"source/_posts/:2016-10-11-Java-日志的江湖.md","shasum":"52971018e0ca5306904439e210537bc7108e4abf","modified":1476237366000},{"_id":"source/_posts/:2016-12-08-也聊Jenkins.md","shasum":"70424b600d9eee744de1104faa7a58d263f6f9bd","modified":1481253893000},{"_id":"source/_posts/hello-world.md","shasum":"86b540f0b5fc231adb32df23b3ddbcc12f0848b8","modified":1452158688000},{"_id":"source/_posts/:2017-01-09-一粒略有成效的Management.md","shasum":"7e8bcd1fd0351ed7f6e10907ca7b7781d3f2348d","modified":1483946221000},{"_id":"source/about/index.md","shasum":"ab88907694715997f8e7915a64c6721a2cd58a14","modified":1452226617000},{"_id":"source/categories/index.md","shasum":"4d9fd7dcef802111c81f9b9ae3bc3678df4d061e","modified":1452245821000},{"_id":"source/tags/index.md","shasum":"2d6da9766a2130dd7ab59c8f2116a0748d96fa70","modified":1452653450000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1487753947087,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1487753947093,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1487753947098,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1487753947105,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1487753947118,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","modified":1487753947127,"shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1"},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","modified":1487753947130,"shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3"},{"_id":"public/vendors/jquery_lazyload/bower.json","modified":1487753947137,"shasum":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53"},{"_id":"public/vendors/jquery_lazyload/README.html","modified":1487753947157,"shasum":"c593e16f0d63d24b5d3933f3b9297884867ce4a0"},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","modified":1487753947168,"shasum":"bf8e477ee2d81833cff12572a8a5f61abffc187c"},{"_id":"public/vendors/jquery/index.js","modified":1487753947174,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1487753947184,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1487753947193,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1487753947202,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1487753947214,"shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1487753947233,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1487753947241,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1487753947249,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1487753947253,"shasum":"0189d278706509412bac4745f96c83984e1d59f4"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1487753947259,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1487753947269,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1487753947277,"shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1487753947281,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1487753947285,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1487753947290,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1487753947306,"shasum":"627cdd7a56fc7d9c169b9f6afedd74f77e6d3d06"},{"_id":"public/vendors/fastclick/LICENSE","modified":1487753947319,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1487753947323,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1487753947328,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1487753947334,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1487753947339,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1487753947343,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1487753947346,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1487753947349,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1487753947353,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1487753947362,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1487753947366,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1487753947371,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1487753947378,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1487753947383,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1487753947387,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1487753947391,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/ua-parser.min.js","modified":1487753947401,"shasum":"1148fa2bcb8b2e40c31e5f597bf794a57369a2e6"},{"_id":"public/js/motion.js","modified":1487753947410,"shasum":"b4132517fe499538ad725094593fb7ead8c04bf7"},{"_id":"public/js/hook-duoshuo.js","modified":1487753947413,"shasum":"eedaf52377991728f1e3e94f2bc4bf23ec41ecea"},{"_id":"public/js/helpers.js","modified":1487753947416,"shasum":"c15216ef897334362789ba37464298948b2eef95"},{"_id":"public/js/fancy-box.js","modified":1487753947419,"shasum":"b5fa638ed371b5f658b0826ec4afee25d9986ef2"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1487753947422,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/js/bootstrap.js","modified":1487753947428,"shasum":"f9b637b6d064f728d7dc2b6b5058a006a4454299"},{"_id":"public/images/searchicon.png","modified":1487753947432,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1487753947435,"shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec"},{"_id":"public/images/quote-l.svg","modified":1487753947440,"shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f"},{"_id":"public/images/placeholder.gif","modified":1487753947443,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1487753947447,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1487753947451,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1487753947461,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1487753947465,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1487753947469,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1487753947474,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1487753947478,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1487753947481,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/favicon ","modified":1487753947486,"shasum":"be768aa00bcddf483803c35ca37c8f9fe2bb06f3"},{"_id":"public/css/main.css","modified":1487814283493,"shasum":"bc800c00603ab5acbf3bf4ae7bc46663e46f65e2"},{"_id":"public/404.html","modified":1487814283630,"shasum":"ccbefe158a7dff723d8442d322c6308487c60741"},{"_id":"public/tags/index.html","modified":1487814283668,"shasum":"3aa76b73554c22e7190297a8569a06aabc10fa80"},{"_id":"public/categories/index.html","modified":1487814283708,"shasum":"2214730cf8d9a7027f097f0b1f3b43714cf50ee9"},{"_id":"public/about/index.html","modified":1487814283731,"shasum":"c2b6a0dda46717689de15b8cd7393ad24ebd89c6"},{"_id":"public/2017/01/09/一粒略有成效的Management/index.html","modified":1487814283796,"shasum":"422bd8425300f69d8a61648a66d522904745f520"},{"_id":"public/2016/12/08/也聊Jenkins/index.html","modified":1487814283839,"shasum":"02a21cad3783b5cad7b34e3849fa4ecf6f03e2db"},{"_id":"public/2016/10/11/Java-日志的江湖/index.html","modified":1487814283901,"shasum":"07dbe204b193ea409ae3d19b8542d44d36ab7deb"},{"_id":"public/2016/08/25/Docker-Kubernetes-Intro/index.html","modified":1487814283937,"shasum":"dcb82b8613919652ba7aae6c0545639b0eb948f4"},{"_id":"public/2016/08/18/Kubernetes集群性能监控-Heapster/index.html","modified":1487814283980,"shasum":"057381341151458f564d1089fa37a6a331d227c4"},{"_id":"public/2016/08/09/使用Kubernetes改造米喜部署环境-阶段性总结/index.html","modified":1487814284017,"shasum":"0af12af70d71d5e6633971bca9ec234fb08f3993"},{"_id":"public/2016/07/03/Mac茶话会/index.html","modified":1487814284060,"shasum":"73bcad0a0f2b902cd92b363472bd4eeb603af90e"},{"_id":"public/2016/06/09/百字书评/index.html","modified":1487814284096,"shasum":"5afcfa5146f8ca749c0aafaa1abce9a34386306b"},{"_id":"public/2016/06/09/匆匆/index.html","modified":1487814284142,"shasum":"0a9fff3ddeb7dce4518395ad7276b946fe166577"},{"_id":"public/2016/03/30/堆糖实习总结/index.html","modified":1487814284178,"shasum":"b7f3962d26029d3534c32b3668d8ec3c10f4a7fd"},{"_id":"public/2016/03/25/Yaml-Tutorial/index.html","modified":1487814284225,"shasum":"8bce3a37f36f82de823651487c2d23e15e9fce6a"},{"_id":"public/2016/03/06/夯实基础-算法的时间复杂度/index.html","modified":1487814284262,"shasum":"85302d9c9c9094e6af040eb5b630c70fb2b90e82"},{"_id":"public/2016/02/21/今天交女朋友啦/index.html","modified":1487814284307,"shasum":"dcaed32c13da4d87d2b3f0c5b47829e1b4b65866"},{"_id":"public/2016/02/20/读书-李鸿章传/index.html","modified":1487814284357,"shasum":"d2df705a9c9f2c5c75be60ebc4c7db34ac2eebb0"},{"_id":"public/2016/02/03/踩坑记-系列-用Jackson解决子类序列化后-反序列化成父类的异常/index.html","modified":1487814284395,"shasum":"a9291757bf288c4427aea2776ede997dc2f0e990"},{"_id":"public/2016/01/31/一个写代码的调酒师/index.html","modified":1487814284440,"shasum":"1c5e1462ecd76e4657a1b0ab755b79087fc6d06d"},{"_id":"public/2016/01/30/踩坑记-系列-Guava-Lists-transform/index.html","modified":1487814284485,"shasum":"96498fe223bd8256cccb1d3498ec2d0a0b8adfcd"},{"_id":"public/2016/01/07/hello-world/index.html","modified":1487814284533,"shasum":"977af94f093547ceee631422b112b6cf2f877488"},{"_id":"public/2015/12/31/再见2015/index.html","modified":1487814284570,"shasum":"1c1879a5a9c88a46113a5ab1263223f9e587e098"},{"_id":"public/2015/05/06/关于《校园RMB》用户隐私相关问题的声明与致歉信/index.html","modified":1487814284618,"shasum":"3e4db35a132e60fad55886a069d285cc70b69d87"},{"_id":"public/2015/04/13/大三和同学生了个儿子/index.html","modified":1487814284666,"shasum":"9a2cd69db4487f9168dc997e80c9b22474fe66fe"},{"_id":"public/2014/09/09/第一个自己独立开发并发布的软件/index.html","modified":1487814284702,"shasum":"88137c0abf5a6d30c675d05bc0295ad6a0d6b13c"},{"_id":"public/2014/05/16/第一个JavaWeb项目体验/index.html","modified":1487814284746,"shasum":"a8da9d8d8137262bedb85d18844062d9cbfee0f8"},{"_id":"public/archives/index.html","modified":1487814285073,"shasum":"29950021af58adbc97eb8dbbaf4680eb14e609ca"},{"_id":"public/archives/page/2/index.html","modified":1487814285101,"shasum":"778a55968130e4d450fcd7bf157bd8c4fb39737b"},{"_id":"public/archives/page/3/index.html","modified":1487814285135,"shasum":"d3c08e2dc8260f410e5c3ef10a9f8eeaaa5b72fc"},{"_id":"public/archives/2014/index.html","modified":1487814285161,"shasum":"4ace0822960865a5e527f6b818ea85e5425cbb0f"},{"_id":"public/archives/2014/05/index.html","modified":1487814285185,"shasum":"cdbd0e37561503000939ae50050ccdb80d4c399b"},{"_id":"public/archives/2014/09/index.html","modified":1487814285221,"shasum":"e67d2e8ea3c719a3efd696f394400ae526dc78ae"},{"_id":"public/archives/2015/index.html","modified":1487814285246,"shasum":"04de460ac495c92914a856424ede9af3f961fa06"},{"_id":"public/archives/2015/04/index.html","modified":1487814285282,"shasum":"09ae935339ff453c85293ddbe96ee3a72274e152"},{"_id":"public/archives/2015/05/index.html","modified":1487814285318,"shasum":"e0be30950652e10617faa984101ba3bf5c009924"},{"_id":"public/archives/2015/12/index.html","modified":1487814285355,"shasum":"27c39a542ca63df558e7bc020c1cec3523c1e8b6"},{"_id":"public/archives/2016/index.html","modified":1487814285402,"shasum":"3bc0691ab3f759b5a608a45cac9939fb2112aced"},{"_id":"public/archives/2016/page/2/index.html","modified":1487814285441,"shasum":"f78aea60adfe6874256af6a2df2dc5222096facd"},{"_id":"public/archives/2016/01/index.html","modified":1487814285475,"shasum":"d06e2eb00a5f909e13346911ad7baa7f952a4c30"},{"_id":"public/archives/2016/02/index.html","modified":1487814285513,"shasum":"c426c6a8826c9fafb60dabbb5ac9b64e207ae074"},{"_id":"public/archives/2016/03/index.html","modified":1487814285547,"shasum":"92285afc48695203058608c59c8328715375ae0c"},{"_id":"public/archives/2016/06/index.html","modified":1487814285590,"shasum":"0f773c3bc8ffe4b41f960c25f2dd6f1679c0d4cc"},{"_id":"public/archives/2016/07/index.html","modified":1487814285624,"shasum":"a0d94a74bfa94f0aba9680600c9f1a0ab2ea5ce6"},{"_id":"public/archives/2016/08/index.html","modified":1487814285655,"shasum":"7c528ecda50a4b0e0bba1e1666cc25a71e0f1890"},{"_id":"public/archives/2016/10/index.html","modified":1487814285697,"shasum":"cd9be9819698f696d55c07f1bc1b7849d009cdf3"},{"_id":"public/archives/2016/12/index.html","modified":1487814285730,"shasum":"5c2577e86c69fc587fd37b35083eb7042709ed43"},{"_id":"public/archives/2017/index.html","modified":1487814285762,"shasum":"f593639a1289ba235e13510cef64537ab89167f7"},{"_id":"public/archives/2017/01/index.html","modified":1487814285822,"shasum":"664e8dab84936a51f602f6c1665eb68ae9572a7b"},{"_id":"public/categories/工作/index.html","modified":1487814284771,"shasum":"e21afbc86f43b7b8be12f455c1468dc5ce801b62"},{"_id":"public/categories/CI/index.html","modified":1487814284795,"shasum":"0ad16b75367b179466eced5e85abe609d7048ad8"},{"_id":"public/categories/Java/index.html","modified":1487814284828,"shasum":"83f2632453258b0303f97c0355ad7fd3c0ad3ee1"},{"_id":"public/categories/Devops/index.html","modified":1487814284850,"shasum":"7b6d9e424756c05629cd3e462967226bb3336475"},{"_id":"public/categories/DevOps/index.html","modified":1487814284875,"shasum":"ec8869362982071ac948ae12bb101a593caeb0ca"},{"_id":"public/categories/读书/index.html","modified":1487814284906,"shasum":"a0da77a518965a32c28e42b0ac29c6b47f2c1bd7"},{"_id":"public/categories/life/index.html","modified":1487814284930,"shasum":"574b463c79149b7054e2cfb01c9a632ce4407ad7"},{"_id":"public/categories/夯实基础/index.html","modified":1487814284954,"shasum":"32a582e9cf5400f3f1090f25b6c3733c9718b56f"},{"_id":"public/categories/踩坑记/index.html","modified":1487814284987,"shasum":"b5314521cf64f50c668dcbcbadfdfd5007323053"},{"_id":"public/categories/业余生活/index.html","modified":1487814285011,"shasum":"507100a27610556cb38d564e5362067154ef6741"},{"_id":"public/categories/Before-2016/index.html","modified":1487814285036,"shasum":"4d4ce192c24aa5e5f0b932b96e14571119206421"},{"_id":"public/index.html","modified":1487814285877,"shasum":"daa011e6b86ad35c65b1ce16103b1aadfb0ca2a5"},{"_id":"public/page/2/index.html","modified":1487814285923,"shasum":"bb03b31aacd69c853a0134b41da7fe0a58559a7e"},{"_id":"public/page/3/index.html","modified":1487814285957,"shasum":"a0afc126b1264f167ee8eed3803d2d8ca96ec786"},{"_id":"public/tags/项目管理/index.html","modified":1487814285980,"shasum":"dfdbb7bddd7fe2d49efb9cc52effa14a8222c8e3"},{"_id":"public/tags/Jenkins/index.html","modified":1487814286014,"shasum":"c2cba6245cb1e362b41a449fca0d11075b8d8dcf"},{"_id":"public/tags/log/index.html","modified":1487814286038,"shasum":"5e04d15f9138a72c81e602309bca841996293681"},{"_id":"public/tags/Kubernetes/index.html","modified":1487814286069,"shasum":"1c96f0352b50e3fae0ce3440a83c98a0e7c48eab"},{"_id":"public/tags/Heapster/index.html","modified":1487814286094,"shasum":"8462fe49b3fbfc91f2aeaa7909cf0de9b32903ed"},{"_id":"public/tags/Mac/index.html","modified":1487814286120,"shasum":"37b6009091574550d1163b2f494788d0889ab32b"},{"_id":"public/tags/Kindle/index.html","modified":1487814286156,"shasum":"9b0789a44b3b5a64ab5e5b6f171678704705070e"},{"_id":"public/tags/随笔杂记/index.html","modified":1487814286183,"shasum":"8b51b50d34928d7a526877698b9eeaa7ffb6223e"},{"_id":"public/tags/堆糖/index.html","modified":1487814286206,"shasum":"3cf2993d829aa25b4325b85ebbf8191e1e8c7e06"},{"_id":"public/tags/Yaml/index.html","modified":1487814286234,"shasum":"3090e70761f88a71ce37485e43895e99ab6609e4"},{"_id":"public/tags/算法/index.html","modified":1487814286257,"shasum":"d8aa31e545b251135c27a200db931eccb26883df"},{"_id":"public/tags/时间复杂度/index.html","modified":1487814286283,"shasum":"5df18f18315a242b86b8c9c3d59f4ff2218f5e31"},{"_id":"public/tags/life/index.html","modified":1487814286317,"shasum":"f315eeb041ced737f67b8e53c7faf717dd2378b0"},{"_id":"public/tags/Jackson/index.html","modified":1487814286340,"shasum":"aa7cba0f3c1ba53debbd677b1f0e8e45fe28b11c"},{"_id":"public/tags/序列化/index.html","modified":1487814286364,"shasum":"cb17e48f3dfa4acf3c1ed98101912dddaebdbd00"},{"_id":"public/tags/反序列化/index.html","modified":1487814286396,"shasum":"4c08a19dd728941a5a29ee52cc8a98ea783e5022"},{"_id":"public/tags/调酒师/index.html","modified":1487814286418,"shasum":"98e70cf15b95ee96634d327037f6f89a26244332"},{"_id":"public/tags/Guava/index.html","modified":1487814286440,"shasum":"b78a52e18e5723772afebeef6457c4d9b68c6fb8"},{"_id":"public/tags/Selenium/index.html","modified":1487814286473,"shasum":"7fa447d9069155f32a8a419ef8e37fdb03cb77d3"},{"_id":"public/tags/JavaWeb/index.html","modified":1487814286497,"shasum":"3eb59bbc4be0653892e62252f788cdc873d78354"},{"_id":"public/atom.xml","modified":1487754021796,"shasum":"6e132bcc62ce0e36b38417724c7d1af5180ecd61"},{"_id":"themes/next/git","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814218000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814219000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814220000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814220000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814220000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487814220000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1487814218000},{"_id":"themes/next/README.md","shasum":"0b709591995001cd860384d6c189e51d91690714","modified":1487814218000},{"_id":"themes/next/_config.yml","shasum":"f4cf27e19ac95fc96849c772557d3cdd33a3d369","modified":1487814218000},{"_id":"themes/next/bower.json","shasum":"4a53cab758c7d69be2ce773b2afff7dd962b7cb0","modified":1487814218000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1487814232000},{"_id":"themes/next/languages/default.yml","shasum":"f57623e47f533c8d53d859628fa6a368a5298a00","modified":1487814232000},{"_id":"themes/next/languages/en.yml","shasum":"f57623e47f533c8d53d859628fa6a368a5298a00","modified":1487814232000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"2cec663601ac8d178e97aee91d967fa99a95ad4e","modified":1487814232000},{"_id":"themes/next/languages/pt.yml","shasum":"8e38fdf3a5232b428d2e4a641666dbabab87c3d1","modified":1487814232000},{"_id":"themes/next/languages/ru.yml","shasum":"1d1b158f9cff1b38978086043f299b3fc590e007","modified":1487814232000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"c01d18d5c3837bb04d263e845db8f6827fde65de","modified":1487814232000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"248b88c825fde8e35839f3954d38df4e72a0537c","modified":1487814232000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"42ba1d0c6b6026ba1e613ad11efb75432a8132ac","modified":1487814232000},{"_id":"themes/next/layout/_layout.swig","shasum":"4efe52f310b797f4bdedacbd979caf285d2bc731","modified":1487814219000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"9032ae9056cb19b4c2d069d66ead7abf828f9922","modified":1487814219000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"f32eaace2afb0450cf230f96ee8c87f20d6a9072","modified":1487814219000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"88e179ff660874135b17d0febc91d04749053a73","modified":1487814219000},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"a612a4eca51ffc87b53a5470b451071a7ad6a031","modified":1487814219000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1487814218000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"970a669aae1889d37b2028d174d9d45e88dc0e4f","modified":1487814218000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"fcef099c268bd4964e65cfe3109e3fe99d0b925c","modified":1487814218000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"476333c49a1e7e0402a68a826f67527ac258969d","modified":1487814218000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1487814218000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1487814218000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1487814218000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"eefe2388ff3d424694045eda21346989b123977c","modified":1487814218000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1487814218000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1487814218000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1487814218000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1487814219000},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","shasum":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1487814219000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1487814219000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1487814219000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1487814219000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1487814219000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1487814219000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"44e3d567fd49c2a093f4a0a8af9f00542c935a58","modified":1487814219000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1487814219000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1487814219000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1487814219000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"0d9761e3b1bb9e666ccc71bad59f035deb5a88c6","modified":1487814219000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"7a34b02808f144ee4a11032ae3a149eb634a7e82","modified":1487814219000},{"_id":"themes/next/layout/_scripts/tinysou.swig","shasum":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1487814219000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1487814219000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1487814219000},{"_id":"themes/next/layout/index.swig","shasum":"38b1ad401b748965369296b86327d23082a1fe93","modified":1487814219000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1487814219000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1487814219000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1487814219000},{"_id":"themes/next/scripts/filters/sticky.js","shasum":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1487814232000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1487814232000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"535fc542781021c4326dec24d8495cbb1387634a","modified":1487814232000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1487814232000},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1487814232000},{"_id":"themes/next/source/404.html","shasum":"6116ce3385ed0cadff6be92ff3b80f38974b73ee","modified":1487814219000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","shasum":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"2d2da815ab0981b219ea1973a4aedede48801411","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","shasum":"1ee40743000173495728855f734081eb2b6167cc","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"6750b61236eb359028da8f2c4765f7c89b03dc9a","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"672d5fa7e5b7642d86a4bda176b501508b54860f","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/posts.styl","shasum":"b05ac51dd266d27f12e39e59a94383fe6474b7b3","modified":1487814220000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1487814220000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"388aa7c69c97728c64941db01e0f29a88837120c","modified":1487814220000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"d339d114e52a9abbc797ec236a8a770c29e288a6","modified":1487814220000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1487814220000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"1f8acb3331300eec696a09e7859e11f191e16d7f","modified":1487814220000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1487814220000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1487814220000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1487814220000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1487814220000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1487814220000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1487814220000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1487814220000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1487814220000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"03ae7b808dde9065412968aa69916162e790455d","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1487814220000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"bc106c3e759cd752c2b4c53ac27bc5ef5e3b18ea","modified":1487814220000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1487814219000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1487814219000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1487814220000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1487814220000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"1631a430655eadb485574d1a9bedd49460988b11","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","shasum":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1487814219000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1487814219000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"9f8791860cc1ca724d2dfe609e8cd6abc44d6926","modified":1487814220000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"f532d6b0f961a8f3867c06e132233286f110180d","modified":1487814220000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1487814220000},{"_id":"themes/next/source/css/main.styl","shasum":"56dacee56c5eaa4b2676d196452314fb50f758aa","modified":1487814220000},{"_id":"themes/next/source/favicon ","shasum":"be768aa00bcddf483803c35ca37c8f9fe2bb06f3","modified":1487814219000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487814219000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487814219000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487814219000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487814219000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487814219000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487814219000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487814219000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487814219000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487814219000},{"_id":"themes/next/source/images/quote-l.svg","shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487814219000},{"_id":"themes/next/source/images/quote-r.svg","shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487814219000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487814219000},{"_id":"themes/next/source/js/bootstrap.js","shasum":"f9b637b6d064f728d7dc2b6b5058a006a4454299","modified":1487814219000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1487814219000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"b5fa638ed371b5f658b0826ec4afee25d9986ef2","modified":1487814219000},{"_id":"themes/next/source/js/helpers.js","shasum":"c15216ef897334362789ba37464298948b2eef95","modified":1487814219000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ccb32e0a1acf798337c9697e1aab5484b52f9df4","modified":1487814219000},{"_id":"themes/next/source/js/motion.js","shasum":"b4132517fe499538ad725094593fb7ead8c04bf7","modified":1487814219000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"1148fa2bcb8b2e40c31e5f597bf794a57369a2e6","modified":1487814219000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1487814228000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487814228000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487814232000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1487814231000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1487814231000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487814232000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487814232000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1487814220000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1487814220000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1487814220000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487814220000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1487814221000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1487814220000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"895d50fa29759af7835256522e9dd7dac597765c","modified":1487814220000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1487814223000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1487814220000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487814220000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487814220000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1487814228000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487814228000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487814229000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487814228000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1487814232000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1487814232000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1487814221000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1487814222000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1487814222000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487814231000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1487814224000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1487814230000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1487814227000}],"Category":[{"name":"工作","_id":"cizgqabqd0006dbtj6g5c65n3"},{"name":"CI","_id":"cizgqabqj000bdbtjdc1g8ow9"},{"name":"Java","_id":"cizgqabqn000gdbtjve9eeg2r"},{"name":"Devops","_id":"cizgqabqq000ldbtjy67hno8r"},{"name":"DevOps","_id":"cizgqabqt000qdbtjkt2f27p5"},{"name":"读书","_id":"cizgqabr20011dbtjoevn6gze"},{"name":"life","_id":"cizgqabr60016dbtjwqrflvri"},{"name":"夯实基础","_id":"cizgqabrh001hdbtjan9l8vb4"},{"name":"踩坑记","_id":"cizgqabrq001udbtjuknacz0k"},{"name":"业余生活","_id":"cizgqabrv0023dbtjkd4d96hl"},{"name":"Before 2016","_id":"cizgqabs2002cdbtj6vu2x6x6"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","date":"2016-01-08T04:41:02.000Z","updated":"2016-01-08T04:41:02.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cizgqabjt0000dbtjohbagyjz"},{"title":"tags","date":"2016-01-13T02:44:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-01-13 10:44:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-01-13T02:50:50.000Z","path":"tags/index.html","layout":"page","_id":"cizgqaboc0001dbtjnenb1btw"},{"title":"categories","date":"2016-01-08T09:35:51.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-01-08 17:35:51\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-01-08T09:37:01.000Z","path":"categories/index.html","layout":"page","_id":"cizgqabpe0002dbtjw0pzjy7m"},{"title":"about","date":"2016-01-08T04:06:13.000Z","_content":"\nIt's waiting for edit.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-01-08 12:06:13\n---\n\nIt's waiting for edit.\n","updated":"2016-01-08T04:16:57.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizgqabq30003dbtjvygqkasp"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-01-07T09:24:48.000Z","updated":"2016-01-07T09:24:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabq60004dbtjejtnrkul","sticky":0},{"title":"一粒略有成效的Management","date":"2017-01-09T04:55:59.000Z","_content":"\n经过了近两个月的忙碌，上周五顺利的发布了公司内部的一个CRM系统。就技术而已，项目本身没多大难度。但是，作为我踏入职场之后的第一次Project Management, 还是给我带来了很多新鲜的体验和不同的思考。所以，很值得来一次复盘。\n\n![management](http://static5.depositphotos.com/1009659/496/i/450/depositphotos_4967133-stock-photo-crossword.jpg)\n\n<!-- more -->\n\n## 背景\n这个CRM系统在公司的技术团队组建完善之前，就需要使用，所以当时在比较急的情况下选择了外包购买的方式。后来因为多方面的原因，比如外包产品不是定制化的，不那么好用，以及该系统产出物的目标客户的特殊性等，公司决定自行开发一个此CRM系统的替代品。而在我接手这个活之前，是有一个小项目组在做的，而且据说已经做了3~4个月。这个项目组的配置是3个后端，2个前端，技术经理是一个后端开发，大概3年以上工作经验，其他人平均工作经验在半年到一年之间吧。\n\n之所以变成我来写这个项目的review，是因为之前5个人的团队3个多月做出来的半成品，第一次提测的时候被QA认为是几乎无法使用。眼看Deadline还有不到两个月，管理层对于这个状况表示无法容忍。过程的一些细节此处不谈，最后的结果是技术经理和另一个后端开发‘被辞职’。项目组暂时停摆。\n\n然后有天，CTO找我聊了一下，表示希望我作为牵头人，来接手这个项目。一开始我的内心是拒绝的，因为这种项目在我眼里，是大学生实验室里的一些外包活的水平。然而当时的我手头确实不算很忙，而且这个项目确实比较紧急，不能再拖了。所以尽管内心不是很情愿，也只能安慰自己说是来帮忙救火的。项目重新立项，作为该项目需求方和验收方的产品经理(公司高管之一，同时也是这个项目中我需向其主动汇报的人)老高请大家吃饭时，我的内心甚至有那么一丝对自己前途的忧虑。。。\n\n\n## 先谈结果\n\n### 进度\n\n- 2016.11.14本项目重新立项，到2016.12.23新系统p0(标识优先级)模块上线，再到2017.1.6新系统p1模块发布。至此，新系统可以算是提前交付了。\n\n### 质量\n\n- QA团队的反应是该项目虽然提测时也有一些bug,但基本都是一些交互上的，不影响核心功能使用的bug,比起公司的主App版本迭代时的bug要少了很多。\n- 产品经理和目标用户试用后给到的反馈也是比较满意。不仅尽可能完成需求文档上所需要的功能要求，在交互上也做了不少的优化。\n- 我其实是知道自己埋了一些后面需要去填的坑的。没有选择一开始就填掉也是为了项目进度让步。不过这些坑对于内部系统来说，都是无伤大雅的。\n\n\n### 团队\n\n- 团队从之前的五个人，缩减为现在的三个人 -- 我作为一个应届毕业生，担任技术经理(或者不那么严格的区分的话，也算项目经理，因为项目进度主要是我在管控)，带领另外两个大概有两到三年工作经验的程序员(一个后端，一个前端)完成任务。刚开始觉得要带工作经验比自己要长的人，心里也会有点没底。然而最后I made it,真心感激老东家@堆糖，老Leader@alswl和@shadow在技术和管理上给我带来的影响。\n\n### 心态\n\n- 除了被队友坑的有那么些不爽之外，整个项目过程我是处于越来越享受的一个状态。这很出乎我的意料之外。\n\n## 再聊过程\n\n### 要人\n\n新的团队中的后端开发也是被领导层指定加入的，所以我没有什么选择权。不过领导层没有指定前端，甚至希望我考虑下可不可以不要前端，UI开发的难看一点都没关系。这个问题被我直接拒绝了，不是技能栈没有延伸到那一块，而是出于个人的一些私心。来做这样一个项目无论对我还是另一个后端工程师都已经是对职业发展不那么好的一个选择，面向公司内部的外包项目和面向广大外部用户的移动互联网项目，我不想去进一步比较哪一个对于个人的发展更有利一些。更何况我已经坚定的将自己定位为后端工程师，花很多时间去写一些低质量的前端代码，与职业发展相悖，这一点当然不能轻易接受。我承认这确实出于私心，但是在公司有相关资源可用以及能保证项目进度的情况下，员工高度重视自己的个人成长，在长期看来也许是一件更有利于企业自身的事情。\n\n总而言之，在我的坚持下，新团队有了前端资源。经过分析后，我向前端Leader开口要人了。因为之前跟前端的几个开发合作的不多，但对其总体水平略知一二，所以要人的时候比较谨慎。特地请前端Leader给一个效率相对较高的人，并希望后期其他项目的活尽量不要派给他，因为这个项目需要赶进度。最后前端Leader经过考虑，给了个确实相对之前的前端团队来说效率较高的人。但是在后面的合作中，依然一次次激起我内心数万头草泥马的奔腾。\n\n### CodeStyle & 单元测试\n\n对于前面的团队留下来的源码，不懂代码的产品经理都建议我说：‘你们推倒重来吧‘。开始我还没有那么想这样做，但是当我看到源码中各种以大驼峰的方式命名的Method，各种以拼音首字母的缩写的命名的字段，以及连.gitignore文件都没有添加的repo时，我就知道我该干嘛了，当然我是先吐了一口老血。\n\n考虑到代码中可能有一些业务的说明注释，我还是选择了在原有代码仓库上做修改。于是在下周一就要开工写代码之前，周天自己跑到公司加了一天班。在项目的gradle build流程中增加了CodeStyle Check和UnitTest的强制执行.并在后续的开发中与同事约定，每次push到dev分支之前，请在本地保证Build是Success的。可以不用追求覆盖率，可以不用使用h2之类的内存数据库，但是请务必保证代码风格check和单元测试的正常。而且尽量增强自己写的单测的健壮性，不要因为其他人随便修改了点数据库的数据，自己的单测就挂掉了。\n\n当然，这里提到的单测其实已经不是严格意义上的单元测试了，而有点像集成测试。还有上面提到的，不强制追求单测覆盖率，其实也是一个潜在的问题。因为项目进度本身就比较赶，根本没时间做CodeReview，那么如果开发一个单测都不写，其实也是可以Build Successful的。但其实每个开发还是有一些良知和敬畏的，不会刻意去钻这样的漏洞。所以这个看起来漏洞百出的build规约，在我们这个项目的实施过程中，还是很顺利的。如果团队更大一些，肯帝是要制定相对完善的机制和付出一定的成本来保证代码持续集成的质量，比如引入h2内存数据库，比如定一个必须满足的单测覆盖率等等。\n\n下面是我司主App的一个版本迭代项目和本项目提测后，被QA验证出来的bug数量分析图。\n\n- 主APP版本迭代项目\n\n![2.1](http://7xsrzn.com1.z0.glb.clouddn.com/ptm21.png?)\n\n- 本项目\n\n![crm2.0](http://7xsrzn.com1.z0.glb.clouddn.com/crm2.png)\n\n两个项目中，前端(特指h5)跟客户端的构建流程都没有强制验证单测，而只有本项目的后端代码的构件流程中强制验证了单测。\n\n两个项目的业务和架构形态不完全相同，所以上面的对比并不能说明全部的问题。然而bug数量如此悬殊的差距，我认为单元测试在其中还是起到了非常重要的作用。\n\n### 测试环境构建自动化\n\n现在技术团队持续集成用的Jenkins服务，无论android,ios,h5还是backend,都是我一手搭建起来的.与同事约定好git work flow之后，设定好Jenkins的job，就能达到每次push dev分支代码即可自动重启测试环境并更新代码的效果。如果单测失败导致build failed了，那么测试环境也就挂了，问题暴露也就越发的快。这样的模式，对于我们这样的小Team来说，确实很爽，很高效。\n\n说到快速发现问题，又想聊下日志该怎么打的问题。我本以为不管怎样，根据不同的业务把日志打到不同的文件中是很基础的事情。但是现在APP团队的那些后台项目，所有的日志全打在一个文件里面...每次线上出问题了要查找关键日志，都很低效，还经常出现找不到错误日志的情况，其实不是真的没有，而是太难找。跟一些开发反馈过这个问题，但是得到的回复是不知道该怎么按业务清晰的划分，以及不是可以用logger的Class和级别去一行行匹配查找吗？。。。。我现在想说，即使按业务划分的粒度非常大，也能轻轻松松的把一个有业务功能的系统分成个四五个子模块吧。如果能分工打出四五份不同模块的日志，线上定位问题起来也要方便和快速的多了吧。\n\n### 细粒度工作量估算 & 每日站会\n\n聊完技术上的管理，接下来主要聊聊流程上的管理。\n\n- 需求确定之后，我先是给需求划分了一个优先级，分为p0,p1和p2。其中p0和p1上线之后就可以交付给用户们投入使用了，p2是一些诸如管理员管理系统用户账号创建之类的功能，即使不写代码，也能通过其他方式暂时满足需求。\n- 确定优先级之后，与需求方确认每个版本上线的deadline.并让各位开发对当前阶段要开发的功能，进行自我工作量评估，最后会写进团队的工作日历(下图是部分安排截图)。确保只要按照项目计划进行，就能如期交付。\n- 每天下班前开发组站会。每日阐述自己今天的工作内容，并自我评估进度健康状况。如果发现有delay迹象，会要求对应开发尽快做出调整。\n- 每周五下班前，根据每日站会的统计情况，向需求方反馈项目进度周报。\n\n![进度日历](http://7xsrzn.com1.z0.glb.clouddn.com/calender.png)\n\n\n这套流程中，我觉得对本项目按期交付帮助最大的就是优先级的划分和每日站会的进度管理方式。优先级划分清楚之后，让我们心头的压力小了不少，只需要集中注意力去做一些用户核心需要的功能需求，那些不那么紧要的需求，我们可以排在最后慢慢去做。从而团队的节奏就会显得从容很多。\n\n每日站会这个进度管理方式就更是重要了。它能够帮助我很及时的发现团队中有人节奏掉队，不管是什么原因引起的：也许是一整天游手好闲不专心干活，也许是被其他优先级更高的事件占据了时间，也许是碰上了技术山的难题卡壳了，或者干脆就是执行效率低下等等。我只需要每天拉上开发，花5分钟左右的时间，大家汇报一下工作内容并自我评估一下进度，真的是一个蛮轻松的事。因为有时候，通过口头汇报one by one的方式，落后的人会通过比较很明显的发现自己的进度是落后的。然后脸红，心跳加速等反应就会发生，然后会自己反思该如何把进度补上来等等。我作为项目经理，大多数时候不需要去过多的提醒。但是如果没有这样一个每日反思一下的流程，即使是自我驱动性较强的人，也会出现自己没能及时察觉的进度掉队。毕竟，在没有外力的干扰下，人总是比较容易的原谅和包庇自己。我自认为是一个自驱性比较强的人，然而也曾掉进过这样的人性陷阱里，幸亏是每日站会的制度及时的把我拉了出来。\n\n另外，有些自律性比较高的同事也曾聊起过对每日站会这种进度的抵触性，认为其将团队气氛弄得过于紧张了等等。我也承认这种问题的存在，我觉得非常优秀的团队也许对于轻松气氛的需求胜过对进度状态监控的需求。然而大多数相对平庸，甚至情势不容乐观的团队(我司的部分技术团队目前应该算在内)，对项目进度的及时掌控和调整，如果做的不好，可能直接关系到生死存亡。。。\n\n### 推广协同工具\n\n在本项目开展之前，我曾想推动整个团队去使用一些类似Trello, Tower，TeamBition之类的Get Things Done的团队协作工具。但是因为一说要花钱，就没太多后文了，所以一直没能成行。这次可以自己主导项目的节奏，于是要求小团队入驻了Tower,前文提到的工作日历，每日站会等都是在Tower上进行的。还有很多次与产品经理商量一些产品上的细节，我们都是在Tower上讨论并归档的。因用QQ讨论显得有效力不够，用邮件讨论觉得稍微重了点，而且两个人之间的讨论后面想让其他人看到，还得再转发，以及在内容的编写格式上受到的限制等等。而且这种工具对责任田的划分，任务完成时间的管理等都是有比较好的帮助的。\n\n值得欣慰的是，产品经理在慢慢的使用过程中，向我表示过对引入这种好用工具的赞赏。最近跟CTO聊的时候，贴了个链接给他，他也表示希望能在后续推动这种协同工具在团队中的使用。\n\n\n### 卓有成效的管理\n\n在项目进行的同时，我拜读了Peter F. Drucker的经典作品《卓有成效的管理》。这是我到目前为止在kindle上看书做标记做的最多的一本。原因很简单，因为有很多观点直接戳中我所面临的问题。比如用人只需关注其长处，并利用好这个特质，让其发挥尽可能多的作用，而不用过多的关注此人的短处，更不能让其去承担太多于他而言有风险的任务。这种一边实践，一边通过看书来review自己的实践效果的方式，我会觉得受益很多。上次有这样的体验是在做一个重构性质的项目时，同步阅读了Martin Fowler的《重构:改善既有代码的设计》一书，同样印象深刻受益良多。\n\n\n\n## 不吐槽会憋死\n\n我决定还是控制下情绪。不多说了。\n\n<!--\n整体上而言，此次项目经历我觉得受益还是很多的，做的过程中也比较开心。但是前文也提到，还是有被队友坑到内心‘万马奔腾’的时候。比如有某队友让TA切条dev分支push一下，TA在座位上犹豫了半天，突然端起电脑跑回去找自己的Leader求助。。。再比如项目刚开始的时候，我因为有事要请假，让一队友A帮忙整理一下以前的团队遗留下来的系统进度，队友A可能统计的没有很精确，有一些工作前端的同事做了，不过没跟后端联调，A将其标记为了未完成。后来我请完假回来和A在讨论一些业务细节的时候，另一位队友B端着电脑一脸怒气的冲过来，往桌子上一放，说：‘我们前端之前明明做了，只是没联调，你们说没做是什么意思’。我当时想打个圆场说，这是A帮我统计的，也不一定是准确的，我们现在正在商量点重要的需求，待会再聊这个可以吗。B队友真的是不依不饶呀，好像非要给自己的前端阵营出口气，还是非要给我来个下马威还是什么的。不停的指指点点好像非要给个说法，我特么也是不爽了，声音一提：“那你现在冲过来是想得个什么结果？”。结果也就软了，说什么只是想说不是没做，只是没联调。呵呵。再比如三个人的Team ,两个人每天9点钟左右就差不多到了，开始工作了，另一个几乎每天10点半以后才到。要说住得远也没什么好过分追究的，可是每天10点半到了之后，在那边和这个唠唠嗑和那个搭搭话，显得自己多会交际还是什么的。就快到11点了，然后了，12点出去吃午饭啊！然后回来了还要和其他同事再疯一疯聊一聊，我跟另一个队友都午休醒了，TA开始午休了。最后到晚上，三个人中最早走的几乎也总是TA。更气人的是团队等着提测了，就等TA的bug修完的时候，TA反倒是最不着急的，一会这里窜窜，一会和那边聊天的人搭搭话。搞得我心里真的窝火。等到好不容易提测了，我跟一个队友都在很积极的和QA一起找bug,某队友就像已经交货了是的，只等着别人主动给TA提就好了，不会自己去查自己的bug.可是往往都是该队友的隐秘bug被最后发现，影响交付的时间。如果说以上这些我可以再忍一忍的话，那预发布的时候，注意是在预发布的时候，某队友一声不吭从办公室消失，整整四个多小时，更关键的是预发布环境上一堆全是TA的bug等着修。呵呵呵。QQ问TA哪去了也不回。我特么当时真的是‘万马奔腾’。等晚上6点多回来了，7点多又收拾东西回家了。我去你这个算是翘班了吧，说好的一天八小时了？\n还创业了，朋友？\n\n如果我以上说的那么多个某队友的奇葩事，其实是同一个人，你是不是也。。。好吧，当我没说。\n\n-->\n\n## 我对管理的认知\n\n说了很多，但本文的核心关键词是‘管理’。这里我也不将论点延伸到个人管理什么的了，就谈职场上的团队管理。我认为，作为一个技术人员，个人的潜心修炼，日复一日的沉淀积累，也许可以让自己为企业输出的价值保持在30%到50%的年增长率，这个状态在刚参加工作时也许可以持续好几年，但增长率通常会越来越低，甚至会随着时间的迁移，出现负增长的现象。然而如果他能知人善用，能运用好「团队管理」这项“可怕”的技能，那么他的输出价值增长率也许能达到300%，500%，或者1000%，甚至更多。\n\n但是，想要带领技术团队产出相比于自身500%以上价值的Manager,不经过好几年的潜心修炼和沉淀积累，那么他能领导和管理的人，也许会有一个很低的天花板，然后他的Team所能创造的价值，也会有一个很明显的天花板。\n\n不过，我也不认为Team Leader只能管理比自己弱的人，毕竟「用师者王」。如何「用师」，是管理的高级艺术，此处不敢妄谈。。\n\n---\n\n路漫漫兮其修远。\n\n![road](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4094419724,3943831855&fm=23&gp=0.jpg)\n\n\n\n\n","source":"_posts/:2017-01-09-一粒略有成效的Management.md","raw":"---\ntitle: 一粒略有成效的Management\ndate: 2017-01-09 12:55:59\ntags: 项目管理\ncategories: 工作\n\n---\n\n经过了近两个月的忙碌，上周五顺利的发布了公司内部的一个CRM系统。就技术而已，项目本身没多大难度。但是，作为我踏入职场之后的第一次Project Management, 还是给我带来了很多新鲜的体验和不同的思考。所以，很值得来一次复盘。\n\n![management](http://static5.depositphotos.com/1009659/496/i/450/depositphotos_4967133-stock-photo-crossword.jpg)\n\n<!-- more -->\n\n## 背景\n这个CRM系统在公司的技术团队组建完善之前，就需要使用，所以当时在比较急的情况下选择了外包购买的方式。后来因为多方面的原因，比如外包产品不是定制化的，不那么好用，以及该系统产出物的目标客户的特殊性等，公司决定自行开发一个此CRM系统的替代品。而在我接手这个活之前，是有一个小项目组在做的，而且据说已经做了3~4个月。这个项目组的配置是3个后端，2个前端，技术经理是一个后端开发，大概3年以上工作经验，其他人平均工作经验在半年到一年之间吧。\n\n之所以变成我来写这个项目的review，是因为之前5个人的团队3个多月做出来的半成品，第一次提测的时候被QA认为是几乎无法使用。眼看Deadline还有不到两个月，管理层对于这个状况表示无法容忍。过程的一些细节此处不谈，最后的结果是技术经理和另一个后端开发‘被辞职’。项目组暂时停摆。\n\n然后有天，CTO找我聊了一下，表示希望我作为牵头人，来接手这个项目。一开始我的内心是拒绝的，因为这种项目在我眼里，是大学生实验室里的一些外包活的水平。然而当时的我手头确实不算很忙，而且这个项目确实比较紧急，不能再拖了。所以尽管内心不是很情愿，也只能安慰自己说是来帮忙救火的。项目重新立项，作为该项目需求方和验收方的产品经理(公司高管之一，同时也是这个项目中我需向其主动汇报的人)老高请大家吃饭时，我的内心甚至有那么一丝对自己前途的忧虑。。。\n\n\n## 先谈结果\n\n### 进度\n\n- 2016.11.14本项目重新立项，到2016.12.23新系统p0(标识优先级)模块上线，再到2017.1.6新系统p1模块发布。至此，新系统可以算是提前交付了。\n\n### 质量\n\n- QA团队的反应是该项目虽然提测时也有一些bug,但基本都是一些交互上的，不影响核心功能使用的bug,比起公司的主App版本迭代时的bug要少了很多。\n- 产品经理和目标用户试用后给到的反馈也是比较满意。不仅尽可能完成需求文档上所需要的功能要求，在交互上也做了不少的优化。\n- 我其实是知道自己埋了一些后面需要去填的坑的。没有选择一开始就填掉也是为了项目进度让步。不过这些坑对于内部系统来说，都是无伤大雅的。\n\n\n### 团队\n\n- 团队从之前的五个人，缩减为现在的三个人 -- 我作为一个应届毕业生，担任技术经理(或者不那么严格的区分的话，也算项目经理，因为项目进度主要是我在管控)，带领另外两个大概有两到三年工作经验的程序员(一个后端，一个前端)完成任务。刚开始觉得要带工作经验比自己要长的人，心里也会有点没底。然而最后I made it,真心感激老东家@堆糖，老Leader@alswl和@shadow在技术和管理上给我带来的影响。\n\n### 心态\n\n- 除了被队友坑的有那么些不爽之外，整个项目过程我是处于越来越享受的一个状态。这很出乎我的意料之外。\n\n## 再聊过程\n\n### 要人\n\n新的团队中的后端开发也是被领导层指定加入的，所以我没有什么选择权。不过领导层没有指定前端，甚至希望我考虑下可不可以不要前端，UI开发的难看一点都没关系。这个问题被我直接拒绝了，不是技能栈没有延伸到那一块，而是出于个人的一些私心。来做这样一个项目无论对我还是另一个后端工程师都已经是对职业发展不那么好的一个选择，面向公司内部的外包项目和面向广大外部用户的移动互联网项目，我不想去进一步比较哪一个对于个人的发展更有利一些。更何况我已经坚定的将自己定位为后端工程师，花很多时间去写一些低质量的前端代码，与职业发展相悖，这一点当然不能轻易接受。我承认这确实出于私心，但是在公司有相关资源可用以及能保证项目进度的情况下，员工高度重视自己的个人成长，在长期看来也许是一件更有利于企业自身的事情。\n\n总而言之，在我的坚持下，新团队有了前端资源。经过分析后，我向前端Leader开口要人了。因为之前跟前端的几个开发合作的不多，但对其总体水平略知一二，所以要人的时候比较谨慎。特地请前端Leader给一个效率相对较高的人，并希望后期其他项目的活尽量不要派给他，因为这个项目需要赶进度。最后前端Leader经过考虑，给了个确实相对之前的前端团队来说效率较高的人。但是在后面的合作中，依然一次次激起我内心数万头草泥马的奔腾。\n\n### CodeStyle & 单元测试\n\n对于前面的团队留下来的源码，不懂代码的产品经理都建议我说：‘你们推倒重来吧‘。开始我还没有那么想这样做，但是当我看到源码中各种以大驼峰的方式命名的Method，各种以拼音首字母的缩写的命名的字段，以及连.gitignore文件都没有添加的repo时，我就知道我该干嘛了，当然我是先吐了一口老血。\n\n考虑到代码中可能有一些业务的说明注释，我还是选择了在原有代码仓库上做修改。于是在下周一就要开工写代码之前，周天自己跑到公司加了一天班。在项目的gradle build流程中增加了CodeStyle Check和UnitTest的强制执行.并在后续的开发中与同事约定，每次push到dev分支之前，请在本地保证Build是Success的。可以不用追求覆盖率，可以不用使用h2之类的内存数据库，但是请务必保证代码风格check和单元测试的正常。而且尽量增强自己写的单测的健壮性，不要因为其他人随便修改了点数据库的数据，自己的单测就挂掉了。\n\n当然，这里提到的单测其实已经不是严格意义上的单元测试了，而有点像集成测试。还有上面提到的，不强制追求单测覆盖率，其实也是一个潜在的问题。因为项目进度本身就比较赶，根本没时间做CodeReview，那么如果开发一个单测都不写，其实也是可以Build Successful的。但其实每个开发还是有一些良知和敬畏的，不会刻意去钻这样的漏洞。所以这个看起来漏洞百出的build规约，在我们这个项目的实施过程中，还是很顺利的。如果团队更大一些，肯帝是要制定相对完善的机制和付出一定的成本来保证代码持续集成的质量，比如引入h2内存数据库，比如定一个必须满足的单测覆盖率等等。\n\n下面是我司主App的一个版本迭代项目和本项目提测后，被QA验证出来的bug数量分析图。\n\n- 主APP版本迭代项目\n\n![2.1](http://7xsrzn.com1.z0.glb.clouddn.com/ptm21.png?)\n\n- 本项目\n\n![crm2.0](http://7xsrzn.com1.z0.glb.clouddn.com/crm2.png)\n\n两个项目中，前端(特指h5)跟客户端的构建流程都没有强制验证单测，而只有本项目的后端代码的构件流程中强制验证了单测。\n\n两个项目的业务和架构形态不完全相同，所以上面的对比并不能说明全部的问题。然而bug数量如此悬殊的差距，我认为单元测试在其中还是起到了非常重要的作用。\n\n### 测试环境构建自动化\n\n现在技术团队持续集成用的Jenkins服务，无论android,ios,h5还是backend,都是我一手搭建起来的.与同事约定好git work flow之后，设定好Jenkins的job，就能达到每次push dev分支代码即可自动重启测试环境并更新代码的效果。如果单测失败导致build failed了，那么测试环境也就挂了，问题暴露也就越发的快。这样的模式，对于我们这样的小Team来说，确实很爽，很高效。\n\n说到快速发现问题，又想聊下日志该怎么打的问题。我本以为不管怎样，根据不同的业务把日志打到不同的文件中是很基础的事情。但是现在APP团队的那些后台项目，所有的日志全打在一个文件里面...每次线上出问题了要查找关键日志，都很低效，还经常出现找不到错误日志的情况，其实不是真的没有，而是太难找。跟一些开发反馈过这个问题，但是得到的回复是不知道该怎么按业务清晰的划分，以及不是可以用logger的Class和级别去一行行匹配查找吗？。。。。我现在想说，即使按业务划分的粒度非常大，也能轻轻松松的把一个有业务功能的系统分成个四五个子模块吧。如果能分工打出四五份不同模块的日志，线上定位问题起来也要方便和快速的多了吧。\n\n### 细粒度工作量估算 & 每日站会\n\n聊完技术上的管理，接下来主要聊聊流程上的管理。\n\n- 需求确定之后，我先是给需求划分了一个优先级，分为p0,p1和p2。其中p0和p1上线之后就可以交付给用户们投入使用了，p2是一些诸如管理员管理系统用户账号创建之类的功能，即使不写代码，也能通过其他方式暂时满足需求。\n- 确定优先级之后，与需求方确认每个版本上线的deadline.并让各位开发对当前阶段要开发的功能，进行自我工作量评估，最后会写进团队的工作日历(下图是部分安排截图)。确保只要按照项目计划进行，就能如期交付。\n- 每天下班前开发组站会。每日阐述自己今天的工作内容，并自我评估进度健康状况。如果发现有delay迹象，会要求对应开发尽快做出调整。\n- 每周五下班前，根据每日站会的统计情况，向需求方反馈项目进度周报。\n\n![进度日历](http://7xsrzn.com1.z0.glb.clouddn.com/calender.png)\n\n\n这套流程中，我觉得对本项目按期交付帮助最大的就是优先级的划分和每日站会的进度管理方式。优先级划分清楚之后，让我们心头的压力小了不少，只需要集中注意力去做一些用户核心需要的功能需求，那些不那么紧要的需求，我们可以排在最后慢慢去做。从而团队的节奏就会显得从容很多。\n\n每日站会这个进度管理方式就更是重要了。它能够帮助我很及时的发现团队中有人节奏掉队，不管是什么原因引起的：也许是一整天游手好闲不专心干活，也许是被其他优先级更高的事件占据了时间，也许是碰上了技术山的难题卡壳了，或者干脆就是执行效率低下等等。我只需要每天拉上开发，花5分钟左右的时间，大家汇报一下工作内容并自我评估一下进度，真的是一个蛮轻松的事。因为有时候，通过口头汇报one by one的方式，落后的人会通过比较很明显的发现自己的进度是落后的。然后脸红，心跳加速等反应就会发生，然后会自己反思该如何把进度补上来等等。我作为项目经理，大多数时候不需要去过多的提醒。但是如果没有这样一个每日反思一下的流程，即使是自我驱动性较强的人，也会出现自己没能及时察觉的进度掉队。毕竟，在没有外力的干扰下，人总是比较容易的原谅和包庇自己。我自认为是一个自驱性比较强的人，然而也曾掉进过这样的人性陷阱里，幸亏是每日站会的制度及时的把我拉了出来。\n\n另外，有些自律性比较高的同事也曾聊起过对每日站会这种进度的抵触性，认为其将团队气氛弄得过于紧张了等等。我也承认这种问题的存在，我觉得非常优秀的团队也许对于轻松气氛的需求胜过对进度状态监控的需求。然而大多数相对平庸，甚至情势不容乐观的团队(我司的部分技术团队目前应该算在内)，对项目进度的及时掌控和调整，如果做的不好，可能直接关系到生死存亡。。。\n\n### 推广协同工具\n\n在本项目开展之前，我曾想推动整个团队去使用一些类似Trello, Tower，TeamBition之类的Get Things Done的团队协作工具。但是因为一说要花钱，就没太多后文了，所以一直没能成行。这次可以自己主导项目的节奏，于是要求小团队入驻了Tower,前文提到的工作日历，每日站会等都是在Tower上进行的。还有很多次与产品经理商量一些产品上的细节，我们都是在Tower上讨论并归档的。因用QQ讨论显得有效力不够，用邮件讨论觉得稍微重了点，而且两个人之间的讨论后面想让其他人看到，还得再转发，以及在内容的编写格式上受到的限制等等。而且这种工具对责任田的划分，任务完成时间的管理等都是有比较好的帮助的。\n\n值得欣慰的是，产品经理在慢慢的使用过程中，向我表示过对引入这种好用工具的赞赏。最近跟CTO聊的时候，贴了个链接给他，他也表示希望能在后续推动这种协同工具在团队中的使用。\n\n\n### 卓有成效的管理\n\n在项目进行的同时，我拜读了Peter F. Drucker的经典作品《卓有成效的管理》。这是我到目前为止在kindle上看书做标记做的最多的一本。原因很简单，因为有很多观点直接戳中我所面临的问题。比如用人只需关注其长处，并利用好这个特质，让其发挥尽可能多的作用，而不用过多的关注此人的短处，更不能让其去承担太多于他而言有风险的任务。这种一边实践，一边通过看书来review自己的实践效果的方式，我会觉得受益很多。上次有这样的体验是在做一个重构性质的项目时，同步阅读了Martin Fowler的《重构:改善既有代码的设计》一书，同样印象深刻受益良多。\n\n\n\n## 不吐槽会憋死\n\n我决定还是控制下情绪。不多说了。\n\n<!--\n整体上而言，此次项目经历我觉得受益还是很多的，做的过程中也比较开心。但是前文也提到，还是有被队友坑到内心‘万马奔腾’的时候。比如有某队友让TA切条dev分支push一下，TA在座位上犹豫了半天，突然端起电脑跑回去找自己的Leader求助。。。再比如项目刚开始的时候，我因为有事要请假，让一队友A帮忙整理一下以前的团队遗留下来的系统进度，队友A可能统计的没有很精确，有一些工作前端的同事做了，不过没跟后端联调，A将其标记为了未完成。后来我请完假回来和A在讨论一些业务细节的时候，另一位队友B端着电脑一脸怒气的冲过来，往桌子上一放，说：‘我们前端之前明明做了，只是没联调，你们说没做是什么意思’。我当时想打个圆场说，这是A帮我统计的，也不一定是准确的，我们现在正在商量点重要的需求，待会再聊这个可以吗。B队友真的是不依不饶呀，好像非要给自己的前端阵营出口气，还是非要给我来个下马威还是什么的。不停的指指点点好像非要给个说法，我特么也是不爽了，声音一提：“那你现在冲过来是想得个什么结果？”。结果也就软了，说什么只是想说不是没做，只是没联调。呵呵。再比如三个人的Team ,两个人每天9点钟左右就差不多到了，开始工作了，另一个几乎每天10点半以后才到。要说住得远也没什么好过分追究的，可是每天10点半到了之后，在那边和这个唠唠嗑和那个搭搭话，显得自己多会交际还是什么的。就快到11点了，然后了，12点出去吃午饭啊！然后回来了还要和其他同事再疯一疯聊一聊，我跟另一个队友都午休醒了，TA开始午休了。最后到晚上，三个人中最早走的几乎也总是TA。更气人的是团队等着提测了，就等TA的bug修完的时候，TA反倒是最不着急的，一会这里窜窜，一会和那边聊天的人搭搭话。搞得我心里真的窝火。等到好不容易提测了，我跟一个队友都在很积极的和QA一起找bug,某队友就像已经交货了是的，只等着别人主动给TA提就好了，不会自己去查自己的bug.可是往往都是该队友的隐秘bug被最后发现，影响交付的时间。如果说以上这些我可以再忍一忍的话，那预发布的时候，注意是在预发布的时候，某队友一声不吭从办公室消失，整整四个多小时，更关键的是预发布环境上一堆全是TA的bug等着修。呵呵呵。QQ问TA哪去了也不回。我特么当时真的是‘万马奔腾’。等晚上6点多回来了，7点多又收拾东西回家了。我去你这个算是翘班了吧，说好的一天八小时了？\n还创业了，朋友？\n\n如果我以上说的那么多个某队友的奇葩事，其实是同一个人，你是不是也。。。好吧，当我没说。\n\n-->\n\n## 我对管理的认知\n\n说了很多，但本文的核心关键词是‘管理’。这里我也不将论点延伸到个人管理什么的了，就谈职场上的团队管理。我认为，作为一个技术人员，个人的潜心修炼，日复一日的沉淀积累，也许可以让自己为企业输出的价值保持在30%到50%的年增长率，这个状态在刚参加工作时也许可以持续好几年，但增长率通常会越来越低，甚至会随着时间的迁移，出现负增长的现象。然而如果他能知人善用，能运用好「团队管理」这项“可怕”的技能，那么他的输出价值增长率也许能达到300%，500%，或者1000%，甚至更多。\n\n但是，想要带领技术团队产出相比于自身500%以上价值的Manager,不经过好几年的潜心修炼和沉淀积累，那么他能领导和管理的人，也许会有一个很低的天花板，然后他的Team所能创造的价值，也会有一个很明显的天花板。\n\n不过，我也不认为Team Leader只能管理比自己弱的人，毕竟「用师者王」。如何「用师」，是管理的高级艺术，此处不敢妄谈。。\n\n---\n\n路漫漫兮其修远。\n\n![road](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4094419724,3943831855&fm=23&gp=0.jpg)\n\n\n\n\n","slug":"一粒略有成效的Management","published":1,"updated":"2017-01-09T07:17:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqb0005dbtjs7y3mcjv","sticky":0},{"title":"也聊Jenkins","date":"2016-12-08T13:16:17.000Z","_content":"\n\n好久不更新，罪过罪过。是不是应该在Jenkins起个Job 帮助自己提高产量了。。。\n\n![Jenkins](https://www.cloudbees.com/sites/default/files/blogger_importer/s1600/self-restart.png)\n\n\n<!-- more -->\n\n## 先体验一把\n\n### 安装\n\n使用免安装版，直接下载war包 ：https://updates.jenkins-ci.org/download/war/\n\n或者走[官网](https://jenkins.io/)\n\n### 启动\n\n- java -jar jenkins.war --httpPort=8086\n- java -jar jenkins.war --httpsPort=8086 （https版）\n\n\n### 开始体验\n\nDemoTime.\n \n此处省略一些基础性配置，网上教程已经烂大街。\n\n比如 : http://blog.csdn.net/fireofjava/article/details/18704801\n\n\n## 再庖丁解牛\n\n### Job 触发方式 \n\n - 定时轮询源码库，发现更新便触发一次build.\n - 定期触发，比如每天凌晨1点.\n - Build after other project are built.\n - [Webhook](https://en.wikipedia.org/wiki/Webhook)：You’re only limited by your imagination.\n - 其他插件...\n \n### Job 可以做什么\n - 打包。gradle,mvn,pod,gulp....\n - shell command。\n - 唤醒子进程。java, node, python...  这个很强大。You’re only limited by your imagination,again.\n - 不仅在宿主机上执行，还可以有slave,或者登陆到其他机器上去执行build脚本。\n - ...\n\n\n### Job 执行完毕之后\n  - 上传构建成功的产物\n  - 发送邮件通知\n  - 触发其他job...\n  - 其他插件...\n  \n---\n\n请对以上三个主要模块的子项目做笛卡尔积。\n\n  \n## So What is Jenkins?\n\n 抽象一点说：Automation Server.\n \n 给人更多的印象：CI Tools.\n \n 局限性：跟软件开发挂钩太紧密。\n \n## Bonus\n \n [IF THIS THEN THAT](https://ifttt.com/)\n \n## Slides\n\n[Click me](https://drive.google.com/file/d/0Bx57XsAahdV4bmVucU0xVloxNjg/view)\n\n\n  \n  \n\n","source":"_posts/:2016-12-08-也聊Jenkins.md","raw":"\n---\ntitle: 也聊Jenkins\ndate: 2016-12-08 21:16:17\ntags: Jenkins\ncategories: CI\n\n---\n\n\n好久不更新，罪过罪过。是不是应该在Jenkins起个Job 帮助自己提高产量了。。。\n\n![Jenkins](https://www.cloudbees.com/sites/default/files/blogger_importer/s1600/self-restart.png)\n\n\n<!-- more -->\n\n## 先体验一把\n\n### 安装\n\n使用免安装版，直接下载war包 ：https://updates.jenkins-ci.org/download/war/\n\n或者走[官网](https://jenkins.io/)\n\n### 启动\n\n- java -jar jenkins.war --httpPort=8086\n- java -jar jenkins.war --httpsPort=8086 （https版）\n\n\n### 开始体验\n\nDemoTime.\n \n此处省略一些基础性配置，网上教程已经烂大街。\n\n比如 : http://blog.csdn.net/fireofjava/article/details/18704801\n\n\n## 再庖丁解牛\n\n### Job 触发方式 \n\n - 定时轮询源码库，发现更新便触发一次build.\n - 定期触发，比如每天凌晨1点.\n - Build after other project are built.\n - [Webhook](https://en.wikipedia.org/wiki/Webhook)：You’re only limited by your imagination.\n - 其他插件...\n \n### Job 可以做什么\n - 打包。gradle,mvn,pod,gulp....\n - shell command。\n - 唤醒子进程。java, node, python...  这个很强大。You’re only limited by your imagination,again.\n - 不仅在宿主机上执行，还可以有slave,或者登陆到其他机器上去执行build脚本。\n - ...\n\n\n### Job 执行完毕之后\n  - 上传构建成功的产物\n  - 发送邮件通知\n  - 触发其他job...\n  - 其他插件...\n  \n---\n\n请对以上三个主要模块的子项目做笛卡尔积。\n\n  \n## So What is Jenkins?\n\n 抽象一点说：Automation Server.\n \n 给人更多的印象：CI Tools.\n \n 局限性：跟软件开发挂钩太紧密。\n \n## Bonus\n \n [IF THIS THEN THAT](https://ifttt.com/)\n \n## Slides\n\n[Click me](https://drive.google.com/file/d/0Bx57XsAahdV4bmVucU0xVloxNjg/view)\n\n\n  \n  \n\n","slug":"也聊Jenkins","published":1,"updated":"2016-12-09T03:24:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqh000adbtj407kbcx9","sticky":0},{"title":"Java 日志的江湖","date":"2016-10-11T10:18:09.000Z","_content":"\n这个议题在网上已经有很多很多讨论的文章了，但是我还是决定自己“重造一遍轮子”。因为：\n \n ![诗句](http://7xsrzn.com1.z0.glb.clouddn.com/cishi.jpeg)\n \n <!-- more -->\n\n\n\n## 起因\n\n最近在协助重构公司内部的一个RPC框架，这个系统中要记录日志。因为以前开发的所有项目几乎都是具体的应用，也就是不会被其他项目引用；或者一些纯接口性质的、不需要记录日志的二方库。所以没什么经验，在这个中间件项目中也直接依赖了logback。然而对于中间件项目来说，这是不被允许的，因为你不知道你的jar最终会被其他用户引入到怎样的系统中，而用户系统中的日志系统与中间件中的日志系统又有怎样的关系。所以我决定趁这次机会，把java世界里的日志系统捋一捋。\n\n## Java 日志框架的发展史\n\n先来看看Java世界里日志框架的发展史。\n本段内容主要引自于[此文](http://www.cnblogs.com/chenhongliang/p/5312517.html)\n\n> - 1996年早期，欧洲安全电子市场项目组决定编写它自己的程序跟踪API(Tracing API)。经过不断的完善，这个API终于成为一个十分受欢迎的Java日志软件包，即Log4j。后来Log4j成为Apache基金会项目中的一员。\n> - 期间Log4j近乎成了Java社区的日志标准。据说Apache基金会还曾经建议sun引入Log4j到java的标准库中，但Sun拒绝了。\n> - 2002年Java1.4发布，Sun推出了自己的日志库JUL(Java Util Logging),其实现基本模仿了Log4j的实现。在JUL出来以前，log4j就已经成为一项成熟的技术，使得log4j在选择上占据了一定的优势。\n> - 接着，Apache推出了Jakarta Commons Logging，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用Commons Logging的接口，底层实现可以是log4j，也可以是Java Util Logging。\n> - 后来(2006年)，Ceki Gülcü(log4j的作者)不适应Apache的工作方式，离开了Apache。然后先后创建了slf4j(日志门面接口，类似于Commons Logging)和Logback(Slf4j的实现)两个项目，并回瑞典创建了QOS公司，QOS官网上是这样描述Logback的：The Generic，Reliable Fast&Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。\n> - 现今，Java日志领域被划分为两大阵营：Commons Logging阵营和SLF4J阵营。\nCommons Logging在Apache大树的笼罩下，有很大的用户基数。但有证据表明，形式正在发生变化。2013年底有人分析了GitHub上30000个项目，统计出了最流行的100个Libraries，可以看出slf4j的发展趋势更好：\n\n![图片](http://7xs54s.com1.z0.glb.clouddn.com/java_populor_jar.png?_=5312517)\n> - Apache眼看有被Logback反超的势头，于2012-07重写了log4j 1.x，成立了新的项目Log4j 2。Log4j 2具有logback的所有特性。\n\n\n\n\n\n## 门面，实现类，桥接包\n\n经历了上述的发展，现在使用日志框架时往往会涉及三个层面的东西。\n\n - 门面\n   + Slf4j: The simple logging facade for java.\n   + JCL: Jakarta Commons Logging.\n - 实现类\n   + log4j-1.2\n   + log4j-2.x\n   + logback\n   + jul: java.util.logging\n   + ...\n - 桥接包\n   + SLF4J LOG4J 12 Binding\n   + JUL To SLF4J Bridge\n   + JCL 1.1.1 Implemented Over SLF4J  ??\n   + SLF4J JDK14 Binding\n   + Apache Log4j Commons Logging Bridge\n   + ...\n   \nslf4j的官网给出了集成其他日志系统的架构图：\n \n ![slf4j](http://www.slf4j.org/images/concrete-bindings.png)\n  \n门面主要只负责定义接口，实现类才负责具体的编码工作。桥接包顾名思义就是桥接门面和实现类。比如SLF4J LOG4J 12 Binding这个桥接包可以使Slf4j和log4j1.2结合起来正常工作。一个已经成型的系统如果使用了这个模式，底层又想将log4j1.2换成log4j2.0实现，则只需要替换实现包为log4j2.x以及桥接包为 Log4j 2 SLF4J Binding。\n \n \n \n\n\n\n##  Slf4j 源码解读\n\n如此灵活的插拔方式，忍不住想要通过源码一探其究竟。\n通常情况下，都是这样使用slf4j的：\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n...\n\nLogger logger = LoggerFactory.getLogger(Demo.class);\n\n\n```\n\n这里看不到任何跟实现类有关联的代码，然而我们已经可以使用get到的logger打日志了。那么slf4j到底是怎么找到实现类的了？跟进去。\n\n```java\n\n/**\n     * Return a logger named according to the name parameter using the\n     * statically bound {@link ILoggerFactory} instance.\n     * \n     * @param name\n     *            The name of the logger.\n     * @return logger\n     */\n    public static Logger getLogger(String name) {\n        ILoggerFactory iLoggerFactory = getILoggerFactory();  //获取工场类\n        return iLoggerFactory.getLogger(name);  //通过工场类拿到logger.\n    }\n\n```\n\ngetILoggerFactory()这一步是绑定实现类的关键所在。\n\n```java\n\nstatic volatile int INITIALIZATION_STATE = UNINITIALIZED;  //初始状态是UNINITIALIZED\n\n...\n\n/**\n     * Return the {@link ILoggerFactory} instance in use.\n     * <p/>\n     * <p/>\n     * ILoggerFactory instance is bound with this class at compile time. //这里提到编译时绑定，还有一种是运行时绑定，后面会介绍二者的区别。\n     * \n     * @return the ILoggerFactory instance in use\n     */\n    public static ILoggerFactory getILoggerFactory() {\n        if (INITIALIZATION_STATE == UNINITIALIZED) {\n            synchronized (LoggerFactory.class) {  //多线程同步，保证只执行一次初始化\n                if (INITIALIZATION_STATE == UNINITIALIZED) {\n                    INITIALIZATION_STATE = ONGOING_INITIALIZATION;\n                    performInitialization();    //如果是未初始化状态，则执行初始化操作\n                }\n            }\n        }\n        switch (INITIALIZATION_STATE) {\n        case SUCCESSFUL_INITIALIZATION:\n            return StaticLoggerBinder.getSingleton().getLoggerFactory();\n        case NOP_FALLBACK_INITIALIZATION:\n            return NOP_FALLBACK_FACTORY;\n        case FAILED_INITIALIZATION:\n            throw new IllegalStateException(UNSUCCESSFUL_INIT_MSG);\n        case ONGOING_INITIALIZATION:\n            // support re-entrant behavior.\n            // See also http://jira.qos.ch/browse/SLF4J-97\n            return SUBST_FACTORY;\n        }\n        throw new IllegalStateException(\"Unreachable code\");\n    }\n\n```\n\n\n```java\n\n private final static void performInitialization() {\n        bind(); //实际的绑定操作\n        if (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) {\n            versionSanityCheck(); //做一下版本兼容性检测\n        }\n    }\n\n```\n\n```java\nprivate final static void bind() {\n        try {\n            Set<URL> staticLoggerBinderPathSet = null;\n            // skip check under android, see also\n            // http://jira.qos.ch/browse/SLF4J-328\n            if (!isAndroid()) {  //安卓项目有个bug,跳过对安卓的check.\n                staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet(); //找到所有可能的Binder\n                reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);//如果Binder的数量大于1，则将所有的Binder都打印出来\n            }\n            // the next line does the binding\n            StaticLoggerBinder.getSingleton();  //执行绑定\n            INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION; //修改初始化动作的状态\n            reportActualBinding(staticLoggerBinderPathSet);  //打印最终绑定的Binder,和前面打印的所有Binder结合可以更方便的debug.\n            fixSubstituteLoggers();\n            replayEvents();\n            // release all resources in SUBST_FACTORY\n            SUBST_FACTORY.clear();\n        } catch (NoClassDefFoundError ncde) {  //如果没有任何实现类。就会使用默认的no-operation logger\n            String msg = ncde.getMessage();\n            if (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) {\n                INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;\n                Util.report(\"Failed to load class \\\"org.slf4j.impl.StaticLoggerBinder\\\".\");\n                Util.report(\"Defaulting to no-operation (NOP) logger implementation\");\n                Util.report(\"See \" + NO_STATICLOGGERBINDER_URL + \" for further details.\");\n            } else {\n                failedBinding(ncde);\n                throw ncde;\n            }\n        } catch (java.lang.NoSuchMethodError nsme) {\n            String msg = nsme.getMessage();\n            if (msg != null && msg.contains(\"org.slf4j.impl.StaticLoggerBinder.getSingleton()\")) {\n                INITIALIZATION_STATE = FAILED_INITIALIZATION;\n                Util.report(\"slf4j-api 1.6.x (or later) is incompatible with this binding.\");\n                Util.report(\"Your binding is version 1.5.5 or earlier.\");\n                Util.report(\"Upgrade your binding to version 1.6.x.\");\n            }\n            throw nsme;\n        } catch (Exception e) {\n            failedBinding(e);\n            throw new IllegalStateException(\"Unexpected initialization failure\", e);\n        }\n    }\n\n\n\n```\n\nbind()方法中主要做的事情就是先找到所有可能的Binder的Set,再在这个Set中挑选一个，作为最终的Binder.首先来看是如何找到所有Binder的：\n\n```java\n   // We need to use the name of the StaticLoggerBinder class, but we can't\n   // reference\n   // the class itself.\n    \n   private static String STATIC_LOGGER_BINDER_PATH = \"org/slf4j/impl/StaticLoggerBinder.class\";\n\n   static Set<URL> findPossibleStaticLoggerBinderPathSet() {\n     // use Set instead of list in order to deal with bug #138\n     // LinkedHashSet appropriate here because it preserves insertion order\n     // during iteration\n     Set<URL> staticLoggerBinderPathSet = new LinkedHashSet<URL>(); //使用LinkedHashSet可以保存Binder被加载的顺序。\n        try {\n            ClassLoader loggerFactoryClassLoader = LoggerFactory.class.getClassLoader();\n            Enumeration<URL> paths;\n            if (loggerFactoryClassLoader == null) {\n                paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);\n            } else {\n                paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);\n            }\n            while (paths.hasMoreElements()) {\n                URL path = paths.nextElement();\n                staticLoggerBinderPathSet.add(path);\n            }\n        } catch (IOException ioe) {\n            Util.report(\"Error getting resources from path\", ioe);\n        }\n        return staticLoggerBinderPathSet;\n    }\n\n\n```\n\n原来是根据Path = \"org/slf4j/impl/StaticLoggerBinder.class\"去加载相应的实现类。\n\n翻看log4j和logback的jar包，都能找到相同全路径名的类：\n\n![log4j](http://7xsrzn.com1.z0.glb.clouddn.com/log4j1.2.png?imageView2/3/w/200/h/200)\n![logback](http://7xsrzn.com1.z0.glb.clouddn.com/logback.png?imageView2/3/w/150/h/150)\n\n还有jul的桥接包：\n\n![jul](http://7xsrzn.com1.z0.glb.clouddn.com/jul.png?imageView2/3/w/150/h/150)\n\n\n那么这里会有一个问题，如果找到多个实现类，最终会绑定哪一个了？\n\n来看slf4j这段良心备注：\n\n> The warning emitted by SLF4J is just that, a warning. Even when multiple bindings are present, SLF4J will pick one logging framework/implementation and bind with it. The way SLF4J picks a binding is determined by the JVM and for all practical purposes should be considered random. As of version 1.6.6, SLF4J will name the framework/implementation class it is actually bound to.\n\n> Embedded components such as libraries or frameworks should not declare a dependency on any SLF4J binding but only depend on slf4j-api. When a library declares a compile-time dependency on a SLF4J binding, it imposes that binding on the end-user, thus negating SLF4J's purpose. When you come across an embedded component declaring a compile-time dependency on any SLF4J binding, please take the time to contact the authors of said component/library and kindly ask them to mend their ways.\n\n\n\n大意就是说，如果发现有多个实现类，那么slf4j会打印出warning信息。但是仅仅是warning而已。即使有多个实现类，slf4j也只会挑选其中一个，这个选择取决于JVM和所有其他实际因素，基本算是随机性的。同时，slf4j建议删除多余的实现类，仅仅保留一个。\n\n这里还特别良心的提到,嵌入式的组件(比如libraries和框架等)不应该申明依赖任何slf4j的实现。因为这样相当于强加给了终端用户。如果你要使用的组件做了这样的编译时依赖申明，请花点时间联系作者，让他们优化实现方式。\n看到这里，我感觉自己被点名了。。。哈哈哈哈\n关于多重绑定的更多细节，[请戳这里](http://www.slf4j.org/codes.html#multiple_bindings)\n\n## 静态绑定 & 动态绑定\n\n静态绑定又称编译时绑定，动态绑定又称运行时绑定。\n关于其具体的概念和特性，相关的介绍文档已经有很多了，在这里我就直接引用了：\n - [What is Static and Dynamic binding in Java with Example](http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html)\n - [Static binding & Dynamic binding](https://en.wikipedia.org/wiki/Late_binding)\n - [java的动态绑定与静态绑定](http://blog.sina.com.cn/s/blog_600046120100wdza.html)\n\n从源码中可以看出slf4j获取实际实现类的方式属于静态绑定:\n\n```java\n/**\n     * Return the {@link ILoggerFactory} instance in use.\n     * <p/>\n     * <p/>\n     * ILoggerFactory instance is bound with this class at compile time.\n     * \n     * @return the ILoggerFactory instance in use\n     */\n    public static ILoggerFactory getILoggerFactory() {\n        ...\n    }\n\n```\n\n而在slf4j出现之前，已经有JCL这个日志门面系统了。JCL在绑定实现类的时候，使用的是动态绑定的方式。但是先驱者总是容易踩到坑，而无法迅速的优雅的填好这个坑，就会给后继者可乘之机。Slf4j能从JCL那边扳回一城，很大程度上归功于这个静态绑定的使用。\n\n>JCL作为第一个log接口框架，使用了基于反射的动态绑定的方法，原理很简单，预先定义好支持的log实现的工厂类的全路径到一个数组中，遍历这个数组，调用Class.forName依次尝试寻找各个log实现，如果当前class loader没找到，就去父class loader去找，直到找到任意一个实现为止。这个逻辑的代码在org.apache.commons.logging.impl.LogFactoryImpl#discoverLogImplemetation函数中，非常简短。\n\n>这种方法有致命的缺陷，这也正是SLF4J诞生的原因。Java EE的web容器，为了实现servlet规范中同一个容器中不同web app之间、web app和web容器之间的隔离，都使用的自己实现的class loader，逻辑和标准的class loader不同，导致一系列的无法正常发现log实现库的问题。Taxonomy of class loader problems encountered when using Jakarta Commons Logging这篇文章做了非常详尽的分析解释，文章的作者正是log4j和SLF4J的作者Ceki Gülcü，有兴趣的同学可以仔细阅读。\n\nSlf4j的官网上也打出了一波对于JCL的动态绑定的嘲讽攻击：[详情请戳这里](http://www.slf4j.org/faq.html#why_new_project)\n\n\n\n## 总结\n\n陆游是个好诗人。\n\n## Reference\n \n - [slf4j初始化绑定源码分析](http://skyao.github.io/2014/07/21/slfj4-binding/)\n - [https://mvnrepository.com/search?q=slf4j+log4j2](https://mvnrepository.com/search?q=slf4j+log4j2)\n - [Java 日志系列篇二 slf4](https://segmentfault.com/a/1190000004232412)\n - [java 日志系统](https://yq.aliyun.com/articles/57769?commentId=4342)\n - [What is Static and Dynamic binding in Java with Example](http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html)\n - [java的动态绑定与静态绑定 ](http://blog.sina.com.cn/s/blog_600046120100wdza.html)\n - [http://www.slf4j.org/manual.html](http://www.slf4j.org/manual.html)\n - [http://www.slf4j.org/faq.html#why_new_project](http://www.slf4j.org/faq.html#why_new_project)\n - [slf4j 绑定机制浅析](http://niko2014.github.io/2015/03/03/java/slf4j/)\n - [Late binding](https://en.wikipedia.org/wiki/Late_binding)\n\n","source":"_posts/:2016-10-11-Java-日志的江湖.md","raw":"\n---\ntitle: Java 日志的江湖\ndate: 2016-10-11 18:18:09\ncategories: Java\ntags: log\n\n---\n\n这个议题在网上已经有很多很多讨论的文章了，但是我还是决定自己“重造一遍轮子”。因为：\n \n ![诗句](http://7xsrzn.com1.z0.glb.clouddn.com/cishi.jpeg)\n \n <!-- more -->\n\n\n\n## 起因\n\n最近在协助重构公司内部的一个RPC框架，这个系统中要记录日志。因为以前开发的所有项目几乎都是具体的应用，也就是不会被其他项目引用；或者一些纯接口性质的、不需要记录日志的二方库。所以没什么经验，在这个中间件项目中也直接依赖了logback。然而对于中间件项目来说，这是不被允许的，因为你不知道你的jar最终会被其他用户引入到怎样的系统中，而用户系统中的日志系统与中间件中的日志系统又有怎样的关系。所以我决定趁这次机会，把java世界里的日志系统捋一捋。\n\n## Java 日志框架的发展史\n\n先来看看Java世界里日志框架的发展史。\n本段内容主要引自于[此文](http://www.cnblogs.com/chenhongliang/p/5312517.html)\n\n> - 1996年早期，欧洲安全电子市场项目组决定编写它自己的程序跟踪API(Tracing API)。经过不断的完善，这个API终于成为一个十分受欢迎的Java日志软件包，即Log4j。后来Log4j成为Apache基金会项目中的一员。\n> - 期间Log4j近乎成了Java社区的日志标准。据说Apache基金会还曾经建议sun引入Log4j到java的标准库中，但Sun拒绝了。\n> - 2002年Java1.4发布，Sun推出了自己的日志库JUL(Java Util Logging),其实现基本模仿了Log4j的实现。在JUL出来以前，log4j就已经成为一项成熟的技术，使得log4j在选择上占据了一定的优势。\n> - 接着，Apache推出了Jakarta Commons Logging，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用Commons Logging的接口，底层实现可以是log4j，也可以是Java Util Logging。\n> - 后来(2006年)，Ceki Gülcü(log4j的作者)不适应Apache的工作方式，离开了Apache。然后先后创建了slf4j(日志门面接口，类似于Commons Logging)和Logback(Slf4j的实现)两个项目，并回瑞典创建了QOS公司，QOS官网上是这样描述Logback的：The Generic，Reliable Fast&Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。\n> - 现今，Java日志领域被划分为两大阵营：Commons Logging阵营和SLF4J阵营。\nCommons Logging在Apache大树的笼罩下，有很大的用户基数。但有证据表明，形式正在发生变化。2013年底有人分析了GitHub上30000个项目，统计出了最流行的100个Libraries，可以看出slf4j的发展趋势更好：\n\n![图片](http://7xs54s.com1.z0.glb.clouddn.com/java_populor_jar.png?_=5312517)\n> - Apache眼看有被Logback反超的势头，于2012-07重写了log4j 1.x，成立了新的项目Log4j 2。Log4j 2具有logback的所有特性。\n\n\n\n\n\n## 门面，实现类，桥接包\n\n经历了上述的发展，现在使用日志框架时往往会涉及三个层面的东西。\n\n - 门面\n   + Slf4j: The simple logging facade for java.\n   + JCL: Jakarta Commons Logging.\n - 实现类\n   + log4j-1.2\n   + log4j-2.x\n   + logback\n   + jul: java.util.logging\n   + ...\n - 桥接包\n   + SLF4J LOG4J 12 Binding\n   + JUL To SLF4J Bridge\n   + JCL 1.1.1 Implemented Over SLF4J  ??\n   + SLF4J JDK14 Binding\n   + Apache Log4j Commons Logging Bridge\n   + ...\n   \nslf4j的官网给出了集成其他日志系统的架构图：\n \n ![slf4j](http://www.slf4j.org/images/concrete-bindings.png)\n  \n门面主要只负责定义接口，实现类才负责具体的编码工作。桥接包顾名思义就是桥接门面和实现类。比如SLF4J LOG4J 12 Binding这个桥接包可以使Slf4j和log4j1.2结合起来正常工作。一个已经成型的系统如果使用了这个模式，底层又想将log4j1.2换成log4j2.0实现，则只需要替换实现包为log4j2.x以及桥接包为 Log4j 2 SLF4J Binding。\n \n \n \n\n\n\n##  Slf4j 源码解读\n\n如此灵活的插拔方式，忍不住想要通过源码一探其究竟。\n通常情况下，都是这样使用slf4j的：\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n...\n\nLogger logger = LoggerFactory.getLogger(Demo.class);\n\n\n```\n\n这里看不到任何跟实现类有关联的代码，然而我们已经可以使用get到的logger打日志了。那么slf4j到底是怎么找到实现类的了？跟进去。\n\n```java\n\n/**\n     * Return a logger named according to the name parameter using the\n     * statically bound {@link ILoggerFactory} instance.\n     * \n     * @param name\n     *            The name of the logger.\n     * @return logger\n     */\n    public static Logger getLogger(String name) {\n        ILoggerFactory iLoggerFactory = getILoggerFactory();  //获取工场类\n        return iLoggerFactory.getLogger(name);  //通过工场类拿到logger.\n    }\n\n```\n\ngetILoggerFactory()这一步是绑定实现类的关键所在。\n\n```java\n\nstatic volatile int INITIALIZATION_STATE = UNINITIALIZED;  //初始状态是UNINITIALIZED\n\n...\n\n/**\n     * Return the {@link ILoggerFactory} instance in use.\n     * <p/>\n     * <p/>\n     * ILoggerFactory instance is bound with this class at compile time. //这里提到编译时绑定，还有一种是运行时绑定，后面会介绍二者的区别。\n     * \n     * @return the ILoggerFactory instance in use\n     */\n    public static ILoggerFactory getILoggerFactory() {\n        if (INITIALIZATION_STATE == UNINITIALIZED) {\n            synchronized (LoggerFactory.class) {  //多线程同步，保证只执行一次初始化\n                if (INITIALIZATION_STATE == UNINITIALIZED) {\n                    INITIALIZATION_STATE = ONGOING_INITIALIZATION;\n                    performInitialization();    //如果是未初始化状态，则执行初始化操作\n                }\n            }\n        }\n        switch (INITIALIZATION_STATE) {\n        case SUCCESSFUL_INITIALIZATION:\n            return StaticLoggerBinder.getSingleton().getLoggerFactory();\n        case NOP_FALLBACK_INITIALIZATION:\n            return NOP_FALLBACK_FACTORY;\n        case FAILED_INITIALIZATION:\n            throw new IllegalStateException(UNSUCCESSFUL_INIT_MSG);\n        case ONGOING_INITIALIZATION:\n            // support re-entrant behavior.\n            // See also http://jira.qos.ch/browse/SLF4J-97\n            return SUBST_FACTORY;\n        }\n        throw new IllegalStateException(\"Unreachable code\");\n    }\n\n```\n\n\n```java\n\n private final static void performInitialization() {\n        bind(); //实际的绑定操作\n        if (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) {\n            versionSanityCheck(); //做一下版本兼容性检测\n        }\n    }\n\n```\n\n```java\nprivate final static void bind() {\n        try {\n            Set<URL> staticLoggerBinderPathSet = null;\n            // skip check under android, see also\n            // http://jira.qos.ch/browse/SLF4J-328\n            if (!isAndroid()) {  //安卓项目有个bug,跳过对安卓的check.\n                staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet(); //找到所有可能的Binder\n                reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);//如果Binder的数量大于1，则将所有的Binder都打印出来\n            }\n            // the next line does the binding\n            StaticLoggerBinder.getSingleton();  //执行绑定\n            INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION; //修改初始化动作的状态\n            reportActualBinding(staticLoggerBinderPathSet);  //打印最终绑定的Binder,和前面打印的所有Binder结合可以更方便的debug.\n            fixSubstituteLoggers();\n            replayEvents();\n            // release all resources in SUBST_FACTORY\n            SUBST_FACTORY.clear();\n        } catch (NoClassDefFoundError ncde) {  //如果没有任何实现类。就会使用默认的no-operation logger\n            String msg = ncde.getMessage();\n            if (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) {\n                INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;\n                Util.report(\"Failed to load class \\\"org.slf4j.impl.StaticLoggerBinder\\\".\");\n                Util.report(\"Defaulting to no-operation (NOP) logger implementation\");\n                Util.report(\"See \" + NO_STATICLOGGERBINDER_URL + \" for further details.\");\n            } else {\n                failedBinding(ncde);\n                throw ncde;\n            }\n        } catch (java.lang.NoSuchMethodError nsme) {\n            String msg = nsme.getMessage();\n            if (msg != null && msg.contains(\"org.slf4j.impl.StaticLoggerBinder.getSingleton()\")) {\n                INITIALIZATION_STATE = FAILED_INITIALIZATION;\n                Util.report(\"slf4j-api 1.6.x (or later) is incompatible with this binding.\");\n                Util.report(\"Your binding is version 1.5.5 or earlier.\");\n                Util.report(\"Upgrade your binding to version 1.6.x.\");\n            }\n            throw nsme;\n        } catch (Exception e) {\n            failedBinding(e);\n            throw new IllegalStateException(\"Unexpected initialization failure\", e);\n        }\n    }\n\n\n\n```\n\nbind()方法中主要做的事情就是先找到所有可能的Binder的Set,再在这个Set中挑选一个，作为最终的Binder.首先来看是如何找到所有Binder的：\n\n```java\n   // We need to use the name of the StaticLoggerBinder class, but we can't\n   // reference\n   // the class itself.\n    \n   private static String STATIC_LOGGER_BINDER_PATH = \"org/slf4j/impl/StaticLoggerBinder.class\";\n\n   static Set<URL> findPossibleStaticLoggerBinderPathSet() {\n     // use Set instead of list in order to deal with bug #138\n     // LinkedHashSet appropriate here because it preserves insertion order\n     // during iteration\n     Set<URL> staticLoggerBinderPathSet = new LinkedHashSet<URL>(); //使用LinkedHashSet可以保存Binder被加载的顺序。\n        try {\n            ClassLoader loggerFactoryClassLoader = LoggerFactory.class.getClassLoader();\n            Enumeration<URL> paths;\n            if (loggerFactoryClassLoader == null) {\n                paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);\n            } else {\n                paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);\n            }\n            while (paths.hasMoreElements()) {\n                URL path = paths.nextElement();\n                staticLoggerBinderPathSet.add(path);\n            }\n        } catch (IOException ioe) {\n            Util.report(\"Error getting resources from path\", ioe);\n        }\n        return staticLoggerBinderPathSet;\n    }\n\n\n```\n\n原来是根据Path = \"org/slf4j/impl/StaticLoggerBinder.class\"去加载相应的实现类。\n\n翻看log4j和logback的jar包，都能找到相同全路径名的类：\n\n![log4j](http://7xsrzn.com1.z0.glb.clouddn.com/log4j1.2.png?imageView2/3/w/200/h/200)\n![logback](http://7xsrzn.com1.z0.glb.clouddn.com/logback.png?imageView2/3/w/150/h/150)\n\n还有jul的桥接包：\n\n![jul](http://7xsrzn.com1.z0.glb.clouddn.com/jul.png?imageView2/3/w/150/h/150)\n\n\n那么这里会有一个问题，如果找到多个实现类，最终会绑定哪一个了？\n\n来看slf4j这段良心备注：\n\n> The warning emitted by SLF4J is just that, a warning. Even when multiple bindings are present, SLF4J will pick one logging framework/implementation and bind with it. The way SLF4J picks a binding is determined by the JVM and for all practical purposes should be considered random. As of version 1.6.6, SLF4J will name the framework/implementation class it is actually bound to.\n\n> Embedded components such as libraries or frameworks should not declare a dependency on any SLF4J binding but only depend on slf4j-api. When a library declares a compile-time dependency on a SLF4J binding, it imposes that binding on the end-user, thus negating SLF4J's purpose. When you come across an embedded component declaring a compile-time dependency on any SLF4J binding, please take the time to contact the authors of said component/library and kindly ask them to mend their ways.\n\n\n\n大意就是说，如果发现有多个实现类，那么slf4j会打印出warning信息。但是仅仅是warning而已。即使有多个实现类，slf4j也只会挑选其中一个，这个选择取决于JVM和所有其他实际因素，基本算是随机性的。同时，slf4j建议删除多余的实现类，仅仅保留一个。\n\n这里还特别良心的提到,嵌入式的组件(比如libraries和框架等)不应该申明依赖任何slf4j的实现。因为这样相当于强加给了终端用户。如果你要使用的组件做了这样的编译时依赖申明，请花点时间联系作者，让他们优化实现方式。\n看到这里，我感觉自己被点名了。。。哈哈哈哈\n关于多重绑定的更多细节，[请戳这里](http://www.slf4j.org/codes.html#multiple_bindings)\n\n## 静态绑定 & 动态绑定\n\n静态绑定又称编译时绑定，动态绑定又称运行时绑定。\n关于其具体的概念和特性，相关的介绍文档已经有很多了，在这里我就直接引用了：\n - [What is Static and Dynamic binding in Java with Example](http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html)\n - [Static binding & Dynamic binding](https://en.wikipedia.org/wiki/Late_binding)\n - [java的动态绑定与静态绑定](http://blog.sina.com.cn/s/blog_600046120100wdza.html)\n\n从源码中可以看出slf4j获取实际实现类的方式属于静态绑定:\n\n```java\n/**\n     * Return the {@link ILoggerFactory} instance in use.\n     * <p/>\n     * <p/>\n     * ILoggerFactory instance is bound with this class at compile time.\n     * \n     * @return the ILoggerFactory instance in use\n     */\n    public static ILoggerFactory getILoggerFactory() {\n        ...\n    }\n\n```\n\n而在slf4j出现之前，已经有JCL这个日志门面系统了。JCL在绑定实现类的时候，使用的是动态绑定的方式。但是先驱者总是容易踩到坑，而无法迅速的优雅的填好这个坑，就会给后继者可乘之机。Slf4j能从JCL那边扳回一城，很大程度上归功于这个静态绑定的使用。\n\n>JCL作为第一个log接口框架，使用了基于反射的动态绑定的方法，原理很简单，预先定义好支持的log实现的工厂类的全路径到一个数组中，遍历这个数组，调用Class.forName依次尝试寻找各个log实现，如果当前class loader没找到，就去父class loader去找，直到找到任意一个实现为止。这个逻辑的代码在org.apache.commons.logging.impl.LogFactoryImpl#discoverLogImplemetation函数中，非常简短。\n\n>这种方法有致命的缺陷，这也正是SLF4J诞生的原因。Java EE的web容器，为了实现servlet规范中同一个容器中不同web app之间、web app和web容器之间的隔离，都使用的自己实现的class loader，逻辑和标准的class loader不同，导致一系列的无法正常发现log实现库的问题。Taxonomy of class loader problems encountered when using Jakarta Commons Logging这篇文章做了非常详尽的分析解释，文章的作者正是log4j和SLF4J的作者Ceki Gülcü，有兴趣的同学可以仔细阅读。\n\nSlf4j的官网上也打出了一波对于JCL的动态绑定的嘲讽攻击：[详情请戳这里](http://www.slf4j.org/faq.html#why_new_project)\n\n\n\n## 总结\n\n陆游是个好诗人。\n\n## Reference\n \n - [slf4j初始化绑定源码分析](http://skyao.github.io/2014/07/21/slfj4-binding/)\n - [https://mvnrepository.com/search?q=slf4j+log4j2](https://mvnrepository.com/search?q=slf4j+log4j2)\n - [Java 日志系列篇二 slf4](https://segmentfault.com/a/1190000004232412)\n - [java 日志系统](https://yq.aliyun.com/articles/57769?commentId=4342)\n - [What is Static and Dynamic binding in Java with Example](http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html)\n - [java的动态绑定与静态绑定 ](http://blog.sina.com.cn/s/blog_600046120100wdza.html)\n - [http://www.slf4j.org/manual.html](http://www.slf4j.org/manual.html)\n - [http://www.slf4j.org/faq.html#why_new_project](http://www.slf4j.org/faq.html#why_new_project)\n - [slf4j 绑定机制浅析](http://niko2014.github.io/2015/03/03/java/slf4j/)\n - [Late binding](https://en.wikipedia.org/wiki/Late_binding)\n\n","slug":"Java-日志的江湖","published":1,"updated":"2016-10-12T01:56:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabql000fdbtjckgqtj3u","sticky":0},{"title":"Docker & Kubernetes Intro","date":"2016-08-25T10:16:18.000Z","_content":"\n\n## What is Docker\n\n> Docker is the world's leading software containerization platform\n\n\n## Container VS VMs\n\n> Containers and virtual machines have similar resource isolation and allocation benefits -- but a different architectural approach allows containers to be more portable and efficient.\n\n![docker](http://cdn4.infoqstatic.com/statics_s2_20160823-0357/resource/articles/docker-core-technology-preview/zh/resources/0731013.jpg)\n\n<!-- more -->\n\n## Orchestration Tools\n\n\n### Why Need Orchestration\n\nOrchestration : 本意是是指管弦乐中的配器法。\n\n![管弦乐](http://img1.imgtn.bdimg.com/it/u=1680618254,696436313&fm=21&gp=0.jpg)\n\n一场大型的交响乐的表演，需要众多乐手，比如小提琴手，鼓手，小号等等，但是更重要的是需要有一名出色的指挥。\n\n一个大型的互联网应用，需要各式各样的服务器，比如缓存服务器，应用服务器，数据库服务器，负载均衡服务器等等，协同工作。当这里的‘服务器’精简成一个个的container, 为了更高效，更优雅的协同工作，同样需要有一名出色的指挥。Orchestration Tool就是这个Container乐团的指挥。\n\n![网站架构图](http://7xsrzn.com1.z0.glb.clouddn.com/jiagou.png?imageView2/3/w/500/h/500)\n\n\n### Why Kubernetes\n\nThree Popular Orchestration \n\n - [Docker Swarm](https://docs.docker.com/swarm/)\n - [Apache Mesos](http://mesos.apache.org/documentation/latest/)\n - [Google Kubernetes](http://kubernetes.io/)\n \n \n|   候选     | 优点   |  缺点  |\n|  :----:  |  :----: | :----:  |\n| Swarm     | Docker Native Support. |   设计比较简单，作为编排工具还不够产品级，还需要一段时间的发展   |\n| Mesos        | 已经成熟，文档齐全  |   无明显缺点,如果非要挑一个，那就是设计理念不如k8s优秀，社区支撑不如k8s强大。|\n| Kubernetes   | 基于borg（被验证的大规模集群管理技术，google出品）,社区强大，设计理念优秀，与容器技术结合紧密，为业界所看好，被认为是未来的容器编排技术的主流。 |  学习曲线比较陡峭，文档质量偏低  |\n\n\n结合米喜的实际情况，我们选择了Kubernetes作为编排工具。详细的技术选型过程参加：[内网资料：部署环境改造技术选型](http://192.168.0.214:8090/pages/viewpage.action?pageId=1507386)\n\n\n另外，说Kubernetes文档质量低不是随便讲讲的：\n\n![论k8s文档写的有多烂](http://7xsrzn.com1.z0.glb.clouddn.com/fuck8s.jpg-large)\n \n### Kubernetes Concept Guide\n\n - **Cluster** : A cluster is a set of physical or virtual machines and other infrastructure resources used by Kubernetes to run your applications.\n - **Node** : A node is a physical or virtual machine running Kubernetes, onto which pods can be scheduled.\n \n - **Kubectl** : command-line interface to interact with Kubernetes.\n - **Pod** : the smallest deployable units of computing that can be created and managed in Kubernetes.A group of one or more containers is called a pod.\n - **Volume** : just a directory, possibly with some data in it, which is accessible to the containers in a pod.\n - **Labels** :  key-value pairs.\n - **Deployments** : A Deployment object defines a Pod creation template  and desired replica count.\n - **Service** : A service defines a set of pods and a means by which to access them, such as single stable IP address and corresponding DNS name.\n - [More](http://kubernetes.io/docs/user-guide/#concept-guide)\n \n\n## TODO For Medishare\n\n\n- 基于k8s的部署\n\n![基于k8s米喜架构](http://7xsrzn.com1.z0.glb.clouddn.com/k8sformedishare.png?imageView2/3/w/600/h/600)\n\n\n\n\n- CI & CD\n\n![趋势科技持续部署方案](http://cdn4.infoqstatic.com/statics_s2_20160823-0357/resource/news/2016/08/sunqing-docker-kubernetes-CICD/zh/resources/1.png)\n\n\n\n\n## Related Concepts\n\n- [DevOps](https://zh.wikipedia.org/wiki/DevOps)\n- [MicroService](http://martinfowler.com/articles/microservices.html)\n- [Continuous Deployment](http://www.infoq.com/cn/articles/continuous-deployment-containers)\n\n\n\n## Reference\n\n- [深入浅出Docker（一）：Docker核心技术预览\n](http://www.infoq.com/cn/articles/docker-core-technology-preview)\n- [Docker编排](http://dockone.io/article/861)\n- [FROM CONTAINERS TO CONTAINER ORCHESTRATION](http://thenewstack.io/containers-container-orchestration/)\n- [k8s实施阶段性回顾](http://codingwater.org/2016/08/09/%E4%BD%BF%E7%94%A8Kubernetes%E6%94%B9%E9%80%A0%E7%B1%B3%E5%96%9C%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83-%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/)\n- [Kubernetes Volume](http://kubernetes.io/docs/user-guide/volumes/)\n- [趋势科技基于Docker和Kubernetes的持续部署实践](http://www.infoq.com/cn/news/2016/08/sunqing-docker-kubernetes-CICD)\n- [《Kubernetes与云原生应用》系列之Kubernetes的系统架构与设计理念](http://www.infoq.com/cn/articles/kubernetes-and-cloud-native-applications-part01)\n- [基于kubernetes构建Docker集群管理详解](http://blog.liuts.com/post/247/)\n\n## SlideShare\n\n[https://drive.google.com/file/d/0Bx57XsAahdV4NWdDRHdvcC1SdTQ/view](https://drive.google.com/file/d/0Bx57XsAahdV4NWdDRHdvcC1SdTQ/view)\n\n\n","source":"_posts/:2016-08-25-Docker-Kubernetes-Intro.md","raw":"---\ntitle: 'Docker & Kubernetes Intro'\ndate: 2016-08-25 18:16:18\ncategories: Devops\ntags: Kubernetes\n\n---\n\n\n## What is Docker\n\n> Docker is the world's leading software containerization platform\n\n\n## Container VS VMs\n\n> Containers and virtual machines have similar resource isolation and allocation benefits -- but a different architectural approach allows containers to be more portable and efficient.\n\n![docker](http://cdn4.infoqstatic.com/statics_s2_20160823-0357/resource/articles/docker-core-technology-preview/zh/resources/0731013.jpg)\n\n<!-- more -->\n\n## Orchestration Tools\n\n\n### Why Need Orchestration\n\nOrchestration : 本意是是指管弦乐中的配器法。\n\n![管弦乐](http://img1.imgtn.bdimg.com/it/u=1680618254,696436313&fm=21&gp=0.jpg)\n\n一场大型的交响乐的表演，需要众多乐手，比如小提琴手，鼓手，小号等等，但是更重要的是需要有一名出色的指挥。\n\n一个大型的互联网应用，需要各式各样的服务器，比如缓存服务器，应用服务器，数据库服务器，负载均衡服务器等等，协同工作。当这里的‘服务器’精简成一个个的container, 为了更高效，更优雅的协同工作，同样需要有一名出色的指挥。Orchestration Tool就是这个Container乐团的指挥。\n\n![网站架构图](http://7xsrzn.com1.z0.glb.clouddn.com/jiagou.png?imageView2/3/w/500/h/500)\n\n\n### Why Kubernetes\n\nThree Popular Orchestration \n\n - [Docker Swarm](https://docs.docker.com/swarm/)\n - [Apache Mesos](http://mesos.apache.org/documentation/latest/)\n - [Google Kubernetes](http://kubernetes.io/)\n \n \n|   候选     | 优点   |  缺点  |\n|  :----:  |  :----: | :----:  |\n| Swarm     | Docker Native Support. |   设计比较简单，作为编排工具还不够产品级，还需要一段时间的发展   |\n| Mesos        | 已经成熟，文档齐全  |   无明显缺点,如果非要挑一个，那就是设计理念不如k8s优秀，社区支撑不如k8s强大。|\n| Kubernetes   | 基于borg（被验证的大规模集群管理技术，google出品）,社区强大，设计理念优秀，与容器技术结合紧密，为业界所看好，被认为是未来的容器编排技术的主流。 |  学习曲线比较陡峭，文档质量偏低  |\n\n\n结合米喜的实际情况，我们选择了Kubernetes作为编排工具。详细的技术选型过程参加：[内网资料：部署环境改造技术选型](http://192.168.0.214:8090/pages/viewpage.action?pageId=1507386)\n\n\n另外，说Kubernetes文档质量低不是随便讲讲的：\n\n![论k8s文档写的有多烂](http://7xsrzn.com1.z0.glb.clouddn.com/fuck8s.jpg-large)\n \n### Kubernetes Concept Guide\n\n - **Cluster** : A cluster is a set of physical or virtual machines and other infrastructure resources used by Kubernetes to run your applications.\n - **Node** : A node is a physical or virtual machine running Kubernetes, onto which pods can be scheduled.\n \n - **Kubectl** : command-line interface to interact with Kubernetes.\n - **Pod** : the smallest deployable units of computing that can be created and managed in Kubernetes.A group of one or more containers is called a pod.\n - **Volume** : just a directory, possibly with some data in it, which is accessible to the containers in a pod.\n - **Labels** :  key-value pairs.\n - **Deployments** : A Deployment object defines a Pod creation template  and desired replica count.\n - **Service** : A service defines a set of pods and a means by which to access them, such as single stable IP address and corresponding DNS name.\n - [More](http://kubernetes.io/docs/user-guide/#concept-guide)\n \n\n## TODO For Medishare\n\n\n- 基于k8s的部署\n\n![基于k8s米喜架构](http://7xsrzn.com1.z0.glb.clouddn.com/k8sformedishare.png?imageView2/3/w/600/h/600)\n\n\n\n\n- CI & CD\n\n![趋势科技持续部署方案](http://cdn4.infoqstatic.com/statics_s2_20160823-0357/resource/news/2016/08/sunqing-docker-kubernetes-CICD/zh/resources/1.png)\n\n\n\n\n## Related Concepts\n\n- [DevOps](https://zh.wikipedia.org/wiki/DevOps)\n- [MicroService](http://martinfowler.com/articles/microservices.html)\n- [Continuous Deployment](http://www.infoq.com/cn/articles/continuous-deployment-containers)\n\n\n\n## Reference\n\n- [深入浅出Docker（一）：Docker核心技术预览\n](http://www.infoq.com/cn/articles/docker-core-technology-preview)\n- [Docker编排](http://dockone.io/article/861)\n- [FROM CONTAINERS TO CONTAINER ORCHESTRATION](http://thenewstack.io/containers-container-orchestration/)\n- [k8s实施阶段性回顾](http://codingwater.org/2016/08/09/%E4%BD%BF%E7%94%A8Kubernetes%E6%94%B9%E9%80%A0%E7%B1%B3%E5%96%9C%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83-%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/)\n- [Kubernetes Volume](http://kubernetes.io/docs/user-guide/volumes/)\n- [趋势科技基于Docker和Kubernetes的持续部署实践](http://www.infoq.com/cn/news/2016/08/sunqing-docker-kubernetes-CICD)\n- [《Kubernetes与云原生应用》系列之Kubernetes的系统架构与设计理念](http://www.infoq.com/cn/articles/kubernetes-and-cloud-native-applications-part01)\n- [基于kubernetes构建Docker集群管理详解](http://blog.liuts.com/post/247/)\n\n## SlideShare\n\n[https://drive.google.com/file/d/0Bx57XsAahdV4NWdDRHdvcC1SdTQ/view](https://drive.google.com/file/d/0Bx57XsAahdV4NWdDRHdvcC1SdTQ/view)\n\n\n","slug":"Docker-Kubernetes-Intro","published":1,"updated":"2016-09-27T01:09:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqp000kdbtjg2s0g1i0","sticky":0},{"title":"Kubernetes集群性能监控--Heapster","date":"2016-08-18T12:28:46.000Z","_content":"\n最近也是历经艰辛，搭建起了Kubernetes集群的性能监控工具Heapster,用起来感觉实在高大上。而且慢慢的，熬过了最开始最痛苦的开发转运维的过渡期之后，越来越能get到当运维的快感了。\n\n![Heapster in Kubernetes](http://image.slidesharecdn.com/artemzhurbila-dockerclusterssolit2015-150313153240-conversion-gate01/95/artem-zhurbila-docker-clusters-solit-2015-31-638.jpg?cb=1426261060)\n\n<!-- more -->\n\n\n## Why Heapster\n\n虽然前期上手K8s很痛苦，但是在体验了几次成功的集群搭建之后，深感这东西确实厉害。厉害之处主要体现在设计理念的优秀和API封装的优雅。简单几行命令即可指挥一大波机器去建起可用性很高的应用集群。然而API封装的越好，作为集群管理人员对内部细节知道的也就越少，集群健康情况和资源使用率等等对于集群管理者也是一个黑盒子。所以有效的利用监控工具可以帮助管理者使得集群达到一个性能更好的状态。\n\n好吧以上是我个人的观点，下面还是看看官方文档的说辞。\n\n> Understanding how an application behaves when deployed is crucial to scaling the application and providing a reliable service. In a Kubernetes cluster, application performance can be examined at many different levels: containers, pods, services, and whole clusters. As part of Kubernetes we want to provide users with detailed resource usage information about their running applications at all these levels. This will give users deep insights into how their applications are performing and where possible application bottlenecks may be found. In comes Heapster, a project meant to provide a base monitoring platform on Kubernetes.\n\n## 踩坑路径\n\n官网给的部署教程可谓十分简单，一行命令就完事了。然而就我的部署经历来看，我觉得大多数同学可能都不会那么一帆风顺的靠一行命令就能收工。以下便是我这次踩过的坑。\n\n### imagePullPolicy\n\n官网给的那几个yaml文件中，指定了需要使用到的镜像文件。按照以前的经验，从gcr拉镜像几乎是拉不动的，所以提前通过时速云那边把镜像拉到了本地仓库中，并完成了tag操作。然而在创建pod和service的时候依然报错PullImageError.仔细看了一下yaml文件，发现有一行imagePullPolicy: Always.这个值代表了每次创建都会去远程仓库拉取最新的镜像，并不care本地是否已经有需要的镜像。\n\n解决这个问题，只需要把imagePullPolicy的值指定为IfNotPresent即可。\n\n### SkyDNS\n\n镜像问题解决后，接下来是DNS的问题。\nHeapster由两个pod组成，其中heapster和grafana-influxDB之间的通信需要依赖DNS的自动发现,而不是直接通过ClusterIP。但是我之前并没有在本地的K8s集群上配置SkyDNS,所以又被这个问题卡住转去配置SkyDNS.\n\n关于Kubernetes DNS配置的问题可以参考[DNS in Kubernetes](https://github.com/kubernetes/kubernetes/tree/v1.0.1/cluster/addons/dns)和[Kubernetes部署DNS-centos7](http://www.pangxie.space/docker/735)这两篇文章。\n\n![SkyDNS](http://image.slidesharecdn.com/servicediscoveryopensourcemeetupapril162016-160417092151/95/service-discovery-using-etcd-consul-and-kubernetes-22-638.jpg?cb=1460885346)\n\n### 版本遗留bug\n\nDNS启动成功后，pod的Status依然处于Error状态，查看日志，看到了'The config file /etc/kubernetes/kubeconfig/kubeconfig does not exist'这行错误信息。首先该文件确实不存在，但是为什么需要这个文件了，我也不知道。然后就google看了几乎所有能找到的相关的讨论，因为并不多。尝试了好几个可能的解决办法之后，就快要决定放弃。。。然后在这篇[讨论](https://github.com/kubernetes/heapster/issues/320)的最下面看到一个Kubernetes Member的回答，说这个版本的Heapster已经弃用了，请使用1.0.2版本。。。\n\n怀着一丝希望做了尝试，把yaml中指定的heapster镜像的版本从canary换到了最新的稳定版v1.1.0.然后重新创建pod和service，Status 变成了Running!\n\n### Configuring sources\n\nStatus变成Running并不代表应用可以正常访问了，习惯性的看一下log会发现'var/run/secrets/kubernetes.io/serviceaccount/token: No such file or directory'的异常。\n\n这个异常指向的问题大意是说Heapster与K8s Master的连接有两种方式，一种是https的，一种是http的。通过https的方式连接需要使用一些证书，如果找不到这些证书的话就会抛出上述异常。通过http的方式就相对简单一点，当然也不够安全。https的搭建方式可以参考[这篇文章](http://blog.dingmingk.com/blog/kube_monitor.html).\n\n想直接使用http方式来解决问题的则通过[官方文档](https://github.com/kubernetes/heapster/blob/master/docs/source-configuration.md)找到答案。\n\n### Env variables bug\n\n一切就绪后，用NodePort的方式暴露grafana的service ip。然后使用浏览器访问时发现无法正常加载css和png文件。所以整个页面就是下面这个丑样子。\n\n![api error](http://7xsrzn.com1.z0.glb.clouddn.com/enverror.jpg)\n\n经排查是influxdb-grafana-controller.yaml中定义了一个叫做GF_SERVER_ROOT_URL的环境变量。根据官网的解释，直接删掉就好了。\n\n![gf](http://7xsrzn.com1.z0.glb.clouddn.com/gf.png)\n\n\n### Grafana Tutorial\n\n踩完上面的坑就看到了这个让我兴奋到窒息的页面了。。。\n\n![grafana](http://7xsrzn.com1.z0.glb.clouddn.com/grafana.png)\n\ngrafana的使用教程可以参考这个[视频](https://www.youtube.com/watch?v=sKNZMtoSHN4&index=7&list=PLDGkOdUX1Ujo3wHw9-z5Vo12YLqXRjzg2)。\n\n\n## 总结\n\n这里记下的只是我解决问题的过程。其实很多东西的原理，问题更深层次的原因，我在写的过程中会问自己是不是真的弄懂了，是不是真的深有体会了。答案显然是没有。。。\n\n原因可能有这么几个，第一我不是专业的运维，很多东西理解起来可能需要比较多的基础运维知识做辅助。第二则是要消化的东西太多，我可能会把时间精力集中在自己最感兴趣的那一两个焦点上，其他的只要开始正常Running,也就不想再深入更多。\n\n其实内心觉得这样的状态并不是好的，如果要达成自己心里的野心和期望，或许该更专注，更深入。\n\n不过好在能坚持写博客，多多少少也会逼着自己把一些事弄的更清楚一些。一个月60多块的租赁费肯定有很多办法可以省下来，但是用这60多块钱督促自己坚持写两到三篇技术博客，我觉得还是挺值得的。\n\n\n\n\n","source":"_posts/:2016-08-18-Kubernetes集群性能监控-Heapster.md","raw":"---\ntitle: Kubernetes集群性能监控--Heapster\ndate: 2016-08-18 20:28:46\ntags: Heapster\ncategories: DevOps\n\n---\n\n最近也是历经艰辛，搭建起了Kubernetes集群的性能监控工具Heapster,用起来感觉实在高大上。而且慢慢的，熬过了最开始最痛苦的开发转运维的过渡期之后，越来越能get到当运维的快感了。\n\n![Heapster in Kubernetes](http://image.slidesharecdn.com/artemzhurbila-dockerclusterssolit2015-150313153240-conversion-gate01/95/artem-zhurbila-docker-clusters-solit-2015-31-638.jpg?cb=1426261060)\n\n<!-- more -->\n\n\n## Why Heapster\n\n虽然前期上手K8s很痛苦，但是在体验了几次成功的集群搭建之后，深感这东西确实厉害。厉害之处主要体现在设计理念的优秀和API封装的优雅。简单几行命令即可指挥一大波机器去建起可用性很高的应用集群。然而API封装的越好，作为集群管理人员对内部细节知道的也就越少，集群健康情况和资源使用率等等对于集群管理者也是一个黑盒子。所以有效的利用监控工具可以帮助管理者使得集群达到一个性能更好的状态。\n\n好吧以上是我个人的观点，下面还是看看官方文档的说辞。\n\n> Understanding how an application behaves when deployed is crucial to scaling the application and providing a reliable service. In a Kubernetes cluster, application performance can be examined at many different levels: containers, pods, services, and whole clusters. As part of Kubernetes we want to provide users with detailed resource usage information about their running applications at all these levels. This will give users deep insights into how their applications are performing and where possible application bottlenecks may be found. In comes Heapster, a project meant to provide a base monitoring platform on Kubernetes.\n\n## 踩坑路径\n\n官网给的部署教程可谓十分简单，一行命令就完事了。然而就我的部署经历来看，我觉得大多数同学可能都不会那么一帆风顺的靠一行命令就能收工。以下便是我这次踩过的坑。\n\n### imagePullPolicy\n\n官网给的那几个yaml文件中，指定了需要使用到的镜像文件。按照以前的经验，从gcr拉镜像几乎是拉不动的，所以提前通过时速云那边把镜像拉到了本地仓库中，并完成了tag操作。然而在创建pod和service的时候依然报错PullImageError.仔细看了一下yaml文件，发现有一行imagePullPolicy: Always.这个值代表了每次创建都会去远程仓库拉取最新的镜像，并不care本地是否已经有需要的镜像。\n\n解决这个问题，只需要把imagePullPolicy的值指定为IfNotPresent即可。\n\n### SkyDNS\n\n镜像问题解决后，接下来是DNS的问题。\nHeapster由两个pod组成，其中heapster和grafana-influxDB之间的通信需要依赖DNS的自动发现,而不是直接通过ClusterIP。但是我之前并没有在本地的K8s集群上配置SkyDNS,所以又被这个问题卡住转去配置SkyDNS.\n\n关于Kubernetes DNS配置的问题可以参考[DNS in Kubernetes](https://github.com/kubernetes/kubernetes/tree/v1.0.1/cluster/addons/dns)和[Kubernetes部署DNS-centos7](http://www.pangxie.space/docker/735)这两篇文章。\n\n![SkyDNS](http://image.slidesharecdn.com/servicediscoveryopensourcemeetupapril162016-160417092151/95/service-discovery-using-etcd-consul-and-kubernetes-22-638.jpg?cb=1460885346)\n\n### 版本遗留bug\n\nDNS启动成功后，pod的Status依然处于Error状态，查看日志，看到了'The config file /etc/kubernetes/kubeconfig/kubeconfig does not exist'这行错误信息。首先该文件确实不存在，但是为什么需要这个文件了，我也不知道。然后就google看了几乎所有能找到的相关的讨论，因为并不多。尝试了好几个可能的解决办法之后，就快要决定放弃。。。然后在这篇[讨论](https://github.com/kubernetes/heapster/issues/320)的最下面看到一个Kubernetes Member的回答，说这个版本的Heapster已经弃用了，请使用1.0.2版本。。。\n\n怀着一丝希望做了尝试，把yaml中指定的heapster镜像的版本从canary换到了最新的稳定版v1.1.0.然后重新创建pod和service，Status 变成了Running!\n\n### Configuring sources\n\nStatus变成Running并不代表应用可以正常访问了，习惯性的看一下log会发现'var/run/secrets/kubernetes.io/serviceaccount/token: No such file or directory'的异常。\n\n这个异常指向的问题大意是说Heapster与K8s Master的连接有两种方式，一种是https的，一种是http的。通过https的方式连接需要使用一些证书，如果找不到这些证书的话就会抛出上述异常。通过http的方式就相对简单一点，当然也不够安全。https的搭建方式可以参考[这篇文章](http://blog.dingmingk.com/blog/kube_monitor.html).\n\n想直接使用http方式来解决问题的则通过[官方文档](https://github.com/kubernetes/heapster/blob/master/docs/source-configuration.md)找到答案。\n\n### Env variables bug\n\n一切就绪后，用NodePort的方式暴露grafana的service ip。然后使用浏览器访问时发现无法正常加载css和png文件。所以整个页面就是下面这个丑样子。\n\n![api error](http://7xsrzn.com1.z0.glb.clouddn.com/enverror.jpg)\n\n经排查是influxdb-grafana-controller.yaml中定义了一个叫做GF_SERVER_ROOT_URL的环境变量。根据官网的解释，直接删掉就好了。\n\n![gf](http://7xsrzn.com1.z0.glb.clouddn.com/gf.png)\n\n\n### Grafana Tutorial\n\n踩完上面的坑就看到了这个让我兴奋到窒息的页面了。。。\n\n![grafana](http://7xsrzn.com1.z0.glb.clouddn.com/grafana.png)\n\ngrafana的使用教程可以参考这个[视频](https://www.youtube.com/watch?v=sKNZMtoSHN4&index=7&list=PLDGkOdUX1Ujo3wHw9-z5Vo12YLqXRjzg2)。\n\n\n## 总结\n\n这里记下的只是我解决问题的过程。其实很多东西的原理，问题更深层次的原因，我在写的过程中会问自己是不是真的弄懂了，是不是真的深有体会了。答案显然是没有。。。\n\n原因可能有这么几个，第一我不是专业的运维，很多东西理解起来可能需要比较多的基础运维知识做辅助。第二则是要消化的东西太多，我可能会把时间精力集中在自己最感兴趣的那一两个焦点上，其他的只要开始正常Running,也就不想再深入更多。\n\n其实内心觉得这样的状态并不是好的，如果要达成自己心里的野心和期望，或许该更专注，更深入。\n\n不过好在能坚持写博客，多多少少也会逼着自己把一些事弄的更清楚一些。一个月60多块的租赁费肯定有很多办法可以省下来，但是用这60多块钱督促自己坚持写两到三篇技术博客，我觉得还是挺值得的。\n\n\n\n\n","slug":"Kubernetes集群性能监控-Heapster","published":1,"updated":"2016-08-19T07:05:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqs000pdbtj62ugq29e","sticky":0},{"title":"使用Kubernetes改造米喜部署环境--阶段性总结","date":"2016-08-09T01:07:31.000Z","_content":"\n又是一个月没有更新博客了，白白的烧了62块钱的服务器租赁费。倒不是不想更新，实在是因为正在解决一个颗粒度很大的技术问题。已经断断续续被这个问题折磨了快两个月的时间，昨天晚上终于取得了阶段性成果，所以赶紧来post一篇。希望今天能早点下班，毕竟七夕。\n\n![七夕之歌](http://img.xiazaizhijia.com/uploads/2016/0808/20160808105639891.png)\n\n\n<!-- more -->\n\n\n## 现状与目标\n\n公司目前项目的开发和测试是在内网的物理机上进行的。体量暂时也还不大，所以预发和生产环境挂在阿里云上。Leader结合公司未来的业务发展需求和目前行业的大趋势（比如Docker,DevOps,MicroService等等），跟我定了这么个任务。希望能在2.0项目上线之前，对预发环境的部署方式进行改造，主要就是使用容器技术将应用容器化，并使用编排工具将这些应用管理起来。\n\n容器技术Docker已经是如雷贯耳，几乎成为容器技术的代名词。所以其实没什么好犹豫的，不过值得一提的是CoreOS推动的一款类Docker的开源容器引擎技术，Rocket.CoreOS这样做的原因是因为他们认为Docker已经背弃了提供“一个标准的容器架构”的初衷.但是就我的需求，务实的选择，当然是Docker.\n\n至于Orchestration Tool.,经过详细的技术选型和调研，最终在Docker Swarm、Apache Mesos和Google Kubernetes之间选择了Kubernetes,作为编排工具来管理Docker.\n\n## 艰难的实施过程\n\n首先我其实是一个开发,一个Dev.但是整个实施过程中，涉及到写代码的工作其实是非常之少的，大多数的工作集中在软件的安装，环境的配置，还有镜像的下载。。。。是的，说起这个镜像的下载我就坐不住，有些镜像翻个墙下载，几MB十几MB还行，有些动不动就是几十MB几百MB，一等就是快一个小时。能下到的也就算了，有些镜像放在gcr.io下面，根本拉不动。没有镜像，所有的操作都会被卡住，心情就是操蛋。好在后面学会了用DaoCloud和时速云之类的东西，总算是逃脱了GFW的拦截。\n\n总结起来就是，我认为这个工作让运维同学来做可能更合适且高效。但是都在讲DevOps，所以也没什么好抱怨的了，就当是扩充技能栈了。\n\n这里罗列一下在实施过程中踩过的坑和做过的事，帮助理清思路：\n\n-  去机房给物理机安装操作系统，配置网络，连接交换机。CentOS上有一个设置网络的GUI工具:nmtui,可以帮很多忙.另外本来打算去划分vlan的，但是电脑连交换机的console口使用超级终端有点问题，所以那天就没有划分，但是两台服务器还是可以通过内网ip互相ssh的。\n\n- 使用grale 将一个spring boot应用打包Docker Image.[详情请戳这里，亲测好用](https://spring.io/guides/gs/spring-boot-docker/)\n- 为了在centos上使用minikube,需要先[安装VirtualBox](http://tecadmin.net/install-oracle-virtualbox-on-centos-redhat-and-fedora/),也是个麻烦的过程。踩了yum  update  linux kernel的一些坑\n\n- 一开始在mac本上尝试着跑docker，所以用过docker-machine.后来在centos碰到’Cannot connect to the Docker daemon. Is the docker daemon running on this host?‘的问题的时候，以为在centos上也要安装这个docker-machine.其实只是因为我的docker service挂掉了，service docker restart一下就能解决问题。\n\n- docker官网上教我在centos上安装docker-engine.后来k8s官网教我在centos上安装k8s的时候用'yum install kubernetes',结果报告docker版本冲突。十分困惑不解。后经朋友指导和对docker了解更多之后，才知道docker-engine和docker-machine都是docker项目的分支功能，centos安装docker请认准'yum install docker'\n\n- 因为下载镜像超级慢，所以尝试搭建自己的仓库。尝试过[DTR](https://docs.docker.com/docker-trusted-registry/)和[Registry Server](https://docs.docker.com/registry/deploying/),前者直接失败，后者废了九牛二虎之力终于可以在内网各节点间不使用证书访问了，结果后面因为重装了好几次docker,宣告白弄了。。。。现在的状态依然是没有使用仓库，但想一想后面肯定还是要弄起来的。\n\n- terminal下载东西要翻墙的话，挂个http_proxy是个不错的选择。\n\n- 下载镜像如果嫌太慢或者根本拉不动，可以走DaoCloud或者时速云，拉下来之后重新tag一下，就可以使用了。\n\n- 看过好几个在centos上不靠谱的教你如何搭建k8s集群的文章，找到[这篇十分靠谱的](http://severalnines.com/blog/installing-kubernetes-cluster-minions-centos7-manage-pods-services)。因为前前后后在不同机器上重新安装过好多次，所以可以说是屡试不爽。\n\n- 有一次在一组新的机器上搭建k8s集群，搭建好之后在master上执行‘kubectl get nodes’ 没有任何的return信息。经排查发现是因为之前在这台机器上跑过minikube,把kube-context设置为了minikube,所以在minikube这个上下文信息下get不到node是很正常的。但是也不知道新安装的集群的context是什么，不知道如何切换回来。有一种做法是删除~/.kube/config文件。\n\n- 因为缺乏经验，在将要上线运行的服务器上胡乱的修改了很多配置文件。导致一下软件的基本使用都有问题。比如在使用docker的过程中就碰到诸如'unit docker.socket not found '，'bad\n  certificate'之类的问题。google了半天也没有很好的解决，于是说想办法重装吧。但是一个不合格的运维起初以为只需要 'yum  remove\n  xxx'就可以完成卸载了。其实并没有，这样的卸载很不干净！于是我想了个粗暴的方法，在根目录下使用find命令，递归去查询所有跟‘docker’有关的文件，确认之后全部删掉再重装，就fix了。当然如果一些配置写进了文件，比如/etc/profile之类的，而且后面又忘记了，就只能随缘了。。。把这个烦恼跟一个做运维的朋友反映过之后，他建议我以后不要在生产服务器上乱尝试，而是找那些不重要的机器，比如阿里云按需付费的云主机，把流程测试通过了，再搬到生产服务器上去，或者预先使用虚拟化的方式对一台主机进行一虚多。拿虚拟机做尝试，发现玩坏了，直接废弃掉，重装一台虚拟机。\n\n-  至于k8s官网上的文档，不得不说写的实在差。跟着文档走，到处走不通的体验实在是糟糕透了，简直是要把我弄疯掉。我自身的原因当然也有一些，但是一个hello-world我真的是从第一次看到到顺利跑完居然中间隔了一个月还多。。。下面这张图应该可以表达众多使用者对k8s官方文档共同的心声吧。\n  \n   ![论K8s官网的文档写的有多烂](http://7xsrzn.com1.z0.glb.clouddn.com/fuck8s.jpg-large)\n\n- 当被k8s官网文档折磨的死去活来的时候，花了一天的时间把Docker Swarm和Apache Mesos的入门文档都跑了一遍，不要太顺畅。跑完之后做了一个更感性的对比。\n  ![对比Mesos,k8s,Swarm](http://7xsrzn.com1.z0.glb.clouddn.com/k8smesos.jpg-large)\n\n- 还有一些方法论性质的感悟。比如这次施工，学习资料基本全英文。感谢自己今年4，5月份在学校养成了好习惯，阅读英文文档除了慢了点，没有什么太大的问题。另外在碰到问题的时候，除了stackoverflow，github的issues讨论列表也是一个可以解决问题的地方。不过更多的是讨论过程，正解命中率相对较低。说到stackoverflow,小小的开心了一下的是首答换来了2个赞同，reputation值终于超过了15，可以给别人的答案点赞了。好爽。\n\n- 说到方法论，Leader给我灌输的‘谋定而后动’应该也要算一个。百度脑图是一个不错的分析工具，帮助理清思路。想清楚了再动手。\n\n- 刚刚说到在google里面找答案。突然又记起来另一个非常非常重要的东西。那就是--日志！日志！日志！回顾这不长的‘运维工作经历’，觉得跟开发最相通的地方就在于发现不对劲了，找日志，然后拿日志中的错误信息当keyword去google.但是linux系统记录日志的方式和我们平时常见的应用系统又有一些差别，碰到异常情况但是找不到具体日志，是我在施工过程中最痛苦的经历之一。要了解linux的脾气，可能还是要用时间来磨炼吧。\n\n\n## 修整一下再继续 \n \n  还有一些零碎的事情，一下子可能想不全了，所以就先吐槽这么多。而且这也才完成阶段性的目标，即将公司的主应用docker化并用k8s集群管理起来。后面还要做的事可多了：\n\n  - 数据库docker化\n  - 集群组建方式调优\n  - k8s正式上线，测试，预发，生产环境部署方式。实现CI,CD.\n  - 实践微服务架构\n  - ......\n\n要学的东西就更多了。不过先继续深入理解Docker和K8s应该是首当其冲的工作。\n   \n![Docker](http://img4.imgtn.bdimg.com/it/u=1326576917,4008009621&fm=21&gp=0.jpg)\n     \n![K8s](http://img2.imgtn.bdimg.com/it/u=533468645,120501819&fm=21&gp=0.jpg)\n\n","source":"_posts/:2016-08-09-使用Kubernetes改造米喜部署环境-阶段性总结.md","raw":"---\ntitle: 使用Kubernetes改造米喜部署环境--阶段性总结\ndate: 2016-08-09 09:07:31\ntags: Kubernetes\ncategories: DevOps\n\n---\n\n又是一个月没有更新博客了，白白的烧了62块钱的服务器租赁费。倒不是不想更新，实在是因为正在解决一个颗粒度很大的技术问题。已经断断续续被这个问题折磨了快两个月的时间，昨天晚上终于取得了阶段性成果，所以赶紧来post一篇。希望今天能早点下班，毕竟七夕。\n\n![七夕之歌](http://img.xiazaizhijia.com/uploads/2016/0808/20160808105639891.png)\n\n\n<!-- more -->\n\n\n## 现状与目标\n\n公司目前项目的开发和测试是在内网的物理机上进行的。体量暂时也还不大，所以预发和生产环境挂在阿里云上。Leader结合公司未来的业务发展需求和目前行业的大趋势（比如Docker,DevOps,MicroService等等），跟我定了这么个任务。希望能在2.0项目上线之前，对预发环境的部署方式进行改造，主要就是使用容器技术将应用容器化，并使用编排工具将这些应用管理起来。\n\n容器技术Docker已经是如雷贯耳，几乎成为容器技术的代名词。所以其实没什么好犹豫的，不过值得一提的是CoreOS推动的一款类Docker的开源容器引擎技术，Rocket.CoreOS这样做的原因是因为他们认为Docker已经背弃了提供“一个标准的容器架构”的初衷.但是就我的需求，务实的选择，当然是Docker.\n\n至于Orchestration Tool.,经过详细的技术选型和调研，最终在Docker Swarm、Apache Mesos和Google Kubernetes之间选择了Kubernetes,作为编排工具来管理Docker.\n\n## 艰难的实施过程\n\n首先我其实是一个开发,一个Dev.但是整个实施过程中，涉及到写代码的工作其实是非常之少的，大多数的工作集中在软件的安装，环境的配置，还有镜像的下载。。。。是的，说起这个镜像的下载我就坐不住，有些镜像翻个墙下载，几MB十几MB还行，有些动不动就是几十MB几百MB，一等就是快一个小时。能下到的也就算了，有些镜像放在gcr.io下面，根本拉不动。没有镜像，所有的操作都会被卡住，心情就是操蛋。好在后面学会了用DaoCloud和时速云之类的东西，总算是逃脱了GFW的拦截。\n\n总结起来就是，我认为这个工作让运维同学来做可能更合适且高效。但是都在讲DevOps，所以也没什么好抱怨的了，就当是扩充技能栈了。\n\n这里罗列一下在实施过程中踩过的坑和做过的事，帮助理清思路：\n\n-  去机房给物理机安装操作系统，配置网络，连接交换机。CentOS上有一个设置网络的GUI工具:nmtui,可以帮很多忙.另外本来打算去划分vlan的，但是电脑连交换机的console口使用超级终端有点问题，所以那天就没有划分，但是两台服务器还是可以通过内网ip互相ssh的。\n\n- 使用grale 将一个spring boot应用打包Docker Image.[详情请戳这里，亲测好用](https://spring.io/guides/gs/spring-boot-docker/)\n- 为了在centos上使用minikube,需要先[安装VirtualBox](http://tecadmin.net/install-oracle-virtualbox-on-centos-redhat-and-fedora/),也是个麻烦的过程。踩了yum  update  linux kernel的一些坑\n\n- 一开始在mac本上尝试着跑docker，所以用过docker-machine.后来在centos碰到’Cannot connect to the Docker daemon. Is the docker daemon running on this host?‘的问题的时候，以为在centos上也要安装这个docker-machine.其实只是因为我的docker service挂掉了，service docker restart一下就能解决问题。\n\n- docker官网上教我在centos上安装docker-engine.后来k8s官网教我在centos上安装k8s的时候用'yum install kubernetes',结果报告docker版本冲突。十分困惑不解。后经朋友指导和对docker了解更多之后，才知道docker-engine和docker-machine都是docker项目的分支功能，centos安装docker请认准'yum install docker'\n\n- 因为下载镜像超级慢，所以尝试搭建自己的仓库。尝试过[DTR](https://docs.docker.com/docker-trusted-registry/)和[Registry Server](https://docs.docker.com/registry/deploying/),前者直接失败，后者废了九牛二虎之力终于可以在内网各节点间不使用证书访问了，结果后面因为重装了好几次docker,宣告白弄了。。。。现在的状态依然是没有使用仓库，但想一想后面肯定还是要弄起来的。\n\n- terminal下载东西要翻墙的话，挂个http_proxy是个不错的选择。\n\n- 下载镜像如果嫌太慢或者根本拉不动，可以走DaoCloud或者时速云，拉下来之后重新tag一下，就可以使用了。\n\n- 看过好几个在centos上不靠谱的教你如何搭建k8s集群的文章，找到[这篇十分靠谱的](http://severalnines.com/blog/installing-kubernetes-cluster-minions-centos7-manage-pods-services)。因为前前后后在不同机器上重新安装过好多次，所以可以说是屡试不爽。\n\n- 有一次在一组新的机器上搭建k8s集群，搭建好之后在master上执行‘kubectl get nodes’ 没有任何的return信息。经排查发现是因为之前在这台机器上跑过minikube,把kube-context设置为了minikube,所以在minikube这个上下文信息下get不到node是很正常的。但是也不知道新安装的集群的context是什么，不知道如何切换回来。有一种做法是删除~/.kube/config文件。\n\n- 因为缺乏经验，在将要上线运行的服务器上胡乱的修改了很多配置文件。导致一下软件的基本使用都有问题。比如在使用docker的过程中就碰到诸如'unit docker.socket not found '，'bad\n  certificate'之类的问题。google了半天也没有很好的解决，于是说想办法重装吧。但是一个不合格的运维起初以为只需要 'yum  remove\n  xxx'就可以完成卸载了。其实并没有，这样的卸载很不干净！于是我想了个粗暴的方法，在根目录下使用find命令，递归去查询所有跟‘docker’有关的文件，确认之后全部删掉再重装，就fix了。当然如果一些配置写进了文件，比如/etc/profile之类的，而且后面又忘记了，就只能随缘了。。。把这个烦恼跟一个做运维的朋友反映过之后，他建议我以后不要在生产服务器上乱尝试，而是找那些不重要的机器，比如阿里云按需付费的云主机，把流程测试通过了，再搬到生产服务器上去，或者预先使用虚拟化的方式对一台主机进行一虚多。拿虚拟机做尝试，发现玩坏了，直接废弃掉，重装一台虚拟机。\n\n-  至于k8s官网上的文档，不得不说写的实在差。跟着文档走，到处走不通的体验实在是糟糕透了，简直是要把我弄疯掉。我自身的原因当然也有一些，但是一个hello-world我真的是从第一次看到到顺利跑完居然中间隔了一个月还多。。。下面这张图应该可以表达众多使用者对k8s官方文档共同的心声吧。\n  \n   ![论K8s官网的文档写的有多烂](http://7xsrzn.com1.z0.glb.clouddn.com/fuck8s.jpg-large)\n\n- 当被k8s官网文档折磨的死去活来的时候，花了一天的时间把Docker Swarm和Apache Mesos的入门文档都跑了一遍，不要太顺畅。跑完之后做了一个更感性的对比。\n  ![对比Mesos,k8s,Swarm](http://7xsrzn.com1.z0.glb.clouddn.com/k8smesos.jpg-large)\n\n- 还有一些方法论性质的感悟。比如这次施工，学习资料基本全英文。感谢自己今年4，5月份在学校养成了好习惯，阅读英文文档除了慢了点，没有什么太大的问题。另外在碰到问题的时候，除了stackoverflow，github的issues讨论列表也是一个可以解决问题的地方。不过更多的是讨论过程，正解命中率相对较低。说到stackoverflow,小小的开心了一下的是首答换来了2个赞同，reputation值终于超过了15，可以给别人的答案点赞了。好爽。\n\n- 说到方法论，Leader给我灌输的‘谋定而后动’应该也要算一个。百度脑图是一个不错的分析工具，帮助理清思路。想清楚了再动手。\n\n- 刚刚说到在google里面找答案。突然又记起来另一个非常非常重要的东西。那就是--日志！日志！日志！回顾这不长的‘运维工作经历’，觉得跟开发最相通的地方就在于发现不对劲了，找日志，然后拿日志中的错误信息当keyword去google.但是linux系统记录日志的方式和我们平时常见的应用系统又有一些差别，碰到异常情况但是找不到具体日志，是我在施工过程中最痛苦的经历之一。要了解linux的脾气，可能还是要用时间来磨炼吧。\n\n\n## 修整一下再继续 \n \n  还有一些零碎的事情，一下子可能想不全了，所以就先吐槽这么多。而且这也才完成阶段性的目标，即将公司的主应用docker化并用k8s集群管理起来。后面还要做的事可多了：\n\n  - 数据库docker化\n  - 集群组建方式调优\n  - k8s正式上线，测试，预发，生产环境部署方式。实现CI,CD.\n  - 实践微服务架构\n  - ......\n\n要学的东西就更多了。不过先继续深入理解Docker和K8s应该是首当其冲的工作。\n   \n![Docker](http://img4.imgtn.bdimg.com/it/u=1326576917,4008009621&fm=21&gp=0.jpg)\n     \n![K8s](http://img2.imgtn.bdimg.com/it/u=533468645,120501819&fm=21&gp=0.jpg)\n\n","slug":"使用Kubernetes改造米喜部署环境-阶段性总结","published":1,"updated":"2016-08-10T07:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqw000udbtjycj5dulh","sticky":0},{"title":"Mac茶话会","date":"2016-07-03T15:25:24.000Z","_content":"\n入手Mac有4个多月了，虽然借的钱还没有还完嘿嘿嘿。向朋友推荐电子产品的时候，我是这样说的:“去年买的所有东西中，我觉得Kindle是最让我满意的。今年是Mac，这简直是个艺术品。”\n\n最近听到有个程序员同事说，因为不太会用Mac，所以虽然买了，但是还是天天用Windows开发，希望能举办个茶话会，大家交流一下怎么用。于是萌生了写这篇博文的念头。尽管我也算不上什么老司机，但是多亏了一些老司机给我带过一段路，所以还是知道Mac的一些科学使用方法的，另外除了交流之用，也会用持续更新的方式来促进自己成长，早日成为一名Mac老司机~\n\n\n![Mac](http://images.apple.com/hk/en/macbook-pro/images/overview_display_hero_2x.jpg)\n\n<!-- more -->\n\n## 写在前面\n\n以下推荐的很多软件，在ifunmac.com这个网站上都有非正版可以下载。用盗版当然不是什么值得炫耀的事，如果有能力我也推荐大家支持正版，就算无法承担全部使用正版带来的开销，做到力所能及也是好的。\n\n## 软件推荐 \n### [Alfred](https://www.alfredapp.com/)\n\nAlfred是一款热键管理软件，是Mac自带的Spotlight的增强版.各种好用的[workflow](https://github.com/zenorocha/alfred-workflows)，还可以自定义.\n之所以要首先推荐这款软件，是想表达我的一个观点。从Windows转到Mac, 很重要的一个变化就是从GUI转到Terminal.要习惯用命令行的方式跟系统交互，慢慢的，你会爱上这种简洁又高效的方式.\n![Alfred](http://img2.imgtn.bdimg.com/it/u=3167532550,2047637174&fm=21&gp=0.jpg)\n\n\n### [Item2](https://www.iterm2.com/) & [Oh My ZSH](http://ohmyz.sh/)\n\n推荐使用Mac其实是基于推荐程序员使用Linux的态度之上的.用命令行的思维方式去思考，去探触GUI掩盖下的世界。Item2是Terminal的一个替代品，提供了很多你甚至都不曾想到的贴心小功能。详情请参加官网。\n\nOh My ZSH则大概可以理解为Terminal的一套很好用的皮肤。不仅好看，还增加了各种敏捷属性。\n\n### [Homebrew](http://brew.sh/index_zh-cn.html)\n\nMac下等价于ubuntu的apt-get的东西,管理依赖包,提供完胜Windows的下载和安装体验。\n这里也顺便推荐一些terminal下超好用的命令行工具：\n  \n  - brew install autojump: [用命令行快速定位到目标目录](https://github.com/wting/autojump/wiki)\n  - brew install ack: [超越grep的存在](http://beyondgrep.com/)\n  - brew install tig: [git的插件,方便blame](https://github.com/jonas/tig)\n  - brew install tree: [Tree is a recursive directory listing command](http://mama.indstate.edu/users/ice/tree/) \n  - brew install curl: 超好用的数据传输工具.但我更喜欢把它当postman来用.[how to use](https://curl.haxx.se/docs/manpage.html)\n  - ...\n\n### [Shadowsocks](https://shadowsocks.com/)\n\n科学上网利器，不仅仅局限于Mac平台。还有其他很多其他科学上网的方式，用哪种不重要，重要的是姿势要正确。程序员如果不出去看一看，get到的信息质量会严重影响到自身的产出物水准。\n除了在浏览器上使用代理，还可以在terminal中设置代理。详情参见[为终端设置Shadowsocks代理](http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/index.html)，亲测好用。\n\n![shadowsocks](https://gochrome.info/wp-content/uploads/2016/03/shadowsocks.png)\n\n### [Mou](http://25.io/mou/)\n\nMarkdown编辑器。同类产品有很多，比如:\n \n - [TEXTS](http://www.texts.io/)\n - [MacDown](http://macdown.uranusjr.com/)\n \n还有在线的：\n - [作业部落](https://www.zybuluo.com/mdeditor)\n\n同科学上网一样，用哪种工具不重要，挑一个用就好了。Markdown是一种轻量级的标记语言，提倡专注写作而不是排版。回想下在学校时用word排版大量文字图片，不仅花了很多时间，而且排的又丑又心累。\n\n### [Phoenix](https://github.com/kasper/phoenix)\n\n这款软件是OS X平台上一个轻量级的window和app管理工具，相对比较难上手，但是一旦上手，爱不释手。\nPhoenix是一个老司机推荐给我的，具体的介绍和教程戳这里[Windows management for hacker](https://blog.log4d.com/2016/04/windows-management-for-hacker/).\n\n![phoenix](https://raw.githubusercontent.com/kasper/phoenix/master/Phoenix/Images.xcassets/AppIcon.appiconset/icon_128x128%402x.png) \n\n\n\n\n\n\n\n---\n未完待续，持续更新。\n\n\n## Reference\n- [程序员如何优雅地使用 Mac?](https://www.zhihu.com/question/20873070)\n\n\n","source":"_posts/:2016-07-03-Mac茶话会.md","raw":"---\ntitle: Mac茶话会\ndate: 2016-07-03 23:25:24\ntags: Mac\n\n---\n\n入手Mac有4个多月了，虽然借的钱还没有还完嘿嘿嘿。向朋友推荐电子产品的时候，我是这样说的:“去年买的所有东西中，我觉得Kindle是最让我满意的。今年是Mac，这简直是个艺术品。”\n\n最近听到有个程序员同事说，因为不太会用Mac，所以虽然买了，但是还是天天用Windows开发，希望能举办个茶话会，大家交流一下怎么用。于是萌生了写这篇博文的念头。尽管我也算不上什么老司机，但是多亏了一些老司机给我带过一段路，所以还是知道Mac的一些科学使用方法的，另外除了交流之用，也会用持续更新的方式来促进自己成长，早日成为一名Mac老司机~\n\n\n![Mac](http://images.apple.com/hk/en/macbook-pro/images/overview_display_hero_2x.jpg)\n\n<!-- more -->\n\n## 写在前面\n\n以下推荐的很多软件，在ifunmac.com这个网站上都有非正版可以下载。用盗版当然不是什么值得炫耀的事，如果有能力我也推荐大家支持正版，就算无法承担全部使用正版带来的开销，做到力所能及也是好的。\n\n## 软件推荐 \n### [Alfred](https://www.alfredapp.com/)\n\nAlfred是一款热键管理软件，是Mac自带的Spotlight的增强版.各种好用的[workflow](https://github.com/zenorocha/alfred-workflows)，还可以自定义.\n之所以要首先推荐这款软件，是想表达我的一个观点。从Windows转到Mac, 很重要的一个变化就是从GUI转到Terminal.要习惯用命令行的方式跟系统交互，慢慢的，你会爱上这种简洁又高效的方式.\n![Alfred](http://img2.imgtn.bdimg.com/it/u=3167532550,2047637174&fm=21&gp=0.jpg)\n\n\n### [Item2](https://www.iterm2.com/) & [Oh My ZSH](http://ohmyz.sh/)\n\n推荐使用Mac其实是基于推荐程序员使用Linux的态度之上的.用命令行的思维方式去思考，去探触GUI掩盖下的世界。Item2是Terminal的一个替代品，提供了很多你甚至都不曾想到的贴心小功能。详情请参加官网。\n\nOh My ZSH则大概可以理解为Terminal的一套很好用的皮肤。不仅好看，还增加了各种敏捷属性。\n\n### [Homebrew](http://brew.sh/index_zh-cn.html)\n\nMac下等价于ubuntu的apt-get的东西,管理依赖包,提供完胜Windows的下载和安装体验。\n这里也顺便推荐一些terminal下超好用的命令行工具：\n  \n  - brew install autojump: [用命令行快速定位到目标目录](https://github.com/wting/autojump/wiki)\n  - brew install ack: [超越grep的存在](http://beyondgrep.com/)\n  - brew install tig: [git的插件,方便blame](https://github.com/jonas/tig)\n  - brew install tree: [Tree is a recursive directory listing command](http://mama.indstate.edu/users/ice/tree/) \n  - brew install curl: 超好用的数据传输工具.但我更喜欢把它当postman来用.[how to use](https://curl.haxx.se/docs/manpage.html)\n  - ...\n\n### [Shadowsocks](https://shadowsocks.com/)\n\n科学上网利器，不仅仅局限于Mac平台。还有其他很多其他科学上网的方式，用哪种不重要，重要的是姿势要正确。程序员如果不出去看一看，get到的信息质量会严重影响到自身的产出物水准。\n除了在浏览器上使用代理，还可以在terminal中设置代理。详情参见[为终端设置Shadowsocks代理](http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/index.html)，亲测好用。\n\n![shadowsocks](https://gochrome.info/wp-content/uploads/2016/03/shadowsocks.png)\n\n### [Mou](http://25.io/mou/)\n\nMarkdown编辑器。同类产品有很多，比如:\n \n - [TEXTS](http://www.texts.io/)\n - [MacDown](http://macdown.uranusjr.com/)\n \n还有在线的：\n - [作业部落](https://www.zybuluo.com/mdeditor)\n\n同科学上网一样，用哪种工具不重要，挑一个用就好了。Markdown是一种轻量级的标记语言，提倡专注写作而不是排版。回想下在学校时用word排版大量文字图片，不仅花了很多时间，而且排的又丑又心累。\n\n### [Phoenix](https://github.com/kasper/phoenix)\n\n这款软件是OS X平台上一个轻量级的window和app管理工具，相对比较难上手，但是一旦上手，爱不释手。\nPhoenix是一个老司机推荐给我的，具体的介绍和教程戳这里[Windows management for hacker](https://blog.log4d.com/2016/04/windows-management-for-hacker/).\n\n![phoenix](https://raw.githubusercontent.com/kasper/phoenix/master/Phoenix/Images.xcassets/AppIcon.appiconset/icon_128x128%402x.png) \n\n\n\n\n\n\n\n---\n未完待续，持续更新。\n\n\n## Reference\n- [程序员如何优雅地使用 Mac?](https://www.zhihu.com/question/20873070)\n\n\n","slug":"Mac茶话会","published":1,"updated":"2016-07-07T03:40:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabqy000xdbtjphfdv5gb","sticky":0},{"title":"百字书评","date":"2016-06-09T10:18:43.000Z","_content":"\n想写这样一篇博文有一段时间了，主要是因为入手kindle之后，看书速度飙升。这半年大概光用kindle就看了15本书吧，对我来说算挺多了，而且主要是工作之余能抽出时间看这么多书，对自己挺满意的。\n\n不打算写太长的书评，一是因为一般我读书只会读一遍，自己水平有限，写不出太深刻的东西。二是长的不一定是好的，浓缩的更像是精华。\n\n![kindle](http://7xsrzn.com1.z0.glb.clouddn.com/kindle.jpg)\n\n<!--more-->\n\n---\n\n## 刘慈溪 --- <<三体>>\n\n### 推荐指数：4颗星\n\n《三体》是入手kindle的第一套系列书，大概是两个星期多一点的时间读完了三本。留下最深刻印象的并不是主人翁形象有多鲜活，也不是故事情节有多跌宕起伏。令我瞠目结舌叹为观止的是作者刘慈溪的知识面之宽厚。物理学，计算机科学，天文学，历史，地理，军事等等，当然还有文学本身，在这本科幻小说中都得到了有一定专业深度的体现。记得有一次看电视，在随便调台的时候，正好看到刘慈溪作客鲁豫有约，于是马上放下了遥控器。有一个环节印象同样深刻，是鲁豫邀请大刘给观众现场推荐十本书，然后他便一口气介绍了十本，包括作者和大概的故事简介。国内国外的，硬科幻的，偏文学的，都有。顺序比较随性，能感觉到不是提前准备的。我也相信，能写出这样一套宏伟的作品的作者，其阅读量常人肯定是无法望其项背的。\n\n![三体](https://upload.wikimedia.org/wikipedia/zh/3/3d/The_Three-Body_Problem_poster.jpg)\n\n## 大冰 ---《乖，摸摸头》\n### 推荐指数：4颗星\n\n第一次看大冰的一些书名，会觉得像是一个专门写言情小说的网络写手。不过当真的读了他的这本《摸摸头》，对他的印象有了很大程度的反转。书是由他个人所经历的一个个真实的故事串联起来的，人生经历谈不上多传奇，但确实在这个大多数人对成功人生的定义同质化的时代，给了我很多不一样的观念冲击。在读他和他的朋友的故事的时候，也得到了一些生活中的启发。我本人去年在一家酒吧当兼职调酒师的经历，有一部分原因就是因为大冰在书中提到的‘酒吧义工’。大冰是一个喜欢跨界的人，主持，酒吧老板，歌手，作者...他的身上可以贴很多标签，这与我本人对于自己生活的期许也有所契合，一个标签就概括掉的人生多少显得有些单薄，我喜欢更多角度的去体验生活。\n\n![乖，摸摸头](http://tc.sinaimg.cn/maxwidth.2048/tc.service.weibo.com/p/ww4_sinaimg_cn/2517861f5e7b7ef3fa007ab4e596b9c8.jpg)\n\n\n## 东野圭吾 ---《解忧杂货店》\n### 推荐指数：2颗星\n\n东野圭吾算是近来很火的一个作家。看这本书也是因为kindle上各种推荐和排行上都能看到东野的作品，所以挑了一本销量还不错的。但是看完之后其实是很生气的。整本书的阅读过程我都在想一个问题：作者你这么编故事到底想表达什么？沉住气终于把整本书翻完之后，发现他用一种灌鸡汤的方式来聚拢了整个的乱如麻线故事。不可否认的是作者写推理小说对于细节和逻辑的把控能力，但是当这些‘炫技’成为了作品本身的主要戏份，而不具备什么高的立意或者有思考的观点输出的时候，我认为这样的作品是失败的，是幼稚的。\n\n![解忧杂货店](https://img1.doubanio.com/lpic/s27284878.jpg)\n\n## 柴静 ---《看见》\n### 推荐指数：4.5颗星\n\n如果让我选出到目前为止，用Kindle看过的书中，印象最深刻，阅读体验最震撼的书，那我会选《看见》.这本书很早就听说过，在大致浏览过柴静自己组建团队做的那个纪录片《穹顶之下》后，对她的印象更深刻了一些。16年春节的那几天假，读完了这本书，觉得是近一年来看过的最有温度的书。书的主线是柴静近十年来作为一名记者的成长经历，展现方式是她所参与的一个个采访课题，这其中包括非典，家庭暴力，同性恋，环境污染，汶川地震等广受关注的事件和命题。在她的人生经历中，看到了她的韧性，勇气，还有做人的温度；也看到了中国近十年经历过的甚至还要继续经历的一些社会问题，有的温暖人心，但更多的是直击人心、久久不能平复。关于女子监狱的那个章节，阅读体验尤为突出。评价一本书好与不好有很多维度，有一种说法大概是说看完之后有没有喜欢上作书的人。从这个维度来讲，《看见》于我是一本好书。我愿意听柴静讲更多的故事。\n![看见](http://image.xinmin.cn/2013/12/04/20131204171000336727.jpg)\n\n## 孟非 ---《随遇而安》\n### 推荐指数：1颗星\n\n断断续续看过几集非诚勿扰，要说整个节目最吸引我的就是作为主持人的孟非了。他对于整个场面的把控，恰到好处的点评，缓解尴尬的手段等，让我有了读这本书的冲动，想要去了解这么会说的一个人的人生经历是怎样的。然而真的读了这本书之后，大失所望。其实孟非在作序的时候比较隐晦的提到了，“人过了四十岁之后，写作的能力和写作的欲望是不成正比的”。不管这句话是否适用于其他人，但于他而言，是的。整本书就是一本鲜有亮点的流水账，个人感觉，算是孟非的一个败笔，也许没有这本书，对他本人的形象而言是更好的一件事。\n\n![孟非](http://img5.imgtn.bdimg.com/it/u=934635355,1230221686&fm=23&gp=0.jpg)\n\n## 白岩松 ---《幸福了吗?》\n### 推荐指数：4颗星\n\n整本书看完了之后，回顾一下，其实没有很明确的主题，本身就是一本随笔集嘛。但是无论是谈足球，谈工作，谈人生感悟，谈成长经历，都能感受到白岩松的话语有深度.他不像小崔那样尖锐，但是在得体的表达下同样可以很精准的点出问题中最突出的要点。大场面他Hold住，比如北京申奥转播。小场合他也很融入，比如他所在的评论部内部年会。从书中看他思考问题的角度，看他关心的事情，看他接触的朋友，我觉得认识了一个形象更鲜活更丰满的白岩松。三十而立，四十而不惑，白岩松这样的人的四十岁人生感悟，读起来常常引人深思。\n\n![白岩松](http://img4.imgtn.bdimg.com/it/u=2069056476,249680674&fm=21&gp=0.jpg)\n\n\n## 李开复，范海涛 ---《世界因你不同：李开复自传》\n### 推荐指数：4颗星\n\n如果专注的读的话，这本书应该是一天就可以看完.书本讲述了李开复一生不平凡的经历，作为互联网从业人员的我看来，他真的太厉害太厉害了。Apple,MicroSoft,Google是我望尘莫及的三家顶尖级互联网公司，同为技术出身的李开复不仅在这三家公司都曾经担任要职，而且微软和谷歌竟然还为了他打过一场大官司。后来他自己出来创业，创办了创新工场。投入得正兴奋时被发现得了癌症。一般人这个时候大都医生说什么就是什么了，叹息时不我命。然而学霸李开发博士搜集了几乎所有与自己所患癌症相关的医学研究资料，论文等，认真研读完之后认为自己还是有机会活下来的，然后积极的配合治疗，居然也就从死神手里逃了回来，向死而生。\n\n「用勇氣改變可以改變的事情，用胸懷接受不能改變的事情，用智慧分辨兩者的不同.」李开复对于人生的积极态度，和他自己的人生感悟，就是我读这本书最大的收获。\n\n![李开复](http://www.ningzhe.net/attachment/article/2015/01/04/502008b32b.jpg)\n\n## Kelly McGonigal --- 《自控力》\n### 推荐指数：4颗星\n\n《自控力》是一本好书。\n第一，科学。所论述的主要观点都有实验支撑，觉得自己不是在听作者在那边意淫瞎bb.\n第二，代入感极强。这本书读起来很累很慢，因为好多时候都被代入，会想着跟着书的节奏去实施一些事情，虽然我冥想了那么多次都没成功。。。\n第三，自控这话题确实有感。研究好，受益终生。\n\n![自控力](http://img4.imgtn.bdimg.com/it/u=1557503727,1855934293&fm=23&gp=0.jpg)\n\n\n\n##  Rachel Joyce --- 《一个人的朝圣》\n### 推荐指数：3颗星\n\n看的书越多，经历的事情越多，能触动自己的书反而变少了一点。或者说，自己被触动的阈值变得更高了。整本书能触动我的细节真的比较少了，再早三四年年我可能看了这本书自己也想出去徒步一场，而今只觉得哈罗德把自己的人生过得实在太糟糕了，然而这些也跟他的成长经历脱不了干系。总而言之，换做是我，希望自己的人生经历不要给自己留下太多憾事，给别人造成太多伤害。晚年可以用来回忆美好时光，不想借由一场救赎之旅去挽回，去补偿。\n\n\n![一个人的朝圣](http://img1.imgtn.bdimg.com/it/u=3316745298,3814118777&fm=23&gp=0.jpg)\n\n\n## Peter F. Drucker --- 《卓有成效的管理》\n### 推荐指数: 4.5颗星\n\n这是目前为止在kindle上看书做标记做的最多的一本。原因很简单，有很多观点直接戳中我所面临的问题。在读这本书的同时，也是我毕业后第一次担任一个小团队的Leader,算是我职场management的初体验。这种一边实践，一边通过看书来review自己的实践效果的方式，我会觉得受益很多。上次有这样的体验是在做一个重构性质的项目时，同步阅读了Martin Fowler的《重构:改善既有代码的设计》一书，同样印象深刻受益良多。\n\n另外，作者德鲁克绝对是管理学理论界的一大传奇人物。而此书也可以算是他老人家的经典代表作。所以4.5分，毫不过分。\n\n最后想说一点，在体验了自己单打独斗的摸黑前行的孤独之后，再来执行一次有效的团队管理。心里暗暗惊呼，‘管理’这项技能，能量大的骇人。\n\n![卓有成效的管理](https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1482553101&di=cc0e8b8081261cfb3f2b04609281dbc5&imgtype=jpg&er=1&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00634udMty6SzkDilJm70)\n\n\n--- \n持续更新,未完待续.\n\n\n","source":"_posts/:2016-06-09-百字书评.md","raw":"---\ntitle: 百字书评\ndate: 2016-06-09 18:18:43\ncategory: 读书\ntags: Kindle\n\n---\n\n想写这样一篇博文有一段时间了，主要是因为入手kindle之后，看书速度飙升。这半年大概光用kindle就看了15本书吧，对我来说算挺多了，而且主要是工作之余能抽出时间看这么多书，对自己挺满意的。\n\n不打算写太长的书评，一是因为一般我读书只会读一遍，自己水平有限，写不出太深刻的东西。二是长的不一定是好的，浓缩的更像是精华。\n\n![kindle](http://7xsrzn.com1.z0.glb.clouddn.com/kindle.jpg)\n\n<!--more-->\n\n---\n\n## 刘慈溪 --- <<三体>>\n\n### 推荐指数：4颗星\n\n《三体》是入手kindle的第一套系列书，大概是两个星期多一点的时间读完了三本。留下最深刻印象的并不是主人翁形象有多鲜活，也不是故事情节有多跌宕起伏。令我瞠目结舌叹为观止的是作者刘慈溪的知识面之宽厚。物理学，计算机科学，天文学，历史，地理，军事等等，当然还有文学本身，在这本科幻小说中都得到了有一定专业深度的体现。记得有一次看电视，在随便调台的时候，正好看到刘慈溪作客鲁豫有约，于是马上放下了遥控器。有一个环节印象同样深刻，是鲁豫邀请大刘给观众现场推荐十本书，然后他便一口气介绍了十本，包括作者和大概的故事简介。国内国外的，硬科幻的，偏文学的，都有。顺序比较随性，能感觉到不是提前准备的。我也相信，能写出这样一套宏伟的作品的作者，其阅读量常人肯定是无法望其项背的。\n\n![三体](https://upload.wikimedia.org/wikipedia/zh/3/3d/The_Three-Body_Problem_poster.jpg)\n\n## 大冰 ---《乖，摸摸头》\n### 推荐指数：4颗星\n\n第一次看大冰的一些书名，会觉得像是一个专门写言情小说的网络写手。不过当真的读了他的这本《摸摸头》，对他的印象有了很大程度的反转。书是由他个人所经历的一个个真实的故事串联起来的，人生经历谈不上多传奇，但确实在这个大多数人对成功人生的定义同质化的时代，给了我很多不一样的观念冲击。在读他和他的朋友的故事的时候，也得到了一些生活中的启发。我本人去年在一家酒吧当兼职调酒师的经历，有一部分原因就是因为大冰在书中提到的‘酒吧义工’。大冰是一个喜欢跨界的人，主持，酒吧老板，歌手，作者...他的身上可以贴很多标签，这与我本人对于自己生活的期许也有所契合，一个标签就概括掉的人生多少显得有些单薄，我喜欢更多角度的去体验生活。\n\n![乖，摸摸头](http://tc.sinaimg.cn/maxwidth.2048/tc.service.weibo.com/p/ww4_sinaimg_cn/2517861f5e7b7ef3fa007ab4e596b9c8.jpg)\n\n\n## 东野圭吾 ---《解忧杂货店》\n### 推荐指数：2颗星\n\n东野圭吾算是近来很火的一个作家。看这本书也是因为kindle上各种推荐和排行上都能看到东野的作品，所以挑了一本销量还不错的。但是看完之后其实是很生气的。整本书的阅读过程我都在想一个问题：作者你这么编故事到底想表达什么？沉住气终于把整本书翻完之后，发现他用一种灌鸡汤的方式来聚拢了整个的乱如麻线故事。不可否认的是作者写推理小说对于细节和逻辑的把控能力，但是当这些‘炫技’成为了作品本身的主要戏份，而不具备什么高的立意或者有思考的观点输出的时候，我认为这样的作品是失败的，是幼稚的。\n\n![解忧杂货店](https://img1.doubanio.com/lpic/s27284878.jpg)\n\n## 柴静 ---《看见》\n### 推荐指数：4.5颗星\n\n如果让我选出到目前为止，用Kindle看过的书中，印象最深刻，阅读体验最震撼的书，那我会选《看见》.这本书很早就听说过，在大致浏览过柴静自己组建团队做的那个纪录片《穹顶之下》后，对她的印象更深刻了一些。16年春节的那几天假，读完了这本书，觉得是近一年来看过的最有温度的书。书的主线是柴静近十年来作为一名记者的成长经历，展现方式是她所参与的一个个采访课题，这其中包括非典，家庭暴力，同性恋，环境污染，汶川地震等广受关注的事件和命题。在她的人生经历中，看到了她的韧性，勇气，还有做人的温度；也看到了中国近十年经历过的甚至还要继续经历的一些社会问题，有的温暖人心，但更多的是直击人心、久久不能平复。关于女子监狱的那个章节，阅读体验尤为突出。评价一本书好与不好有很多维度，有一种说法大概是说看完之后有没有喜欢上作书的人。从这个维度来讲，《看见》于我是一本好书。我愿意听柴静讲更多的故事。\n![看见](http://image.xinmin.cn/2013/12/04/20131204171000336727.jpg)\n\n## 孟非 ---《随遇而安》\n### 推荐指数：1颗星\n\n断断续续看过几集非诚勿扰，要说整个节目最吸引我的就是作为主持人的孟非了。他对于整个场面的把控，恰到好处的点评，缓解尴尬的手段等，让我有了读这本书的冲动，想要去了解这么会说的一个人的人生经历是怎样的。然而真的读了这本书之后，大失所望。其实孟非在作序的时候比较隐晦的提到了，“人过了四十岁之后，写作的能力和写作的欲望是不成正比的”。不管这句话是否适用于其他人，但于他而言，是的。整本书就是一本鲜有亮点的流水账，个人感觉，算是孟非的一个败笔，也许没有这本书，对他本人的形象而言是更好的一件事。\n\n![孟非](http://img5.imgtn.bdimg.com/it/u=934635355,1230221686&fm=23&gp=0.jpg)\n\n## 白岩松 ---《幸福了吗?》\n### 推荐指数：4颗星\n\n整本书看完了之后，回顾一下，其实没有很明确的主题，本身就是一本随笔集嘛。但是无论是谈足球，谈工作，谈人生感悟，谈成长经历，都能感受到白岩松的话语有深度.他不像小崔那样尖锐，但是在得体的表达下同样可以很精准的点出问题中最突出的要点。大场面他Hold住，比如北京申奥转播。小场合他也很融入，比如他所在的评论部内部年会。从书中看他思考问题的角度，看他关心的事情，看他接触的朋友，我觉得认识了一个形象更鲜活更丰满的白岩松。三十而立，四十而不惑，白岩松这样的人的四十岁人生感悟，读起来常常引人深思。\n\n![白岩松](http://img4.imgtn.bdimg.com/it/u=2069056476,249680674&fm=21&gp=0.jpg)\n\n\n## 李开复，范海涛 ---《世界因你不同：李开复自传》\n### 推荐指数：4颗星\n\n如果专注的读的话，这本书应该是一天就可以看完.书本讲述了李开复一生不平凡的经历，作为互联网从业人员的我看来，他真的太厉害太厉害了。Apple,MicroSoft,Google是我望尘莫及的三家顶尖级互联网公司，同为技术出身的李开复不仅在这三家公司都曾经担任要职，而且微软和谷歌竟然还为了他打过一场大官司。后来他自己出来创业，创办了创新工场。投入得正兴奋时被发现得了癌症。一般人这个时候大都医生说什么就是什么了，叹息时不我命。然而学霸李开发博士搜集了几乎所有与自己所患癌症相关的医学研究资料，论文等，认真研读完之后认为自己还是有机会活下来的，然后积极的配合治疗，居然也就从死神手里逃了回来，向死而生。\n\n「用勇氣改變可以改變的事情，用胸懷接受不能改變的事情，用智慧分辨兩者的不同.」李开复对于人生的积极态度，和他自己的人生感悟，就是我读这本书最大的收获。\n\n![李开复](http://www.ningzhe.net/attachment/article/2015/01/04/502008b32b.jpg)\n\n## Kelly McGonigal --- 《自控力》\n### 推荐指数：4颗星\n\n《自控力》是一本好书。\n第一，科学。所论述的主要观点都有实验支撑，觉得自己不是在听作者在那边意淫瞎bb.\n第二，代入感极强。这本书读起来很累很慢，因为好多时候都被代入，会想着跟着书的节奏去实施一些事情，虽然我冥想了那么多次都没成功。。。\n第三，自控这话题确实有感。研究好，受益终生。\n\n![自控力](http://img4.imgtn.bdimg.com/it/u=1557503727,1855934293&fm=23&gp=0.jpg)\n\n\n\n##  Rachel Joyce --- 《一个人的朝圣》\n### 推荐指数：3颗星\n\n看的书越多，经历的事情越多，能触动自己的书反而变少了一点。或者说，自己被触动的阈值变得更高了。整本书能触动我的细节真的比较少了，再早三四年年我可能看了这本书自己也想出去徒步一场，而今只觉得哈罗德把自己的人生过得实在太糟糕了，然而这些也跟他的成长经历脱不了干系。总而言之，换做是我，希望自己的人生经历不要给自己留下太多憾事，给别人造成太多伤害。晚年可以用来回忆美好时光，不想借由一场救赎之旅去挽回，去补偿。\n\n\n![一个人的朝圣](http://img1.imgtn.bdimg.com/it/u=3316745298,3814118777&fm=23&gp=0.jpg)\n\n\n## Peter F. Drucker --- 《卓有成效的管理》\n### 推荐指数: 4.5颗星\n\n这是目前为止在kindle上看书做标记做的最多的一本。原因很简单，有很多观点直接戳中我所面临的问题。在读这本书的同时，也是我毕业后第一次担任一个小团队的Leader,算是我职场management的初体验。这种一边实践，一边通过看书来review自己的实践效果的方式，我会觉得受益很多。上次有这样的体验是在做一个重构性质的项目时，同步阅读了Martin Fowler的《重构:改善既有代码的设计》一书，同样印象深刻受益良多。\n\n另外，作者德鲁克绝对是管理学理论界的一大传奇人物。而此书也可以算是他老人家的经典代表作。所以4.5分，毫不过分。\n\n最后想说一点，在体验了自己单打独斗的摸黑前行的孤独之后，再来执行一次有效的团队管理。心里暗暗惊呼，‘管理’这项技能，能量大的骇人。\n\n![卓有成效的管理](https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1482553101&di=cc0e8b8081261cfb3f2b04609281dbc5&imgtype=jpg&er=1&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00634udMty6SzkDilJm70)\n\n\n--- \n持续更新,未完待续.\n\n\n","slug":"百字书评","published":1,"updated":"2016-12-17T04:20:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabr10010dbtjiil5xjoc","sticky":0},{"title":"匆匆","date":"2016-06-09T08:22:36.000Z","_content":"\n\n\n忽的一下两个月没更博了，先记一下这两个月干的事\n\n- 4.4回学校\n- 创业班毕业论文\n- 本专业毕业设计系统开发\n- 学车，科目二顺利通过。狗日的教练。\n- 本专业毕业论文\n- 创业班+本专业毕业论文答辩。两个答辩，同一个上午进行。\n- 海投简历。面试。凯捷技术，饿了么，米喜科技，易招标，喜马拉雅。‘饿了么’因为技术深度不够，遗憾没拿到offer。凯捷技术和喜马拉雅都过了一面，因为时间上的关系自己放弃了二面。比较可惜的是喜马拉雅，还比较喜欢他们的产品，但是因为他们招人效率太慢了，投给他们的简历过了10多天才联系我，而我已经在准备入职米喜。。最后是在米喜，易招标，堆糖之间，选择了米喜。\n- 毕业照，散伙饭\n- 回家休息了三天半，参加堂哥的婚礼。从小带着我和另一个堂弟打小霸王的堂哥，结婚了。\n- 6.1回上海，堆糖离职，租房子。6.3回杭州，收拾行李。6.4回上海，搬家。\n- 6.7入职新公司。\n\n\n过几天要回学校参加毕业典礼，这就算正式毕业了。其实有些事还是想多说几句，比如做做后面的规划什么的。但是最近状态不好，而且后面还有很多乱起八糟的事，静不下心，就草草这么几笔吧。等状态回来了，再补上。\n\n如果要留个引子的话，那就要说说新工作了。在堆糖和米喜之间的选择是有一些故事可以说的。但最重要的不是选择本身，是选择做了之后，要面临的挑战。在新公司上了两天班，会发现很多问题，偶尔还是会反问自己是否做了对的选择。但是这个时候会想起自己三年半前刚转专业的那个状态，面临的情况很相似。所以，继续加油吧，开水！还没沸腾了，怎么会停止升温！\n \n\n![we go to the new world](http://7xsrzn.com1.z0.glb.clouddn.com/newword.jpg)\n\n<!--more-->\n\n\n\n\n\n","source":"_posts/:2016-06-09-匆匆.md","raw":"---\ntitle: 匆匆\ndate: 2016-06-09 16:22:36\ncategory: life\ntags: 随笔杂记\n\n---\n\n\n\n忽的一下两个月没更博了，先记一下这两个月干的事\n\n- 4.4回学校\n- 创业班毕业论文\n- 本专业毕业设计系统开发\n- 学车，科目二顺利通过。狗日的教练。\n- 本专业毕业论文\n- 创业班+本专业毕业论文答辩。两个答辩，同一个上午进行。\n- 海投简历。面试。凯捷技术，饿了么，米喜科技，易招标，喜马拉雅。‘饿了么’因为技术深度不够，遗憾没拿到offer。凯捷技术和喜马拉雅都过了一面，因为时间上的关系自己放弃了二面。比较可惜的是喜马拉雅，还比较喜欢他们的产品，但是因为他们招人效率太慢了，投给他们的简历过了10多天才联系我，而我已经在准备入职米喜。。最后是在米喜，易招标，堆糖之间，选择了米喜。\n- 毕业照，散伙饭\n- 回家休息了三天半，参加堂哥的婚礼。从小带着我和另一个堂弟打小霸王的堂哥，结婚了。\n- 6.1回上海，堆糖离职，租房子。6.3回杭州，收拾行李。6.4回上海，搬家。\n- 6.7入职新公司。\n\n\n过几天要回学校参加毕业典礼，这就算正式毕业了。其实有些事还是想多说几句，比如做做后面的规划什么的。但是最近状态不好，而且后面还有很多乱起八糟的事，静不下心，就草草这么几笔吧。等状态回来了，再补上。\n\n如果要留个引子的话，那就要说说新工作了。在堆糖和米喜之间的选择是有一些故事可以说的。但最重要的不是选择本身，是选择做了之后，要面临的挑战。在新公司上了两天班，会发现很多问题，偶尔还是会反问自己是否做了对的选择。但是这个时候会想起自己三年半前刚转专业的那个状态，面临的情况很相似。所以，继续加油吧，开水！还没沸腾了，怎么会停止升温！\n \n\n![we go to the new world](http://7xsrzn.com1.z0.glb.clouddn.com/newword.jpg)\n\n<!--more-->\n\n\n\n\n\n","slug":"匆匆","published":1,"updated":"2016-06-09T08:37:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabr50015dbtjd9i980mp","sticky":0},{"title":"堆糖实习总结","date":"2016-03-30T04:17:42.000Z","_content":"\n&#160; &#160; &#160; &#160;时间过得真快，2015.06.03入职，到本周结束，也就是2016.04.01，我在堆糖的实习期也就结束了。十个月的实习期学到很多，趁这个机会好好梳理一下。\n![堆糖LOGO][1]\n\n<!--more-->\n\n---\n\n## 关于技术\n&#160; &#160; &#160; &#160;实习的岗位是Java后台开发，那重点当然是先聊下技术上的成长。\n### 相关技术栈\n - 操作系统\n   - Linux \n - 编程语言\n   - Java\n   - Python\n - 开源框架&技术\n   - springmvc/django\n   - mybatis/ibatis\n   - mysql/mongo/memcache/redis/solr\n   - mvn/Jetty/nginx/docker \n - 辅助开发工具\n   - IDEA/Vim\n   - Git/GitLab/Bitbucket\n   - curl/Postman\n   - mitproxy/Charles\n   - item/tmux\n   - Tower/Confluence/JIRA\n   - ShadowSocks\n   - Google Code Style\n   - ...\n   \n### 日常工作内容\n\n - 参与分析日常迭代需求，进行详细设计，编码实现并通过单元测试，集成测试然后发布上线。持续按期交付。\n - 线上系统的bugfix。\n - 老旧系统的下线迁移和重构工作，从Python平台迁移到Java平台。\n - 定期与同事交叉进行CodeReview。\n\n### 参与项目\n - Saturn\n \n   该项目是传统MVC架构中的Service层，直接与DB交互，通过RPC协议对外层Web App提供服务，为堆糖主站提供了坚实稳定的地基。\n   \n   我在此项目中参与最早期的详细设计和开发工作，提供了最基础的用户信息CURD服务模块。使用memcache和redis提供缓存策略，使用批量查询替换所有循环逐个查询操作，降低时耗，提升系统系能。自己在这个项目中培养了良好的编码风格和阅读官方文档，英文文档等习惯。\n   \n   觉得自己做的不错的地方在于：大多数情况下会有较高的执行力。\n   \n   发现自己不足的地方在于：碰到难度相对较高的问题容易钻牛角尖钻进去，而导致项目延时交付。认真反思后采取的改进措施是在工作场景中，应对任务的优先级和交付时间有更好的把控。而在平时的学习中，继续保持钻牛角尖的态度，不轻易放过问题。\n   \n   \n - Japa下线\n \n   Japa是堆糖早期的主力Web App.承担了堆糖绝大多数的HTTP请求。由Python语言编写，采用Jython框架。因代码质量较差，以及公司技术栈向Java转型的原因，需要下线。由另一个代码质量更优秀，技术社区更庞大的系统Vienna来顶替。Vienna由Java语言编写，采用SpringMVC框架。\n   \n   我是此项目的众多参与者之一，工作形式主要是阅读原有的python代码，理解业务逻辑，用java语言对业务逻辑进行重构。要求可用性比迁移之前要提高，而且API压力测试平均响应时间要在500ms以下。项目中最大的收获就是养成了重构有“坏味道”的代码的习惯，归功于Martin Flower所著的《重构--改善既有代码的设计》一书。\n   \n   觉得自己做的不错的地方在于：在项目中积极主动的沟通，习惯写出技术方案向更有经验的前辈请求指点。\n   \n   有待进一步提升的：技术方案的深度需要花更多时间和精力去探索。\n   \n   \n### 感想\n> 授人以鱼不如授人以渔。\n\n&#160; &#160; &#160; &#160;上面提到的一些技能点，我认为大多可以算做'鱼'。现在我更看重的以及有意识的去培养的能力是：分析问题的关键需求-->获取足够的备选方案-->比较方案的优劣并选择匹配度最高的方案-->高效的执行。我认为这是可以钓到很多大鱼的‘渔’。当然这套‘渔’上可以下功夫的地方也有很多，比如如何获取足够的备选方案，如何高效的执行。都是说着容易做起来难的事。\n\n## 技术之外\n&#160; &#160; &#160; &#160;对自己未来的期许，不仅仅止步于一名架构师，更希望自己能主导一个有创意，能给人眼前一亮，并为人们生活带来实质性改善的产品。所以我平时也会关注一些技术之外的东西。\n\n### 产品需求文档\n&#160; &#160; &#160; &#160;创业初期，经常出现的场景是老板想到什么就让程序员做什么。做到一半觉得不好于是改成另一种方式，再做再改，甚至有时候还会改回到最初的版本。程序员被折磨的苦不堪言。\n\n&#160; &#160; &#160; &#160;不过毕竟是初期，这样的事还是可以容忍的。但是当业务逐渐趋于稳定的时候，规范的开发流程还是很有必要的。一篇好的产品需求文档显得尤为重要。\n\n&#160; &#160; &#160; &#160;我觉得一篇好的产品需求文档应具备但不限于以下几点:\n\n 1. 便于阅读的排版格式和通顺的语句表述\n 2. 辅助理解的原型图\n 3. 尽可能写明需求的产生原因\n \n&#160; &#160; &#160; &#160;第1点跟第2点的目的其实是相同的，因为开发是根据这篇文档来进行产出，测试根据这篇文档来进行验收，所以降低开发和测试人员对于需求的理解的心智负担是直接提升团队效率的措施。而且叙述有条不紊，逻辑清晰易懂的文档是产品经理经过认真思考的产物，若形式太过简陋，其实是可以辨别一个产品经理的专业水平的。\n \n&#160; &#160; &#160; &#160;提出第3点是出于希望让开发和测试更有参与感的考虑。我觉得开发人员沦为一个写代码的工具是对团队极其不利的事情。有需求过来了，不去想来龙去脉，只管coding的工作方式与我对自己的期许是相违背的。如果产品经理能在文档中适当的描述一下需求产生的原因或是支持这个需求的调研数据等等，我觉得开发人员会对需求有更多的认同感和更深层次的理解，在实现上也会有更多的考虑。\n \n### 持续反馈\n&#160; &#160; &#160; &#160;平时的项目中，通常的流程是产品提出需求，技术进行详细分析并设计方案，开发，提测，bugfix，测试通过然后上线。之后除了发现线上有bug,开发这边几乎得不到什么反馈信息。商业线那边可能还好一点，可以观察每天的销量等信息。社区线这边我觉得问题比较突出。比如堆糖6.0对首页进行了大改版，以前的Blog瀑布流换成了卡片形式的长图文，话题，Album等,风格的改变很大。上线一段时间后也没有任何关于流量变化和用户反应的反馈信息通知到大家，可能是产品自己消化掉了，或者是管理层没有将这些信息继续向下传递。但是我认为这些数据一个开发应该能够看到，能够有参与感和自己的反思。再比如每年年初的年度计划或者半年计划，某项指标业务方希望能在半年时间内达到500%的增长量。技术作为参与者却不能比较轻松的得到一个可以定期持续观察的数据反馈，可能只有等到半年时间到了之后，才可以看到这个数据。这不是一个“持续集成”(Continuous Integration)的过程，开发过程中如果没有CI,代码质量和系统的可用性很难保证。任务管理的过程中没有类似CI的环节，我觉得也会对任务的成功完成有很大影响。\n \n \n### 感想\n&#160; &#160; &#160; &#160;互联网从业人员中，如果技术人员能抽出一部分时间去关注产品逻辑，关注市场竞争，那他们相比于设计，测试，产品等在团队中的视野应该是最开阔的，话语权和决策权也应该最重。这样才能更好的做到“技术驱动”。而如何关注产品逻辑市场竞争等，除了需要程序员的自我驱动，团队是不是也应该提供一些便利。\n \n ---\n \n## 总结\n&#160; &#160; &#160; &#160;技术之路还很长，还有很多需要潜心研究。同时技术也只是我从业的出发点，是手段而不是目的地。\n&#160; &#160; &#160; &#160;看很多书，见很多人，去很多地方，做很多事情，而后成大器。\n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/duitanglogo.png \n","source":"_posts/:2016-03-30-堆糖实习总结.md","raw":"---\ntitle: 堆糖实习总结\ndate: 2016-03-30 12:17:42\ntags: 堆糖\n\n---\n\n&#160; &#160; &#160; &#160;时间过得真快，2015.06.03入职，到本周结束，也就是2016.04.01，我在堆糖的实习期也就结束了。十个月的实习期学到很多，趁这个机会好好梳理一下。\n![堆糖LOGO][1]\n\n<!--more-->\n\n---\n\n## 关于技术\n&#160; &#160; &#160; &#160;实习的岗位是Java后台开发，那重点当然是先聊下技术上的成长。\n### 相关技术栈\n - 操作系统\n   - Linux \n - 编程语言\n   - Java\n   - Python\n - 开源框架&技术\n   - springmvc/django\n   - mybatis/ibatis\n   - mysql/mongo/memcache/redis/solr\n   - mvn/Jetty/nginx/docker \n - 辅助开发工具\n   - IDEA/Vim\n   - Git/GitLab/Bitbucket\n   - curl/Postman\n   - mitproxy/Charles\n   - item/tmux\n   - Tower/Confluence/JIRA\n   - ShadowSocks\n   - Google Code Style\n   - ...\n   \n### 日常工作内容\n\n - 参与分析日常迭代需求，进行详细设计，编码实现并通过单元测试，集成测试然后发布上线。持续按期交付。\n - 线上系统的bugfix。\n - 老旧系统的下线迁移和重构工作，从Python平台迁移到Java平台。\n - 定期与同事交叉进行CodeReview。\n\n### 参与项目\n - Saturn\n \n   该项目是传统MVC架构中的Service层，直接与DB交互，通过RPC协议对外层Web App提供服务，为堆糖主站提供了坚实稳定的地基。\n   \n   我在此项目中参与最早期的详细设计和开发工作，提供了最基础的用户信息CURD服务模块。使用memcache和redis提供缓存策略，使用批量查询替换所有循环逐个查询操作，降低时耗，提升系统系能。自己在这个项目中培养了良好的编码风格和阅读官方文档，英文文档等习惯。\n   \n   觉得自己做的不错的地方在于：大多数情况下会有较高的执行力。\n   \n   发现自己不足的地方在于：碰到难度相对较高的问题容易钻牛角尖钻进去，而导致项目延时交付。认真反思后采取的改进措施是在工作场景中，应对任务的优先级和交付时间有更好的把控。而在平时的学习中，继续保持钻牛角尖的态度，不轻易放过问题。\n   \n   \n - Japa下线\n \n   Japa是堆糖早期的主力Web App.承担了堆糖绝大多数的HTTP请求。由Python语言编写，采用Jython框架。因代码质量较差，以及公司技术栈向Java转型的原因，需要下线。由另一个代码质量更优秀，技术社区更庞大的系统Vienna来顶替。Vienna由Java语言编写，采用SpringMVC框架。\n   \n   我是此项目的众多参与者之一，工作形式主要是阅读原有的python代码，理解业务逻辑，用java语言对业务逻辑进行重构。要求可用性比迁移之前要提高，而且API压力测试平均响应时间要在500ms以下。项目中最大的收获就是养成了重构有“坏味道”的代码的习惯，归功于Martin Flower所著的《重构--改善既有代码的设计》一书。\n   \n   觉得自己做的不错的地方在于：在项目中积极主动的沟通，习惯写出技术方案向更有经验的前辈请求指点。\n   \n   有待进一步提升的：技术方案的深度需要花更多时间和精力去探索。\n   \n   \n### 感想\n> 授人以鱼不如授人以渔。\n\n&#160; &#160; &#160; &#160;上面提到的一些技能点，我认为大多可以算做'鱼'。现在我更看重的以及有意识的去培养的能力是：分析问题的关键需求-->获取足够的备选方案-->比较方案的优劣并选择匹配度最高的方案-->高效的执行。我认为这是可以钓到很多大鱼的‘渔’。当然这套‘渔’上可以下功夫的地方也有很多，比如如何获取足够的备选方案，如何高效的执行。都是说着容易做起来难的事。\n\n## 技术之外\n&#160; &#160; &#160; &#160;对自己未来的期许，不仅仅止步于一名架构师，更希望自己能主导一个有创意，能给人眼前一亮，并为人们生活带来实质性改善的产品。所以我平时也会关注一些技术之外的东西。\n\n### 产品需求文档\n&#160; &#160; &#160; &#160;创业初期，经常出现的场景是老板想到什么就让程序员做什么。做到一半觉得不好于是改成另一种方式，再做再改，甚至有时候还会改回到最初的版本。程序员被折磨的苦不堪言。\n\n&#160; &#160; &#160; &#160;不过毕竟是初期，这样的事还是可以容忍的。但是当业务逐渐趋于稳定的时候，规范的开发流程还是很有必要的。一篇好的产品需求文档显得尤为重要。\n\n&#160; &#160; &#160; &#160;我觉得一篇好的产品需求文档应具备但不限于以下几点:\n\n 1. 便于阅读的排版格式和通顺的语句表述\n 2. 辅助理解的原型图\n 3. 尽可能写明需求的产生原因\n \n&#160; &#160; &#160; &#160;第1点跟第2点的目的其实是相同的，因为开发是根据这篇文档来进行产出，测试根据这篇文档来进行验收，所以降低开发和测试人员对于需求的理解的心智负担是直接提升团队效率的措施。而且叙述有条不紊，逻辑清晰易懂的文档是产品经理经过认真思考的产物，若形式太过简陋，其实是可以辨别一个产品经理的专业水平的。\n \n&#160; &#160; &#160; &#160;提出第3点是出于希望让开发和测试更有参与感的考虑。我觉得开发人员沦为一个写代码的工具是对团队极其不利的事情。有需求过来了，不去想来龙去脉，只管coding的工作方式与我对自己的期许是相违背的。如果产品经理能在文档中适当的描述一下需求产生的原因或是支持这个需求的调研数据等等，我觉得开发人员会对需求有更多的认同感和更深层次的理解，在实现上也会有更多的考虑。\n \n### 持续反馈\n&#160; &#160; &#160; &#160;平时的项目中，通常的流程是产品提出需求，技术进行详细分析并设计方案，开发，提测，bugfix，测试通过然后上线。之后除了发现线上有bug,开发这边几乎得不到什么反馈信息。商业线那边可能还好一点，可以观察每天的销量等信息。社区线这边我觉得问题比较突出。比如堆糖6.0对首页进行了大改版，以前的Blog瀑布流换成了卡片形式的长图文，话题，Album等,风格的改变很大。上线一段时间后也没有任何关于流量变化和用户反应的反馈信息通知到大家，可能是产品自己消化掉了，或者是管理层没有将这些信息继续向下传递。但是我认为这些数据一个开发应该能够看到，能够有参与感和自己的反思。再比如每年年初的年度计划或者半年计划，某项指标业务方希望能在半年时间内达到500%的增长量。技术作为参与者却不能比较轻松的得到一个可以定期持续观察的数据反馈，可能只有等到半年时间到了之后，才可以看到这个数据。这不是一个“持续集成”(Continuous Integration)的过程，开发过程中如果没有CI,代码质量和系统的可用性很难保证。任务管理的过程中没有类似CI的环节，我觉得也会对任务的成功完成有很大影响。\n \n \n### 感想\n&#160; &#160; &#160; &#160;互联网从业人员中，如果技术人员能抽出一部分时间去关注产品逻辑，关注市场竞争，那他们相比于设计，测试，产品等在团队中的视野应该是最开阔的，话语权和决策权也应该最重。这样才能更好的做到“技术驱动”。而如何关注产品逻辑市场竞争等，除了需要程序员的自我驱动，团队是不是也应该提供一些便利。\n \n ---\n \n## 总结\n&#160; &#160; &#160; &#160;技术之路还很长，还有很多需要潜心研究。同时技术也只是我从业的出发点，是手段而不是目的地。\n&#160; &#160; &#160; &#160;看很多书，见很多人，去很多地方，做很多事情，而后成大器。\n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/duitanglogo.png \n","slug":"堆糖实习总结","published":1,"updated":"2016-04-09T01:32:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabr8001adbtjfjp1gi1g","sticky":0},{"title":"Yaml Tutorial","date":"2016-03-25T06:14:49.000Z","_content":"\n最近在参与公司测试团队的APITest的一些实施工作,选用的自动化测试框架对Yaml有所依赖,所以抽时间写了一份文档,为测试团队的同学们提供一些基础知识的入门支持。\n\n---\n\n## Definition\n&#160; &#160; &#160; &#160;YAML Ain't Markup Language （Yaml不是标记语言，递归否定，可能是借鉴[GNU](https://zh.wikipedia.org/wiki/GNU)的梗）\n  \n## What It Is\n \n&#160; &#160; &#160; &#160;YAML is a human friendly data serialization standard for all programming languages.\n(YAML是一个human friendly的数据序列化标准，适用所有的编程语言)\n\n## Relation to JSON\n&#160; &#160; &#160; &#160;都是human readable的数据交换格式。但是json对程序更友好，而yaml把human readability的优先级设置得更高。yaml在不同的编程环境中交互的时候需要更复杂的逻辑处理。\n\n\n## Relation to XML\n&#160; &#160; &#160; &#160;虽然在很多应用领域两者处于相互竞争的状态，但两者之间并没有任何直接关系。YAML专注于做数据序列化，而XML是为了支持文档的结构化而设计的。\n  \n  \n  \n## Grammar\n- Structure(结构体)，用空格展示。\n- Sequence(数组)， 用“-”来表示。\n- Map(键值对)，用“:”分隔。\n\n## Demo\n&#160; &#160; &#160; &#160;一般YAML文件的扩展名为.yaml,例如下面的文件就是Dijinchao.yaml\n\n```json\nname: 3D  # K-V\nage: 23\nwork:\n    company: duitang  # Structure,空格\n    job_title: Develop Engineer\ninterests:\n    - Python  #Sequence 用“-”表示\n    - Linux   #Sequence 用“-”表示\n    - 大保健   #Sequence 用“-”表示        \n\n```\n\n## YAML Online Editor\n\n - http://codebeautify.org/yaml-validator\n - http://codebeautify.org/yaml-to-json-xml-csv\n - http://www.yamllint.com/\n\n## PyYaml\n\n&#160; &#160; &#160; &#160;YAML是一个规范，各个语言都有对这个规范的实现。\n\n - C/C++ \n   - libyaml\n   - yaml-cpp\n - Java:\n   - JYaml\n   - YamlBeans\n - Python\n   - PyYaml\n   - PySyck\n - ......\n \n \n&#160; &#160; &#160; &#160;还有很多语言的各种实现版本，就不一一列举了。本次采用的pyresttest框架是用Python写的,其中就依赖了PyYaml.所以这里简略的介绍一下PyYaml，目的在于感性的认知pyresttest是如何工作的：\n \n&#160; &#160; &#160; &#160;首先是[安装PyYaml](http://pyyaml.org/wiki/PyYAML),然后执行如下代码：\n\n```python\n>>> import yaml\n>>> yaml.load(\"\"\"\nname: 3D  # K-V\nage: 23\nwork:\n    company: duitang  # Structure,空格\n    job_title: Develop Engineer\ninterests:\n    - Python  #Sequence 用“-”表示\n    - Linux   #Sequence 用“-”表示\n    - 大保健   #Sequence 用“-”表示\n\"\"\") \n\n \n``` \n\n运行结果：\n\n![图片](http://7xsrzn.com1.z0.glb.clouddn.com/yaml2.png)\n\n&#160; &#160; &#160; &#160;可以看到是yaml.load()拿到了一个python的dict对象，拿到这个对象之后就可以用代码去做各种各样的逻辑处理了.所以测试这边只需要保证.yaml格式的文本文件书写正确，就能利用框架去做逻辑验证，完成自动化测试的需求。\n \n  \n  \n## Reference\n-  [YAML简介](http://www.ibm.com/developerworks/cn/xml/x-cn-yamlintro/)\n- [The Official YAML Web Site](http://yaml.org/)\n- [PyYaml](http://pyyaml.org/wiki/PyYAMLDocumentation)\n","source":"_posts/:2016-03-25-Yaml-Tutorial.md","raw":"---\ntitle: Yaml Tutorial\ndate: 2016-03-25 14:14:49\ntags: Yaml\n---\n\n最近在参与公司测试团队的APITest的一些实施工作,选用的自动化测试框架对Yaml有所依赖,所以抽时间写了一份文档,为测试团队的同学们提供一些基础知识的入门支持。\n\n---\n\n## Definition\n&#160; &#160; &#160; &#160;YAML Ain't Markup Language （Yaml不是标记语言，递归否定，可能是借鉴[GNU](https://zh.wikipedia.org/wiki/GNU)的梗）\n  \n## What It Is\n \n&#160; &#160; &#160; &#160;YAML is a human friendly data serialization standard for all programming languages.\n(YAML是一个human friendly的数据序列化标准，适用所有的编程语言)\n\n## Relation to JSON\n&#160; &#160; &#160; &#160;都是human readable的数据交换格式。但是json对程序更友好，而yaml把human readability的优先级设置得更高。yaml在不同的编程环境中交互的时候需要更复杂的逻辑处理。\n\n\n## Relation to XML\n&#160; &#160; &#160; &#160;虽然在很多应用领域两者处于相互竞争的状态，但两者之间并没有任何直接关系。YAML专注于做数据序列化，而XML是为了支持文档的结构化而设计的。\n  \n  \n  \n## Grammar\n- Structure(结构体)，用空格展示。\n- Sequence(数组)， 用“-”来表示。\n- Map(键值对)，用“:”分隔。\n\n## Demo\n&#160; &#160; &#160; &#160;一般YAML文件的扩展名为.yaml,例如下面的文件就是Dijinchao.yaml\n\n```json\nname: 3D  # K-V\nage: 23\nwork:\n    company: duitang  # Structure,空格\n    job_title: Develop Engineer\ninterests:\n    - Python  #Sequence 用“-”表示\n    - Linux   #Sequence 用“-”表示\n    - 大保健   #Sequence 用“-”表示        \n\n```\n\n## YAML Online Editor\n\n - http://codebeautify.org/yaml-validator\n - http://codebeautify.org/yaml-to-json-xml-csv\n - http://www.yamllint.com/\n\n## PyYaml\n\n&#160; &#160; &#160; &#160;YAML是一个规范，各个语言都有对这个规范的实现。\n\n - C/C++ \n   - libyaml\n   - yaml-cpp\n - Java:\n   - JYaml\n   - YamlBeans\n - Python\n   - PyYaml\n   - PySyck\n - ......\n \n \n&#160; &#160; &#160; &#160;还有很多语言的各种实现版本，就不一一列举了。本次采用的pyresttest框架是用Python写的,其中就依赖了PyYaml.所以这里简略的介绍一下PyYaml，目的在于感性的认知pyresttest是如何工作的：\n \n&#160; &#160; &#160; &#160;首先是[安装PyYaml](http://pyyaml.org/wiki/PyYAML),然后执行如下代码：\n\n```python\n>>> import yaml\n>>> yaml.load(\"\"\"\nname: 3D  # K-V\nage: 23\nwork:\n    company: duitang  # Structure,空格\n    job_title: Develop Engineer\ninterests:\n    - Python  #Sequence 用“-”表示\n    - Linux   #Sequence 用“-”表示\n    - 大保健   #Sequence 用“-”表示\n\"\"\") \n\n \n``` \n\n运行结果：\n\n![图片](http://7xsrzn.com1.z0.glb.clouddn.com/yaml2.png)\n\n&#160; &#160; &#160; &#160;可以看到是yaml.load()拿到了一个python的dict对象，拿到这个对象之后就可以用代码去做各种各样的逻辑处理了.所以测试这边只需要保证.yaml格式的文本文件书写正确，就能利用框架去做逻辑验证，完成自动化测试的需求。\n \n  \n  \n## Reference\n-  [YAML简介](http://www.ibm.com/developerworks/cn/xml/x-cn-yamlintro/)\n- [The Official YAML Web Site](http://yaml.org/)\n- [PyYaml](http://pyyaml.org/wiki/PyYAMLDocumentation)\n","slug":"Yaml-Tutorial","published":1,"updated":"2016-04-13T12:50:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabra001ddbtj6h9l61ci","sticky":0},{"title":"夯实基础 -- 算法的时间复杂度","date":"2016-03-06T07:12:12.000Z","_content":"&#160; &#160; &#160; &#160;因为Hexo对数学公式的显示支持的不是很人性化，所以[原文请戳这里][1]\n\n![无奈][2]\n<!--more-->\n\n\n\n\n\n\n  [1]: https://www.zybuluo.com/waterdkx/note/266155\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/zoro.jpeg\n","source":"_posts/:2016-03-06-夯实基础-算法的时间复杂度.md","raw":"---\ntitle: 夯实基础 -- 算法的时间复杂度\ndate: 2016-03-06 15:12:12\ncategories: 夯实基础\ntags:\n - 算法\n - 时间复杂度\n\n---\n&#160; &#160; &#160; &#160;因为Hexo对数学公式的显示支持的不是很人性化，所以[原文请戳这里][1]\n\n![无奈][2]\n<!--more-->\n\n\n\n\n\n\n  [1]: https://www.zybuluo.com/waterdkx/note/266155\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/zoro.jpeg\n","slug":"夯实基础-算法的时间复杂度","published":1,"updated":"2016-06-08T08:15:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabrg001gdbtjnzqalt1q","sticky":0},{"title":"今天交女朋友啦~","date":"2016-02-21T14:47:49.000Z","_content":"\n&#160; &#160; &#160; &#160;其实我很想发个朋友圈说:\n\n> 哈哈哈哈哈哈哈哈哈嘿嘿嘿嘿嘿嘿嘿耶耶耶耶耶耶耶耶交女朋友了嘻嘻嘻嘻嘻嘻嚯嚯嚯嚯嚯嚯哈哈哈哈哈哈哈哈~~\n\n&#160; &#160; &#160; &#160;不过出于一些工作的原因,其实还有点想要好好呵护感情的目的,决定不发了.但是人生一大快事当然要纪念一下啦!~!\n\n&#160; &#160; &#160; &#160;都是二十出头的人了,对待感情也相对比较理性了.但还是希望自己能为彼此的生活多带来一些甜蜜,温暖,值得回味的瞬间,希望自己不要辜负她.未来充满未知,谈太多未来也不靠谱.未来,慢慢来.\n\n&#160; &#160; &#160; &#160;姑娘,我很认真的.\n\n![心意][1]\n<!--more-->\n![此处输入图片的描述][2]\n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/flowerforgirl.jpeg\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/heartmean.jpeg\n","source":"_posts/:2016-02-21-今天交女朋友啦.md","raw":"---\ntitle: 今天交女朋友啦~\ndate: 2016-02-21 22:47:49\ntags: life\n\n---\n\n&#160; &#160; &#160; &#160;其实我很想发个朋友圈说:\n\n> 哈哈哈哈哈哈哈哈哈嘿嘿嘿嘿嘿嘿嘿耶耶耶耶耶耶耶耶交女朋友了嘻嘻嘻嘻嘻嘻嚯嚯嚯嚯嚯嚯哈哈哈哈哈哈哈哈~~\n\n&#160; &#160; &#160; &#160;不过出于一些工作的原因,其实还有点想要好好呵护感情的目的,决定不发了.但是人生一大快事当然要纪念一下啦!~!\n\n&#160; &#160; &#160; &#160;都是二十出头的人了,对待感情也相对比较理性了.但还是希望自己能为彼此的生活多带来一些甜蜜,温暖,值得回味的瞬间,希望自己不要辜负她.未来充满未知,谈太多未来也不靠谱.未来,慢慢来.\n\n&#160; &#160; &#160; &#160;姑娘,我很认真的.\n\n![心意][1]\n<!--more-->\n![此处输入图片的描述][2]\n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/flowerforgirl.jpeg\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/heartmean.jpeg\n","slug":"今天交女朋友啦","published":1,"updated":"2016-04-09T02:37:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabrk001ndbtj5jjho0t6","sticky":0},{"title":"读书-<<李鸿章传>>","date":"2016-02-20T10:29:33.000Z","_content":"\n&#160; &#160; &#160; &#160;这本书是梁任公为李鸿章所作之传.读完全篇,最大的感触是全书第一页讲到的这段话:\n\n>  天下惟庸人无咎无誉。举天下人而恶之，斯可谓非常之奸雄矣乎。举天下人而誉之，斯可谓非常之豪杰矣乎。虽然，天下人云者，常人居其千百，而非常人不得其一，以常人而论非常人，乌见其可？故誉满天下，未必不为乡愿；谤满天下，未必不为伟人。\n\n&#160; &#160; &#160; &#160;这张图是1896年,李鸿章出访美国时,纽约日报用李鸿章在美国受欢迎的程度来打响广告:\"李鸿章从来没有错过星期天的报纸.\"\n\n![此处输入图片的描述][1]\n\n&#160; &#160; &#160; &#160;天下惟庸人无咎无誉.\n&#160; &#160; &#160; &#160;自省,自勉.\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/lihongchang.jpg \n","source":"_posts/:2016-02-20-读书-李鸿章传.md","raw":"---\ntitle: '读书-<<李鸿章传>>'\ndate:  2016-02-20 18:29:33\ntags:  Kindle\ncategories: 读书\n\n---\n\n&#160; &#160; &#160; &#160;这本书是梁任公为李鸿章所作之传.读完全篇,最大的感触是全书第一页讲到的这段话:\n\n>  天下惟庸人无咎无誉。举天下人而恶之，斯可谓非常之奸雄矣乎。举天下人而誉之，斯可谓非常之豪杰矣乎。虽然，天下人云者，常人居其千百，而非常人不得其一，以常人而论非常人，乌见其可？故誉满天下，未必不为乡愿；谤满天下，未必不为伟人。\n\n&#160; &#160; &#160; &#160;这张图是1896年,李鸿章出访美国时,纽约日报用李鸿章在美国受欢迎的程度来打响广告:\"李鸿章从来没有错过星期天的报纸.\"\n\n![此处输入图片的描述][1]\n\n&#160; &#160; &#160; &#160;天下惟庸人无咎无誉.\n&#160; &#160; &#160; &#160;自省,自勉.\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/lihongchang.jpg \n","slug":"读书-李鸿章传","published":1,"updated":"2016-08-18T12:53:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabrm001qdbtjjcuu3j20","sticky":0},{"title":"<<踩坑记>>系列--用Jackson解决子类序列化后,反序列化成父类的异常","date":"2016-02-03T10:01:14.000Z","_content":"\n## 问题描述 ##\n\n&#160; &#160; &#160; &#160;一个Driver对象，我需要对它进行序列化，Driver对象有一个属性，是一个Car对象，然后Car是一个父类，Tesla(特斯拉)是Car的一个子类，这个子类有父类没有的一个属性，比如叫\"chargingTime(充电时间)\"\n\n - Driver 类\n\n```java\npublic class Driver {\n  private String name;  //+get set\n  private Car car; //+get set\n}\n\n```\n\n - Car 类\n \n```java\npublic class Car {\n  /**\n   * 品牌\n   */\n  private String brand; //+get set\n}\n```\n\n - Tesla, Car的子类\n\n```java\npublic class Tesla extends Car {\n  /**\n   * 充电时间.\n   */\n  private String chargingTime;  //+get set\n}\n```\n&#160; &#160; &#160; &#160;现在Driver对象下面的Car属性是一个Tesla实例，对这个Driver进行序列化之后，再反序列化，会失败。\n\n - SerializeTest 单测代码\n\n```java\npublic class SerializeTest {\n\n  @Test\n  public void testSerialize() {\n    Tesla tesla = new Tesla();\n    tesla.setBrand(\"Tesla\");\n    tesla.setChargingTime(\"1 day\");\n\n    Driver driver = new Driver();\n    driver.setCar(tesla); //将Car属性值设置为其子类Tesla的实例\n    driver.setName(\"water\");\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    String result = \"\";\n\n    //序列化\n    try {\n      result = objectMapper.writeValueAsString(driver);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    //反序列化\n    try {\n      Driver driver_1 = objectMapper.readValue(result, Driver.class);\n      //希望得到Tesla对象.\n      System.out.printf(driver_1.getCar().getClass().getName());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n}\n\n```\n\n&#160; &#160; &#160; &#160;报错信息是说在Car这个类里面找不到\"chargingTime(充电时间)\"这个属性。\n\n> org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field \"chargingTime\" (Class org.daikaixian.jspider.models.Car), not marked as ignorable\n\n&#160; &#160; &#160; &#160;那么问题来了，这种场景该如何处理了？该如何指定要反序列化的对象(这里的Driver)的某个属性(这里的Car)反序列化成子类(Tesla)而不是类中定义的父类类型(Car).\n\n## Demo Code ##\n&#160; &#160; &#160; &#160;google之后又是在StackOverFlow上找到答案,[点此查看原文][1]\n\n&#160; &#160; &#160; &#160;其实只需要对父类进行一些特殊的注解,就可以轻松解决问题,修改Car类代码如下:\n\n```java\n\n@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,include=JsonTypeInfo.As.PROPERTY, property=\"@type\")\n@JsonSubTypes({\n    @JsonSubTypes.Type(value=Tesla.class, name=\"Tesla\") \n}) //如果有多个子类,可以添加多个,用逗号隔开.\n\npublic class Car {\n  /**\n   * 品牌\n   */\n  private String brand; //+get , set\n}\n\n```\n&#160; &#160; &#160; &#160;\n可能因为Jackson版本不同的原因,如果上述改动还不能解决问题,就再对objectMapper进行一些注册操作,就好了.\n\n```java\n    ...\n    ObjectMapper objectMapper = new ObjectMapper();\n    //对ObjectMapper进行注册操作.\n    objectMapper.registerSubtypes(new NamedType(Tesla.class, \"Tesla\"));\n    String result = \"\";\n    ...\n```\n\n## 总结 ##\n&#160; &#160; &#160; &#160;如果自己编码来实现的话,思路可能差不多:先要知道这个父类有哪些子类,然后将序列化的数据按照这些子类的模板一遍遍的反序列化,成功匹配即可.如果成功匹配多个,可能还要考虑匹配顺序的问题.不过既然Jackson提供了成熟的解决方案,那就学会用吧.\n\n \n \n  [1]: https://stackoverflow.com/questions/10329706/json-deserialization-into-another-class-hierarchy-using-jackson\n","source":"_posts/:2016-02-03-踩坑记-系列-用Jackson解决子类序列化后-反序列化成父类的异常.md","raw":"---\ntitle: '<<踩坑记>>系列--用Jackson解决子类序列化后,反序列化成父类的异常'\ndate: 2016-02-03 18:01:14\ncategories: 踩坑记\ntags:\n - Jackson\n - 序列化 \n - 反序列化\n\n---\n\n## 问题描述 ##\n\n&#160; &#160; &#160; &#160;一个Driver对象，我需要对它进行序列化，Driver对象有一个属性，是一个Car对象，然后Car是一个父类，Tesla(特斯拉)是Car的一个子类，这个子类有父类没有的一个属性，比如叫\"chargingTime(充电时间)\"\n\n - Driver 类\n\n```java\npublic class Driver {\n  private String name;  //+get set\n  private Car car; //+get set\n}\n\n```\n\n - Car 类\n \n```java\npublic class Car {\n  /**\n   * 品牌\n   */\n  private String brand; //+get set\n}\n```\n\n - Tesla, Car的子类\n\n```java\npublic class Tesla extends Car {\n  /**\n   * 充电时间.\n   */\n  private String chargingTime;  //+get set\n}\n```\n&#160; &#160; &#160; &#160;现在Driver对象下面的Car属性是一个Tesla实例，对这个Driver进行序列化之后，再反序列化，会失败。\n\n - SerializeTest 单测代码\n\n```java\npublic class SerializeTest {\n\n  @Test\n  public void testSerialize() {\n    Tesla tesla = new Tesla();\n    tesla.setBrand(\"Tesla\");\n    tesla.setChargingTime(\"1 day\");\n\n    Driver driver = new Driver();\n    driver.setCar(tesla); //将Car属性值设置为其子类Tesla的实例\n    driver.setName(\"water\");\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    String result = \"\";\n\n    //序列化\n    try {\n      result = objectMapper.writeValueAsString(driver);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    //反序列化\n    try {\n      Driver driver_1 = objectMapper.readValue(result, Driver.class);\n      //希望得到Tesla对象.\n      System.out.printf(driver_1.getCar().getClass().getName());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n  \n}\n\n```\n\n&#160; &#160; &#160; &#160;报错信息是说在Car这个类里面找不到\"chargingTime(充电时间)\"这个属性。\n\n> org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field \"chargingTime\" (Class org.daikaixian.jspider.models.Car), not marked as ignorable\n\n&#160; &#160; &#160; &#160;那么问题来了，这种场景该如何处理了？该如何指定要反序列化的对象(这里的Driver)的某个属性(这里的Car)反序列化成子类(Tesla)而不是类中定义的父类类型(Car).\n\n## Demo Code ##\n&#160; &#160; &#160; &#160;google之后又是在StackOverFlow上找到答案,[点此查看原文][1]\n\n&#160; &#160; &#160; &#160;其实只需要对父类进行一些特殊的注解,就可以轻松解决问题,修改Car类代码如下:\n\n```java\n\n@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,include=JsonTypeInfo.As.PROPERTY, property=\"@type\")\n@JsonSubTypes({\n    @JsonSubTypes.Type(value=Tesla.class, name=\"Tesla\") \n}) //如果有多个子类,可以添加多个,用逗号隔开.\n\npublic class Car {\n  /**\n   * 品牌\n   */\n  private String brand; //+get , set\n}\n\n```\n&#160; &#160; &#160; &#160;\n可能因为Jackson版本不同的原因,如果上述改动还不能解决问题,就再对objectMapper进行一些注册操作,就好了.\n\n```java\n    ...\n    ObjectMapper objectMapper = new ObjectMapper();\n    //对ObjectMapper进行注册操作.\n    objectMapper.registerSubtypes(new NamedType(Tesla.class, \"Tesla\"));\n    String result = \"\";\n    ...\n```\n\n## 总结 ##\n&#160; &#160; &#160; &#160;如果自己编码来实现的话,思路可能差不多:先要知道这个父类有哪些子类,然后将序列化的数据按照这些子类的模板一遍遍的反序列化,成功匹配即可.如果成功匹配多个,可能还要考虑匹配顺序的问题.不过既然Jackson提供了成熟的解决方案,那就学会用吧.\n\n \n \n  [1]: https://stackoverflow.com/questions/10329706/json-deserialization-into-another-class-hierarchy-using-jackson\n","slug":"踩坑记-系列-用Jackson解决子类序列化后-反序列化成父类的异常","published":1,"updated":"2016-06-08T08:18:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabrp001tdbtj4s1q3sou","sticky":0},{"title":"一个写代码的调酒师","date":"2016-01-31T06:23:46.000Z","_content":"\n&#160; &#160; &#160; &#160;在一家叫\"不空\"的酒吧当周末义工接近两个月了.快要过年了,调酒的手艺学得也算小有所成,是时候装一波十三了哈哈哈哈哈哈哈哈.\n\n## 店长##\n\n&#160; &#160; &#160; &#160; 先来说一下酒吧的店长吧:Django,一条与哈士奇,萨摩耶并称\"雪地三傻\"的阿拉斯加.它是老板养的一条狗,据说开酒吧的目的是为了攒够钱送Django回阿拉斯加去拉雪橇...真是个冻人的故事.\n&#160; &#160; &#160; &#160;好多妹子来酒吧都是冲着Django来的,有时候Django不在店里,妹子居然转身就走...\n\n - 想出去玩的Django\n![此处输入图片的描述][1]\n - 生无可恋的Django\n![此处输入图片的描述][2]\n - 傲娇的Django\n![此处输入图片的描述][3]\n - 现在的Django,已经8个月大了.\n![此处输入图片的描述][4]\n - 圣诞节的Django\n![此处输入图片的描述][5] \n\n## 老板娘 ##\n&#160; &#160; &#160; &#160;老板就略过不说了,不过老板娘不能略过,废话不多说,上图.\n\n![此处输入图片的描述][6]\n\n![此处输入图片的描述][7]\n\n![此处输入图片的描述][8]\n\n![此处输入图片的描述][9]\n\n&#160; &#160; &#160; &#160;咳咳,上一张不要看太久.\n\n## 驻唱 ##\n&#160; &#160; &#160; &#160;酒吧面积其实算比较小的,不过驻唱肯定还是不能少的呀.每周五会是一个喜欢唱Jazz的妹子来坐镇.周六和周天是一个复旦大一的男生,喜欢唱民谣.\n\n![此处输入图片的描述][10]\n\n&#160; &#160; &#160; &#160;这个妹子唱英文歌的话Jazz风格会多一点,中文歌的话,她会比较喜欢唱王菲,唱蔡健雅,唱王若琳.都是我的菜哈哈哈哈.\n![此处输入图片的描述][11]\n \n&#160; &#160; &#160; &#160;男生的话就不露脸了...他比较喜欢唱宋冬野,唱老狼,唱马頔,唱李健.属于清吧的标配类型.\n![此处输入图片的描述][12]\n\n## 我和酒##\n\n&#160; &#160; &#160; &#160;店里的首席调酒师调出来的水母\n![此处输入图片的描述][13]\n\n![此处输入图片的描述][14]\n\n![此处输入图片的描述][15]\n\n&#160; &#160; &#160; &#160;我调出来的水母.....\n\n![此处输入图片的描述][16]\n\n&#160; &#160; &#160; &#160;调Cinderella(灰姑娘),摇壶摇起来才有调酒师的感觉.\n\n![此处输入图片的描述][17]\n\n![此处输入图片的描述][18]\n\n![此处输入图片的描述][19]\n\n&#160; &#160; &#160; &#160;其实按道理讲我是不应该在Cinderella里面加红石榴糖浆的,不过调出来还是蛮好看的哈哈哈哈哈.\n\n## 广告时间 ##\n&#160; &#160; &#160; &#160;下面这些图是酒吧的内景:\n\n![此处输入图片的描述][20]\n\n![此处输入图片的描述][21]\n\n![此处输入图片的描述][22]\n\n&#160; &#160; &#160; &#160;酒吧就坐落在杨浦区大学路33号楼202室.喜欢喝酒听歌的朋友欢迎周末来玩~\n\n\n----------\n\n&#160; &#160; &#160; &#160;之前请几个朋友到店里坐过,一般都会问我为什么会想去酒吧做义工.小的原因有很多,比如喜欢喝酒喜欢听歌,比如周末比较空比如想多见些人多交些有意思的朋友,再比如有妹子觉得我当程序员会变得太闷劝我转行...概括起来说的话,我就是这么个闲不住又对生活比较有激情的人,希望自己的人生能经历更多,我的确很喜欢写代码,但是程序员也只是我的一份很喜欢的工作,而不能定义我生活的全部.现在我是一个职业程序员,业余调酒师,不知道明年我又会给自己打上什么样的标签.我很期待.\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/django1.jpeg\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/django2.jpeg \n  [3]: http://7xsrzn.com1.z0.glb.clouddn.com/django3.jpeg\n  [4]: http://7xsrzn.com1.z0.glb.clouddn.com/django4.jpeg\n  [5]: http://7xsrzn.com1.z0.glb.clouddn.com/django5.jpeg \n  [6]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife1.jpeg\n  [7]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife2.jpeg \n  [8]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife3.jpeg \n  [9]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife4.jpeg \n  [10]: http://7xsrzn.com1.z0.glb.clouddn.com/singer1.jpeg\n  [11]: http://7xsrzn.com1.z0.glb.clouddn.com/singer2.jpeg\n  [12]: http://7xsrzn.com1.z0.glb.clouddn.com/singer3.jpeg\n  [13]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish1.jpeg\n  [14]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish2.jpeg \n  [15]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish3.jpeg\n  [16]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish4.jpeg\n  [17]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish5.jpeg\n  [18]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish6.jpeg\n  [19]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish7.jpeg\n  [20]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish8.jpeg\n  [21]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish9.jpeg\n  [22]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish10.jpeg\n","source":"_posts/:2016-01-31-一个写代码的调酒师.md","raw":"---\ntitle: 一个写代码的调酒师\ndate: 2016-01-31 14:23:46\ntags: 调酒师 \ncategories: 业余生活\n\n---\n\n&#160; &#160; &#160; &#160;在一家叫\"不空\"的酒吧当周末义工接近两个月了.快要过年了,调酒的手艺学得也算小有所成,是时候装一波十三了哈哈哈哈哈哈哈哈.\n\n## 店长##\n\n&#160; &#160; &#160; &#160; 先来说一下酒吧的店长吧:Django,一条与哈士奇,萨摩耶并称\"雪地三傻\"的阿拉斯加.它是老板养的一条狗,据说开酒吧的目的是为了攒够钱送Django回阿拉斯加去拉雪橇...真是个冻人的故事.\n&#160; &#160; &#160; &#160;好多妹子来酒吧都是冲着Django来的,有时候Django不在店里,妹子居然转身就走...\n\n - 想出去玩的Django\n![此处输入图片的描述][1]\n - 生无可恋的Django\n![此处输入图片的描述][2]\n - 傲娇的Django\n![此处输入图片的描述][3]\n - 现在的Django,已经8个月大了.\n![此处输入图片的描述][4]\n - 圣诞节的Django\n![此处输入图片的描述][5] \n\n## 老板娘 ##\n&#160; &#160; &#160; &#160;老板就略过不说了,不过老板娘不能略过,废话不多说,上图.\n\n![此处输入图片的描述][6]\n\n![此处输入图片的描述][7]\n\n![此处输入图片的描述][8]\n\n![此处输入图片的描述][9]\n\n&#160; &#160; &#160; &#160;咳咳,上一张不要看太久.\n\n## 驻唱 ##\n&#160; &#160; &#160; &#160;酒吧面积其实算比较小的,不过驻唱肯定还是不能少的呀.每周五会是一个喜欢唱Jazz的妹子来坐镇.周六和周天是一个复旦大一的男生,喜欢唱民谣.\n\n![此处输入图片的描述][10]\n\n&#160; &#160; &#160; &#160;这个妹子唱英文歌的话Jazz风格会多一点,中文歌的话,她会比较喜欢唱王菲,唱蔡健雅,唱王若琳.都是我的菜哈哈哈哈.\n![此处输入图片的描述][11]\n \n&#160; &#160; &#160; &#160;男生的话就不露脸了...他比较喜欢唱宋冬野,唱老狼,唱马頔,唱李健.属于清吧的标配类型.\n![此处输入图片的描述][12]\n\n## 我和酒##\n\n&#160; &#160; &#160; &#160;店里的首席调酒师调出来的水母\n![此处输入图片的描述][13]\n\n![此处输入图片的描述][14]\n\n![此处输入图片的描述][15]\n\n&#160; &#160; &#160; &#160;我调出来的水母.....\n\n![此处输入图片的描述][16]\n\n&#160; &#160; &#160; &#160;调Cinderella(灰姑娘),摇壶摇起来才有调酒师的感觉.\n\n![此处输入图片的描述][17]\n\n![此处输入图片的描述][18]\n\n![此处输入图片的描述][19]\n\n&#160; &#160; &#160; &#160;其实按道理讲我是不应该在Cinderella里面加红石榴糖浆的,不过调出来还是蛮好看的哈哈哈哈哈.\n\n## 广告时间 ##\n&#160; &#160; &#160; &#160;下面这些图是酒吧的内景:\n\n![此处输入图片的描述][20]\n\n![此处输入图片的描述][21]\n\n![此处输入图片的描述][22]\n\n&#160; &#160; &#160; &#160;酒吧就坐落在杨浦区大学路33号楼202室.喜欢喝酒听歌的朋友欢迎周末来玩~\n\n\n----------\n\n&#160; &#160; &#160; &#160;之前请几个朋友到店里坐过,一般都会问我为什么会想去酒吧做义工.小的原因有很多,比如喜欢喝酒喜欢听歌,比如周末比较空比如想多见些人多交些有意思的朋友,再比如有妹子觉得我当程序员会变得太闷劝我转行...概括起来说的话,我就是这么个闲不住又对生活比较有激情的人,希望自己的人生能经历更多,我的确很喜欢写代码,但是程序员也只是我的一份很喜欢的工作,而不能定义我生活的全部.现在我是一个职业程序员,业余调酒师,不知道明年我又会给自己打上什么样的标签.我很期待.\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/django1.jpeg\n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/django2.jpeg \n  [3]: http://7xsrzn.com1.z0.glb.clouddn.com/django3.jpeg\n  [4]: http://7xsrzn.com1.z0.glb.clouddn.com/django4.jpeg\n  [5]: http://7xsrzn.com1.z0.glb.clouddn.com/django5.jpeg \n  [6]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife1.jpeg\n  [7]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife2.jpeg \n  [8]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife3.jpeg \n  [9]: http://7xsrzn.com1.z0.glb.clouddn.com/bosswife4.jpeg \n  [10]: http://7xsrzn.com1.z0.glb.clouddn.com/singer1.jpeg\n  [11]: http://7xsrzn.com1.z0.glb.clouddn.com/singer2.jpeg\n  [12]: http://7xsrzn.com1.z0.glb.clouddn.com/singer3.jpeg\n  [13]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish1.jpeg\n  [14]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish2.jpeg \n  [15]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish3.jpeg\n  [16]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish4.jpeg\n  [17]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish5.jpeg\n  [18]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish6.jpeg\n  [19]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish7.jpeg\n  [20]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish8.jpeg\n  [21]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish9.jpeg\n  [22]: http://7xsrzn.com1.z0.glb.clouddn.com/jellyfish10.jpeg\n","slug":"一个写代码的调酒师","published":1,"updated":"2016-04-09T05:06:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabru0022dbtj8k9qvc97","sticky":0},{"title":"<<踩坑记>>系列--Guava Lists.transform","date":"2016-01-30T06:06:14.000Z","_content":"\n&#160; &#160; &#160; &#160;在工作中,有些场景会需要将一种Object类型的List数据转换成另一种Object类型的数据.比如做爬虫时,希望将爬到的数据换一种领域模型保存到自己的数据库里面去,这个过程中会涉及到一个循环转换的步骤.前两天我就在这个步骤上踩了一个坑,所以趁周末有空特地撰文以记之,让这个坑踩得值一点.\n\n----------\n\n## 问题抽象##\n\n&#160; &#160; &#160; &#160; 现有两个POJO,PersonDO和PersonDTO.目标是将一个personDOList转换成personDTOList,并设置personDTOList中的每个person的age值为30.\n\n- PersonDO:\n\n```java\npublic class PersonDO {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```\n\n- PersonDTO:\n\n```java\npublic class PersonDTO {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n```\n\n## 编码实践##\n```java\nimport com.google.common.base.Function;\nimport com.google.common.collect.Lists;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConverterTest {\n\n  private  List<PersonDO> personDOs = new ArrayList<>();\n\n  @Before\n  public void mockData() {\n    // 准备数据\n    PersonDO one = new PersonDO();\n    one.setName(\"one\");\n    one.setAge(18);\n    PersonDO two = new PersonDO();\n    two.setName(\"two\");\n    two.setAge(20);\n\n    personDOs.add(one);\n    personDOs.add(two);\n  }\n\n  @Test\n  public void testToDTO() throws Exception {\n    //将DO转换成DTO\n\n    //普通青年这样写\n    List<PersonDTO> dtoList_1 = new ArrayList<>();\n    for (PersonDO personDO : personDOs) {\n      PersonDTO dto = toDTO(personDO);\n      dtoList_1.add(dto);\n    }\n\n    //2B青年这样写\n    List<PersonDTO> dtoList_2 = new ArrayList<>();\n    for (int i = 0; i < personDOs.size(); i++ ) {\n      PersonDTO dto = toDTO(personDOs.get(i));\n      dtoList_2.add(dto);\n    }\n\n    //文艺青年这样写\n    //用guava的Lists.transform()转换成DTO\n    List<PersonDTO> dtoList_3 = new ArrayList<>();\n    dtoList_3 = Lists.transform(personDOs, new Function<PersonDO, PersonDTO>() {\n      @Override\n      public PersonDTO apply(PersonDO input) {\n        return toDTO(input);\n      }\n    });\n\n    //修改age属性\n    for (PersonDTO dto : dtoList_1) {\n      dto.setAge(30);\n    }\n    for (PersonDTO dto : dtoList_2) {\n      dto.setAge(30);\n    }\n    for(PersonDTO dto : dtoList_3) {\n      dto.setAge(30);\n    }\n\n    //打印结果\n    System.out.println(\"********普通青年的结果**************\");\n    printTheRelult(dtoList_1);\n    System.out.println(\"********2B青年的结果***************\");\n    printTheRelult(dtoList_2);\n    System.out.println(\"********文艺青年的结果**************\");\n    printTheRelult(dtoList_3);\n  }\n\n  private void printTheRelult(List<PersonDTO> dtoList) {\n    for (PersonDTO personDTO : dtoList) {\n      System.out.println(personDTO.getName() + \" is \" + personDTO.getAge() + \" years old.\");\n    }\n  }\n\n  private PersonDTO toDTO(PersonDO personDO) {\n    PersonDTO ret = new PersonDTO();\n    //这里简单get,set一下,当然也可以使用ObjectMapper.map()\n    ret.setName(personDO.getName());\n    ret.setAge(personDO.getAge());\n    return ret;\n  }\n}\n\n```\n&#160; &#160; &#160; &#160;运行测试用例,结果却是这样的:\n![此处输入图片的描述][1]\n&#160; &#160; &#160; &#160;显然,对经过Lists.transform操作之后得到dtoList_3的setAge()操作并没有生效.刚发现这个问题的时候很诧异,于是debug.这一步找到病因.\n```java\nfor(PersonDTO dto : dtoList_3) {\n      dto.setAge(30);\n}\n\n```\n\n&#160; &#160; &#160; &#160;仔细看debug信息,dtoList_3在经过Lists.transform操作之后已经不是我在初始化时指定的ArrayList类型了,而是TransformingRandomAccessList.而且,特别注意,dto的地址编号是659,而dtoList_3中的两个对象的地址编号分别是672和673.这说明,循环的过程中拿到的对象,不是dtoList_3中的对象.瞬间感觉重温了大一学C语言的时候,值传递还是引用传递的问题.\n![此处输入图片的描述][2]\n\n&#160; &#160; &#160; &#160;再跟进去就太细节了,于是我想起回头来看API文档:\n```java\n  /**\n   * Returns a list that applies {@code function} to each element of {@code\n   * fromList}. The returned list is a transformed view of {@code fromList};\n   * changes to {@code fromList} will be reflected in the returned list and vice\n   * versa.\n   *\n   * <p>Since functions are not reversible, the transform is one-way and new\n   * items cannot be stored in the returned list. The {@code add},\n   * {@code addAll} and {@code set} methods are unsupported in the returned\n   * list.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary\n   * for the returned list to be a view, but it means that the function will be\n   * applied many times for bulk operations like {@link List#contains} and\n   * {@link List#hashCode}. For this to perform well, {@code function} should be\n   * fast. To avoid lazy evaluation when the returned list doesn't need to be a\n   * view, copy the returned list into a new list of your choosing.\n   *\n   * <p>If {@code fromList} implements {@link RandomAccess}, so will the\n   * returned list. The returned list is threadsafe if the supplied list and\n   * function are.\n   *\n   * <p>If only a {@code Collection} or {@code Iterable} input is available, use\n   * {@link Collections2#transform} or {@link Iterables#transform}.\n   *\n   * <p><b>Note:</b> serializing the returned list is implemented by serializing\n   * {@code fromList}, its contents, and {@code function} -- <i>not</i> by\n   * serializing the transformed values. This can lead to surprising behavior,\n   * so serializing the returned list is <b>not recommended</b>. Instead,\n   * copy the list using {@link ImmutableList#copyOf(Collection)} (for example),\n   * then serialize the copy. Other methods similar to this do not implement\n   * serialization at all for this reason.\n   */\n  public static <F, T> List<T> transform(\n      List<F> fromList, Function<? super F, ? extends T> function) {\n    return (fromList instanceof RandomAccess)\n        ? new TransformingRandomAccessList<F, T>(fromList, function)\n        : new TransformingSequentialList<F, T>(fromList, function);\n  }\n\n\n```\n\n\n&#160; &#160; &#160; &#160;这里有一段解释了我碰到的问题:\n```java\n* <p>The function is applied lazily, invoked when needed. This is necessary\n   * for the returned list to be a view, but it means that the function will be\n   * applied many times for bulk operations like {@link List#contains} and\n   * {@link List#hashCode}. For this to perform well, {@code function} should be\n   * fast. To avoid lazy evaluation when the returned list doesn't need to be a\n   * view, copy the returned list into a new list of your choosing.\n```\n&#160; &#160; &#160; &#160;大致的意思是说,返回给我的List是一个只读的视图(view),有点像数据库里面的视图(View)和表(Base Table)之间的那种关系.我可以对它进行读操作,但是写操作是无效的.而这个function是applied lazily的,这个概念又有点像Hibernate里面的懒加载,只有在它需要被用的到时候才会调用.那到底什么时候这个方法会被调用到了?\n```java\n    TransformingRandomAccessList(\n        List<F> fromList, Function<? super F, ? extends T> function) {\n      this.fromList = checkNotNull(fromList);\n      this.function = checkNotNull(function);\n    }\n    @Override public void clear() {\n      fromList.clear();\n    }\n    @Override public T get(int index) {\n      return function.apply(fromList.get(index));\n    }\n```\n  &#160; &#160; &#160; &#160;比如在循环这个List,调用TransformingRandomAccessList这个类的get方法的时候,就会调用apply().再看看我作为Function参数传进去的方法:\n  ```java\n   private PersonDTO toDTO(PersonDO personDO) {\n    PersonDTO ret = new PersonDTO();\n    //这里简单get,set一下,当然也可以使用ModelMapper.map()\n    ret.setName(personDO.getName());\n    ret.setAge(personDO.getAge());\n    return ret;\n   }\n  ```\n  &#160; &#160; &#160; &#160;确实是每调用一次都会创建一个新的PersonDTO对象!难怪debug的时候发现地址值不一样.\n  &#160; &#160; &#160; &#160;那么如果想用Lists.transform这种方式来code,并且达到相同的目的,应该怎么做了?其实API文档里面也写了:\n  \n\n> To avoid lazy evaluation when the returned list doesn't need to be a\n   view, copy the returned list into a new list of your choosing.\n   \n&#160; &#160; &#160; &#160;那么只需要这样再操作一下,就可以了:\n```java\nList<PersonDTO> dtoList_4 = new ArrayList<>();\ndtoList_4.addAll(dtoList_3);\n```\n&#160; &#160; &#160; &#160;其实API文档中还特别嘱咐了关于序列化的问题.之前有同事也是因为用了这个方法,碰到序列化出错的问题.现在想来,只能叹一句:这玩意不靠谱....\n\n## 总结 ##\n\n&#160; &#160; &#160; &#160;发现原因之后,因为项目要赶进度,所以我果断把文艺青年的写法换成了普通青年的写法.然后代码上线了,同时还fix掉了之前没有被同事发现的bug.\n&#160; &#160; &#160; &#160;但是码了这么长,肯定不是叫大家都老老实实的做一个普通青年,不要装文艺.\n&#160; &#160; &#160; &#160;优雅的编码方式我还是很崇尚的.不过踩了这个坑之后,我会觉得,如果我对一个新的东西并不真的理解,而且我有一套现成且成熟的解决方案能解决碰到的问题时,我会采用相对保守的方式来处理.\n\n&#160; &#160; &#160; &#160;以上.\n\n\n\n\n\n\n\n\n\n\n \n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/debug1.png \n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/debug2.png\n","source":"_posts/:2016-01-30-踩坑记-系列-Guava-Lists-transform.md","raw":"---\ntitle: '<<踩坑记>>系列--Guava Lists.transform'\ndate: 2016-01-30 14:06:14\ntags: Guava\ncategories: 踩坑记\n\n---\n\n&#160; &#160; &#160; &#160;在工作中,有些场景会需要将一种Object类型的List数据转换成另一种Object类型的数据.比如做爬虫时,希望将爬到的数据换一种领域模型保存到自己的数据库里面去,这个过程中会涉及到一个循环转换的步骤.前两天我就在这个步骤上踩了一个坑,所以趁周末有空特地撰文以记之,让这个坑踩得值一点.\n\n----------\n\n## 问题抽象##\n\n&#160; &#160; &#160; &#160; 现有两个POJO,PersonDO和PersonDTO.目标是将一个personDOList转换成personDTOList,并设置personDTOList中的每个person的age值为30.\n\n- PersonDO:\n\n```java\npublic class PersonDO {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```\n\n- PersonDTO:\n\n```java\npublic class PersonDTO {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n```\n\n## 编码实践##\n```java\nimport com.google.common.base.Function;\nimport com.google.common.collect.Lists;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConverterTest {\n\n  private  List<PersonDO> personDOs = new ArrayList<>();\n\n  @Before\n  public void mockData() {\n    // 准备数据\n    PersonDO one = new PersonDO();\n    one.setName(\"one\");\n    one.setAge(18);\n    PersonDO two = new PersonDO();\n    two.setName(\"two\");\n    two.setAge(20);\n\n    personDOs.add(one);\n    personDOs.add(two);\n  }\n\n  @Test\n  public void testToDTO() throws Exception {\n    //将DO转换成DTO\n\n    //普通青年这样写\n    List<PersonDTO> dtoList_1 = new ArrayList<>();\n    for (PersonDO personDO : personDOs) {\n      PersonDTO dto = toDTO(personDO);\n      dtoList_1.add(dto);\n    }\n\n    //2B青年这样写\n    List<PersonDTO> dtoList_2 = new ArrayList<>();\n    for (int i = 0; i < personDOs.size(); i++ ) {\n      PersonDTO dto = toDTO(personDOs.get(i));\n      dtoList_2.add(dto);\n    }\n\n    //文艺青年这样写\n    //用guava的Lists.transform()转换成DTO\n    List<PersonDTO> dtoList_3 = new ArrayList<>();\n    dtoList_3 = Lists.transform(personDOs, new Function<PersonDO, PersonDTO>() {\n      @Override\n      public PersonDTO apply(PersonDO input) {\n        return toDTO(input);\n      }\n    });\n\n    //修改age属性\n    for (PersonDTO dto : dtoList_1) {\n      dto.setAge(30);\n    }\n    for (PersonDTO dto : dtoList_2) {\n      dto.setAge(30);\n    }\n    for(PersonDTO dto : dtoList_3) {\n      dto.setAge(30);\n    }\n\n    //打印结果\n    System.out.println(\"********普通青年的结果**************\");\n    printTheRelult(dtoList_1);\n    System.out.println(\"********2B青年的结果***************\");\n    printTheRelult(dtoList_2);\n    System.out.println(\"********文艺青年的结果**************\");\n    printTheRelult(dtoList_3);\n  }\n\n  private void printTheRelult(List<PersonDTO> dtoList) {\n    for (PersonDTO personDTO : dtoList) {\n      System.out.println(personDTO.getName() + \" is \" + personDTO.getAge() + \" years old.\");\n    }\n  }\n\n  private PersonDTO toDTO(PersonDO personDO) {\n    PersonDTO ret = new PersonDTO();\n    //这里简单get,set一下,当然也可以使用ObjectMapper.map()\n    ret.setName(personDO.getName());\n    ret.setAge(personDO.getAge());\n    return ret;\n  }\n}\n\n```\n&#160; &#160; &#160; &#160;运行测试用例,结果却是这样的:\n![此处输入图片的描述][1]\n&#160; &#160; &#160; &#160;显然,对经过Lists.transform操作之后得到dtoList_3的setAge()操作并没有生效.刚发现这个问题的时候很诧异,于是debug.这一步找到病因.\n```java\nfor(PersonDTO dto : dtoList_3) {\n      dto.setAge(30);\n}\n\n```\n\n&#160; &#160; &#160; &#160;仔细看debug信息,dtoList_3在经过Lists.transform操作之后已经不是我在初始化时指定的ArrayList类型了,而是TransformingRandomAccessList.而且,特别注意,dto的地址编号是659,而dtoList_3中的两个对象的地址编号分别是672和673.这说明,循环的过程中拿到的对象,不是dtoList_3中的对象.瞬间感觉重温了大一学C语言的时候,值传递还是引用传递的问题.\n![此处输入图片的描述][2]\n\n&#160; &#160; &#160; &#160;再跟进去就太细节了,于是我想起回头来看API文档:\n```java\n  /**\n   * Returns a list that applies {@code function} to each element of {@code\n   * fromList}. The returned list is a transformed view of {@code fromList};\n   * changes to {@code fromList} will be reflected in the returned list and vice\n   * versa.\n   *\n   * <p>Since functions are not reversible, the transform is one-way and new\n   * items cannot be stored in the returned list. The {@code add},\n   * {@code addAll} and {@code set} methods are unsupported in the returned\n   * list.\n   *\n   * <p>The function is applied lazily, invoked when needed. This is necessary\n   * for the returned list to be a view, but it means that the function will be\n   * applied many times for bulk operations like {@link List#contains} and\n   * {@link List#hashCode}. For this to perform well, {@code function} should be\n   * fast. To avoid lazy evaluation when the returned list doesn't need to be a\n   * view, copy the returned list into a new list of your choosing.\n   *\n   * <p>If {@code fromList} implements {@link RandomAccess}, so will the\n   * returned list. The returned list is threadsafe if the supplied list and\n   * function are.\n   *\n   * <p>If only a {@code Collection} or {@code Iterable} input is available, use\n   * {@link Collections2#transform} or {@link Iterables#transform}.\n   *\n   * <p><b>Note:</b> serializing the returned list is implemented by serializing\n   * {@code fromList}, its contents, and {@code function} -- <i>not</i> by\n   * serializing the transformed values. This can lead to surprising behavior,\n   * so serializing the returned list is <b>not recommended</b>. Instead,\n   * copy the list using {@link ImmutableList#copyOf(Collection)} (for example),\n   * then serialize the copy. Other methods similar to this do not implement\n   * serialization at all for this reason.\n   */\n  public static <F, T> List<T> transform(\n      List<F> fromList, Function<? super F, ? extends T> function) {\n    return (fromList instanceof RandomAccess)\n        ? new TransformingRandomAccessList<F, T>(fromList, function)\n        : new TransformingSequentialList<F, T>(fromList, function);\n  }\n\n\n```\n\n\n&#160; &#160; &#160; &#160;这里有一段解释了我碰到的问题:\n```java\n* <p>The function is applied lazily, invoked when needed. This is necessary\n   * for the returned list to be a view, but it means that the function will be\n   * applied many times for bulk operations like {@link List#contains} and\n   * {@link List#hashCode}. For this to perform well, {@code function} should be\n   * fast. To avoid lazy evaluation when the returned list doesn't need to be a\n   * view, copy the returned list into a new list of your choosing.\n```\n&#160; &#160; &#160; &#160;大致的意思是说,返回给我的List是一个只读的视图(view),有点像数据库里面的视图(View)和表(Base Table)之间的那种关系.我可以对它进行读操作,但是写操作是无效的.而这个function是applied lazily的,这个概念又有点像Hibernate里面的懒加载,只有在它需要被用的到时候才会调用.那到底什么时候这个方法会被调用到了?\n```java\n    TransformingRandomAccessList(\n        List<F> fromList, Function<? super F, ? extends T> function) {\n      this.fromList = checkNotNull(fromList);\n      this.function = checkNotNull(function);\n    }\n    @Override public void clear() {\n      fromList.clear();\n    }\n    @Override public T get(int index) {\n      return function.apply(fromList.get(index));\n    }\n```\n  &#160; &#160; &#160; &#160;比如在循环这个List,调用TransformingRandomAccessList这个类的get方法的时候,就会调用apply().再看看我作为Function参数传进去的方法:\n  ```java\n   private PersonDTO toDTO(PersonDO personDO) {\n    PersonDTO ret = new PersonDTO();\n    //这里简单get,set一下,当然也可以使用ModelMapper.map()\n    ret.setName(personDO.getName());\n    ret.setAge(personDO.getAge());\n    return ret;\n   }\n  ```\n  &#160; &#160; &#160; &#160;确实是每调用一次都会创建一个新的PersonDTO对象!难怪debug的时候发现地址值不一样.\n  &#160; &#160; &#160; &#160;那么如果想用Lists.transform这种方式来code,并且达到相同的目的,应该怎么做了?其实API文档里面也写了:\n  \n\n> To avoid lazy evaluation when the returned list doesn't need to be a\n   view, copy the returned list into a new list of your choosing.\n   \n&#160; &#160; &#160; &#160;那么只需要这样再操作一下,就可以了:\n```java\nList<PersonDTO> dtoList_4 = new ArrayList<>();\ndtoList_4.addAll(dtoList_3);\n```\n&#160; &#160; &#160; &#160;其实API文档中还特别嘱咐了关于序列化的问题.之前有同事也是因为用了这个方法,碰到序列化出错的问题.现在想来,只能叹一句:这玩意不靠谱....\n\n## 总结 ##\n\n&#160; &#160; &#160; &#160;发现原因之后,因为项目要赶进度,所以我果断把文艺青年的写法换成了普通青年的写法.然后代码上线了,同时还fix掉了之前没有被同事发现的bug.\n&#160; &#160; &#160; &#160;但是码了这么长,肯定不是叫大家都老老实实的做一个普通青年,不要装文艺.\n&#160; &#160; &#160; &#160;优雅的编码方式我还是很崇尚的.不过踩了这个坑之后,我会觉得,如果我对一个新的东西并不真的理解,而且我有一套现成且成熟的解决方案能解决碰到的问题时,我会采用相对保守的方式来处理.\n\n&#160; &#160; &#160; &#160;以上.\n\n\n\n\n\n\n\n\n\n\n \n\n\n  [1]: http://7xsrzn.com1.z0.glb.clouddn.com/debug1.png \n  [2]: http://7xsrzn.com1.z0.glb.clouddn.com/debug2.png\n","slug":"踩坑记-系列-Guava-Lists-transform","published":1,"updated":"2016-06-08T08:18:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabry0027dbtj8f3smpfg","sticky":0},{"title":"再见，2015","date":"2015-12-31T10:29:04.000Z","_content":"\n&#160; &#160; &#160; &#160;还有几个小时2015就要结束了。早上发了条朋友圈，感叹了一下2015.\n\n> Life is bz, sometimes tired, sometimes really tired. 2015,你先走,我还有点事。\n\n&#160; &#160; &#160; &#160;之前几年一直都是和室友在宿舍煮火锅喝啤酒一起跨年，今年看来要一个人倒数了。不过生活总要向前，既然出来工作了，这种变化也是难以避免的。出来混整整半年了，2015是满满的充实的一整年，但也很疲惫。回头总结一下，也算给这位朋友践个行。\n\n### 校园RMB\n&#160; &#160; &#160; &#160;自己牵头的一个项目从去年9月做到了今年5月底的样子，全情投入，收获也颇丰，买了域名备了案，发了传单做地推，见了风投没要钱，遭遇黑帽，打了攻防。做这个项目认识了好些人，开了眼界也交了些朋友。不过最终还是以失败收尾，用户停在了500+。坦然接受，失败的原因我清清楚楚：需要成长。所以迫不及待，6月不到就奔到上海来找工作了。\n\n### 私活\n&#160; &#160; &#160; &#160;从去年开始接一点私活，今年算是接的还比较多。第一笔是帮一个财大的博士生妹子做她的毕业论文程序实现，一天解决战斗，拿了1k.不过这个是14年的交易，15年的时候了她还找过我，那次工期有点长，不过拿了3.5k,算一笔大单了。再之后，作为项目经理帮学校做学生信息管理系统，做了两月，工资应该也是有4k的样子，妈的学校非得按勤工助学的方式发，一个月最多500，寒暑假还不发。所以操蛋的直到现在才给我发了一半的工资，后面那一半不知道什么时候能结清。一个人在上海，好多次经济危机，如果能有学校欠我的那点钱，可能就摆平了，最后只能得出结论：不要跟学校做生意。再之后了，在知乎上认识了一个业务方，3天时间满足其需求，拿了1.8k.轻轻松松爽爽快快。拿钱之后给老姐秒了一部MX5,算是感谢她在我遭遇经济危机时请我吃了鸡公煲的恩泽。再后来，技术不断长进，帮公司刷了两次投票之后，发现自己可以做的还是蛮多的，所以在朋友圈里接私活。朋友帮忙介绍了一笔500的单子，本来活是很轻松，但是时间跨度有点长，耗了近半个月。这一单算感觉比较亏的。以后应该还会接一些私活，不过2015就这样了。\n\n### 堆糖\n&#160; &#160; &#160; &#160;6.1到上海，6.3正式入职。到今天正好半年了。收获是很多，在堆糖实习是一件蛮开心的事，技术上的成长达到了自己的预期，超出预期的是交到一些有意思的朋友，学会了打桌上足球，学会玩狼人杀，喜欢上了羽毛球。也有些意料之外的遭遇，比如房子被公安局的人抡锤子给砸了，保研一共6个名额而我恰巧排第7，从小到大第一次给自己买的adidas的滑板鞋，晒在阳台上居然被人给偷走了。奥，说到被偷，大学的第三辆自行车也在堆糖楼下被偷了，亏我还托朋友从学习开车把自行车拖到杭州城站然后托运到上海，再从上海南站骑到中远两湾城。\n\n### 经济独立\n&#160; &#160; &#160; &#160;这应该是自己今年做的最满意的一件事，从3月份最后拿了家里给的3000块钱之后，再也没向家里要过一分钱。除了接私活赚的钱之外，奖学金也帮了一些忙。不过刚来上海的第一个月还是靠朋友帮了不少忙。谢谢老九，谢谢大嫂，谢谢老乡，谢谢老姐。fuck欠我工资的学校。经济上缓过来之后，国庆自己买机票飞到天津去浪了一圈，给自己买kindle,双十一花了1k+又买了10多个包裹，其中就包括那双自己很喜欢的adidas滑板鞋。周末可以经常请老姐吃饭看电影，过年回家和返程的动车高铁票也一手包办。奥对了，还有大四的学费，拖欠了3个多月之后终于也靠奖学金和工资自己给交上了。满意，满意。\n\n### 上海，杭州\n&#160; &#160; &#160; &#160;因为实习的缘故，学校里面偶尔又有些事要处理，这半年光往返杭州和上海就跑了8趟。其中还有两趟是单日折返跑，蛮累的。这两座城市对我而言都算比较熟悉了，相信未来这两个城市的关系会更加紧密。but,我确实还是更喜欢上海。所以，毕业了应该会留在上海了。I Do Like ShangHai.\n\n  ----------\n\n\n&#160; &#160; &#160; &#160;还有一些细节一下子想不起来太多，就先这样吧，最先想到的也肯定是对自己产生影响最深刻的。真的没时间好好的送一送2015，还要忙着code,忙着交房租，忙着完成妈妈的嘱托，忙着想办法顺利毕业。各种忙，都靠自己动手解决，也许生存的压力会把生活压榨的少了一些诗意，但这就是我的2015，靠自己，过自己想要的生活。\n\n&#160; &#160; &#160; &#160;再见，2015，我会好好对你妹妹2016的。\n","source":"_posts/:2015-12-31-再见2015.md","raw":"---\ntitle: 再见，2015\ndate: 2015-12-31 18:29:04\ncategories: Before 2016\ntags: 随笔杂记\n---\n\n&#160; &#160; &#160; &#160;还有几个小时2015就要结束了。早上发了条朋友圈，感叹了一下2015.\n\n> Life is bz, sometimes tired, sometimes really tired. 2015,你先走,我还有点事。\n\n&#160; &#160; &#160; &#160;之前几年一直都是和室友在宿舍煮火锅喝啤酒一起跨年，今年看来要一个人倒数了。不过生活总要向前，既然出来工作了，这种变化也是难以避免的。出来混整整半年了，2015是满满的充实的一整年，但也很疲惫。回头总结一下，也算给这位朋友践个行。\n\n### 校园RMB\n&#160; &#160; &#160; &#160;自己牵头的一个项目从去年9月做到了今年5月底的样子，全情投入，收获也颇丰，买了域名备了案，发了传单做地推，见了风投没要钱，遭遇黑帽，打了攻防。做这个项目认识了好些人，开了眼界也交了些朋友。不过最终还是以失败收尾，用户停在了500+。坦然接受，失败的原因我清清楚楚：需要成长。所以迫不及待，6月不到就奔到上海来找工作了。\n\n### 私活\n&#160; &#160; &#160; &#160;从去年开始接一点私活，今年算是接的还比较多。第一笔是帮一个财大的博士生妹子做她的毕业论文程序实现，一天解决战斗，拿了1k.不过这个是14年的交易，15年的时候了她还找过我，那次工期有点长，不过拿了3.5k,算一笔大单了。再之后，作为项目经理帮学校做学生信息管理系统，做了两月，工资应该也是有4k的样子，妈的学校非得按勤工助学的方式发，一个月最多500，寒暑假还不发。所以操蛋的直到现在才给我发了一半的工资，后面那一半不知道什么时候能结清。一个人在上海，好多次经济危机，如果能有学校欠我的那点钱，可能就摆平了，最后只能得出结论：不要跟学校做生意。再之后了，在知乎上认识了一个业务方，3天时间满足其需求，拿了1.8k.轻轻松松爽爽快快。拿钱之后给老姐秒了一部MX5,算是感谢她在我遭遇经济危机时请我吃了鸡公煲的恩泽。再后来，技术不断长进，帮公司刷了两次投票之后，发现自己可以做的还是蛮多的，所以在朋友圈里接私活。朋友帮忙介绍了一笔500的单子，本来活是很轻松，但是时间跨度有点长，耗了近半个月。这一单算感觉比较亏的。以后应该还会接一些私活，不过2015就这样了。\n\n### 堆糖\n&#160; &#160; &#160; &#160;6.1到上海，6.3正式入职。到今天正好半年了。收获是很多，在堆糖实习是一件蛮开心的事，技术上的成长达到了自己的预期，超出预期的是交到一些有意思的朋友，学会了打桌上足球，学会玩狼人杀，喜欢上了羽毛球。也有些意料之外的遭遇，比如房子被公安局的人抡锤子给砸了，保研一共6个名额而我恰巧排第7，从小到大第一次给自己买的adidas的滑板鞋，晒在阳台上居然被人给偷走了。奥，说到被偷，大学的第三辆自行车也在堆糖楼下被偷了，亏我还托朋友从学习开车把自行车拖到杭州城站然后托运到上海，再从上海南站骑到中远两湾城。\n\n### 经济独立\n&#160; &#160; &#160; &#160;这应该是自己今年做的最满意的一件事，从3月份最后拿了家里给的3000块钱之后，再也没向家里要过一分钱。除了接私活赚的钱之外，奖学金也帮了一些忙。不过刚来上海的第一个月还是靠朋友帮了不少忙。谢谢老九，谢谢大嫂，谢谢老乡，谢谢老姐。fuck欠我工资的学校。经济上缓过来之后，国庆自己买机票飞到天津去浪了一圈，给自己买kindle,双十一花了1k+又买了10多个包裹，其中就包括那双自己很喜欢的adidas滑板鞋。周末可以经常请老姐吃饭看电影，过年回家和返程的动车高铁票也一手包办。奥对了，还有大四的学费，拖欠了3个多月之后终于也靠奖学金和工资自己给交上了。满意，满意。\n\n### 上海，杭州\n&#160; &#160; &#160; &#160;因为实习的缘故，学校里面偶尔又有些事要处理，这半年光往返杭州和上海就跑了8趟。其中还有两趟是单日折返跑，蛮累的。这两座城市对我而言都算比较熟悉了，相信未来这两个城市的关系会更加紧密。but,我确实还是更喜欢上海。所以，毕业了应该会留在上海了。I Do Like ShangHai.\n\n  ----------\n\n\n&#160; &#160; &#160; &#160;还有一些细节一下子想不起来太多，就先这样吧，最先想到的也肯定是对自己产生影响最深刻的。真的没时间好好的送一送2015，还要忙着code,忙着交房租，忙着完成妈妈的嘱托，忙着想办法顺利毕业。各种忙，都靠自己动手解决，也许生存的压力会把生活压榨的少了一些诗意，但这就是我的2015，靠自己，过自己想要的生活。\n\n&#160; &#160; &#160; &#160;再见，2015，我会好好对你妹妹2016的。\n","slug":"再见2015","published":1,"updated":"2016-06-08T08:20:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabs1002bdbtj4j0ffgho","sticky":0},{"title":"关于《校园RMB》用户隐私相关问题的声明与致歉信","date":"2015-05-06T05:08:04.000Z","_content":"\n&#160; &#160; &#160; &#160;这是我15年5月份的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;做的第一款互联网产品,碰到了很多问题,也明白了一些东西.留着这篇\"自己打脸\"的文章,主要是为了提醒自己:有些错不要再犯了,但有些仇该记的还是得记住.\n\n----------\n\n&#160; &#160; &#160; &#160;关于《校园RMB》网站用户个人数据的隐私问题，身边一直有同学、朋友甚至老师用各自的方式向我们表达过他们的观点，项目组也因为对这个问题的疏忽和不重视付出了一定的代价从而认识到问题的严重性。所以近期特别围绕这个问题对网站的功能做了增改，也想借发布新功能的机会向各位同学特别说明以下几点，并向已经入驻平台的老用户表示诚挚的歉意。\n\n## 重要声明##\n\n 1. 项目组承诺非经法定原因或用户事先许可，项目组不会将用户数据（密码、联系方式等）透露给除本站合法用户外的任意第三方，也不会将用户数据用于任何的商业买卖等恶劣行径。 \n       \n 2. 关于用户教务网的密码，本站采用MD5方式对其进行加密后存储。最新推出的功能中，用户可以通过点击PC端主界面左上角下拉菜单中的“修改密码”来完成校园RMB账号密码的修改，当然用户也可以修改教务网的密码，以确保个人账号的安全性。\n\n 1. 网站通过用户教务网账号仅获取学生姓名、性别、出生日期、籍贯、学院、专业名称、行政班、当前所在级和联系电话以及账号密码(加密处理后的数据)等共11项基本信息，如果觉得不愿向其他学生用户公开自己的联系方式，可以通过下图所示的开关按钮对联系方式进行加密处理。若不愿意向任何用户公开自己的任何信息，可以通过点击首页左上角的下拉菜单中的“注销账号”按钮将个人账号彻底注销，一经注销，用户在校园人脉邦网产生的所有数据都将被删除。\n\n## 辅助性说明材料 ##\n\n 1. 列表项用户可通过下图中的开关按钮来选择是否对其他用户公开自己的联系方式。\n![图1][2]\n 2. 下图为“修改密码”和“注销账号”功能区，注销后可点击网站首页foot部分的“关于校园人脉邦”链接，会发现入驻人数有减少。如果还不确定是否删除，可通过同学的账号登陆后在人脉检索模块通过姓名直接检索，即可验证。\n![图2][3]\n![图3][4]\n\n 3. 下图是数据库中\"学生表\"的部分字段，其中红色箭头所指部分为加密后的密码，该加密方式解密成本相对其他加密方式都比较高。\n![图4][5]\n\n 4. 关于“注销账号”功能，后台采用的是真删除，而非仅仅改变某个字段的值的伪删除方式。具体删除代码如下：\n```java\n    @Override\n    public void deleteUser(Student me) {\n        HibernateTemplate template = super.getHibernateTemplate();\n        template.setFlushMode(HibernateTemplate.FLUSH_EAGER);\n        template.delete(me);  //删除用户\n    }\n```\n\n&#160; &#160; &#160; &#160;如果对于注销账号功能依然存疑，可以直接与我联系，如果有必要现场演示也是可以的.\n\n## 致歉信 ##\n\n&#160; &#160; &#160; &#160;首先我(软件12A班戴开显)谨代表“校园RMB”项目组向因为入驻了“校园人脉邦”网而受到关于个人隐私泄露等问题困扰的同学以及在不明具体情况就被“骗”进“校园人脉邦”网的同学表示歉意，之前是我们考虑不周做的不好，还请各位同学多多包涵。\n\n&#160; &#160; &#160; &#160;关于“校园人脉邦”这款产品，我们给TA的定位是大学校园版的LinkedIn(领英,职场社交软件)，我们的初心是希望能为同学们打造一个基于实名制的有价值信息共享平台，并提供校园内的人力资源检索功能，方便各位同学在各式各样的竞赛中找符合条件的队友、找心仪的项目等等。可能我们的步子一开始迈得有点大，然后因为我本人有点‘急功近利’的想让用户量迅速增长，采取的引流措施中对于用户隐私协议声明的也不够明显，同时也因自身法律知识欠缺意识薄弱，导致越来越多的关于用户隐私问题的爆发，我本人和项目组都难辞其咎。为此我们认真反思了自己的不当行为，并最终决定上线诸如‘注销账号’等功能来弥补过失。在这里也诚挚的希望同学们念在我们初次做产品，很多地方都想的不够周到和深远，给我们多一点的包涵和宽容，谢谢。\n\n&#160; &#160; &#160; &#160;**PS**：虽然碰到很多问题，项目我们依然打算进行下去。为了在以后的路上不再犯类似的错误，项目组真诚的希望能邀请一位法学专业的小伙伴入伙，教育教育我这个大法盲，也让项目组步入正轨。感兴趣的同学可以通过该链接www.xiaoyuanrmb.com先了解一下我们的项目，有意向入伙的同学可通过发送电子邮件到  waterdkx@163.com  与我联系，最好能附上几句简单的自我介绍，期待你的加入，谢谢。 \n&#160; &#160; &#160; &#160;噢还有，关于我本人嫖娼被抓的传闻，虽然我对生活一直怀着一种求艳遇的心态，但并不打算在国内作案，有机会的话未来想去一次岛国。所以还请各位明察,感激不尽。\n \n\n\n  [1]: http://user.qzone.qq.com/935961250/2\n  [2]: http://img5.duitang.com/uploads/item/201601/24/20160124173458_BSK3R.png\n  [3]: http://img4.duitang.com/uploads/item/201601/24/20160124173514_yG2du.thumb.700_0.png\n  [4]: http://cdn.duitang.com/uploads/item/201601/24/20160124173523_F54Yx.png\n  [5]: http://r.photo.store.qq.com/psb?/V12Ygc7P0WPY9F/HB43v8.ovxzWMJytl6a9G1cKKDaGmKUIdnFOTFsGc.c!/o/dB4AAAAAAAAA&ek=1&kp=1&pt=0&bo=bwI9AG8CPQADACU!&su=195422273&sce=0-12-12&rf=2-9\n","source":"_posts/:2015-05-06-关于《校园RMB》用户隐私相关问题的声明与致歉信.md","raw":"---\ntitle: 关于《校园RMB》用户隐私相关问题的声明与致歉信\ndate: 2015-05-06 13:08:04\ncategories: Before 2016\n\n---\n\n&#160; &#160; &#160; &#160;这是我15年5月份的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;做的第一款互联网产品,碰到了很多问题,也明白了一些东西.留着这篇\"自己打脸\"的文章,主要是为了提醒自己:有些错不要再犯了,但有些仇该记的还是得记住.\n\n----------\n\n&#160; &#160; &#160; &#160;关于《校园RMB》网站用户个人数据的隐私问题，身边一直有同学、朋友甚至老师用各自的方式向我们表达过他们的观点，项目组也因为对这个问题的疏忽和不重视付出了一定的代价从而认识到问题的严重性。所以近期特别围绕这个问题对网站的功能做了增改，也想借发布新功能的机会向各位同学特别说明以下几点，并向已经入驻平台的老用户表示诚挚的歉意。\n\n## 重要声明##\n\n 1. 项目组承诺非经法定原因或用户事先许可，项目组不会将用户数据（密码、联系方式等）透露给除本站合法用户外的任意第三方，也不会将用户数据用于任何的商业买卖等恶劣行径。 \n       \n 2. 关于用户教务网的密码，本站采用MD5方式对其进行加密后存储。最新推出的功能中，用户可以通过点击PC端主界面左上角下拉菜单中的“修改密码”来完成校园RMB账号密码的修改，当然用户也可以修改教务网的密码，以确保个人账号的安全性。\n\n 1. 网站通过用户教务网账号仅获取学生姓名、性别、出生日期、籍贯、学院、专业名称、行政班、当前所在级和联系电话以及账号密码(加密处理后的数据)等共11项基本信息，如果觉得不愿向其他学生用户公开自己的联系方式，可以通过下图所示的开关按钮对联系方式进行加密处理。若不愿意向任何用户公开自己的任何信息，可以通过点击首页左上角的下拉菜单中的“注销账号”按钮将个人账号彻底注销，一经注销，用户在校园人脉邦网产生的所有数据都将被删除。\n\n## 辅助性说明材料 ##\n\n 1. 列表项用户可通过下图中的开关按钮来选择是否对其他用户公开自己的联系方式。\n![图1][2]\n 2. 下图为“修改密码”和“注销账号”功能区，注销后可点击网站首页foot部分的“关于校园人脉邦”链接，会发现入驻人数有减少。如果还不确定是否删除，可通过同学的账号登陆后在人脉检索模块通过姓名直接检索，即可验证。\n![图2][3]\n![图3][4]\n\n 3. 下图是数据库中\"学生表\"的部分字段，其中红色箭头所指部分为加密后的密码，该加密方式解密成本相对其他加密方式都比较高。\n![图4][5]\n\n 4. 关于“注销账号”功能，后台采用的是真删除，而非仅仅改变某个字段的值的伪删除方式。具体删除代码如下：\n```java\n    @Override\n    public void deleteUser(Student me) {\n        HibernateTemplate template = super.getHibernateTemplate();\n        template.setFlushMode(HibernateTemplate.FLUSH_EAGER);\n        template.delete(me);  //删除用户\n    }\n```\n\n&#160; &#160; &#160; &#160;如果对于注销账号功能依然存疑，可以直接与我联系，如果有必要现场演示也是可以的.\n\n## 致歉信 ##\n\n&#160; &#160; &#160; &#160;首先我(软件12A班戴开显)谨代表“校园RMB”项目组向因为入驻了“校园人脉邦”网而受到关于个人隐私泄露等问题困扰的同学以及在不明具体情况就被“骗”进“校园人脉邦”网的同学表示歉意，之前是我们考虑不周做的不好，还请各位同学多多包涵。\n\n&#160; &#160; &#160; &#160;关于“校园人脉邦”这款产品，我们给TA的定位是大学校园版的LinkedIn(领英,职场社交软件)，我们的初心是希望能为同学们打造一个基于实名制的有价值信息共享平台，并提供校园内的人力资源检索功能，方便各位同学在各式各样的竞赛中找符合条件的队友、找心仪的项目等等。可能我们的步子一开始迈得有点大，然后因为我本人有点‘急功近利’的想让用户量迅速增长，采取的引流措施中对于用户隐私协议声明的也不够明显，同时也因自身法律知识欠缺意识薄弱，导致越来越多的关于用户隐私问题的爆发，我本人和项目组都难辞其咎。为此我们认真反思了自己的不当行为，并最终决定上线诸如‘注销账号’等功能来弥补过失。在这里也诚挚的希望同学们念在我们初次做产品，很多地方都想的不够周到和深远，给我们多一点的包涵和宽容，谢谢。\n\n&#160; &#160; &#160; &#160;**PS**：虽然碰到很多问题，项目我们依然打算进行下去。为了在以后的路上不再犯类似的错误，项目组真诚的希望能邀请一位法学专业的小伙伴入伙，教育教育我这个大法盲，也让项目组步入正轨。感兴趣的同学可以通过该链接www.xiaoyuanrmb.com先了解一下我们的项目，有意向入伙的同学可通过发送电子邮件到  waterdkx@163.com  与我联系，最好能附上几句简单的自我介绍，期待你的加入，谢谢。 \n&#160; &#160; &#160; &#160;噢还有，关于我本人嫖娼被抓的传闻，虽然我对生活一直怀着一种求艳遇的心态，但并不打算在国内作案，有机会的话未来想去一次岛国。所以还请各位明察,感激不尽。\n \n\n\n  [1]: http://user.qzone.qq.com/935961250/2\n  [2]: http://img5.duitang.com/uploads/item/201601/24/20160124173458_BSK3R.png\n  [3]: http://img4.duitang.com/uploads/item/201601/24/20160124173514_yG2du.thumb.700_0.png\n  [4]: http://cdn.duitang.com/uploads/item/201601/24/20160124173523_F54Yx.png\n  [5]: http://r.photo.store.qq.com/psb?/V12Ygc7P0WPY9F/HB43v8.ovxzWMJytl6a9G1cKKDaGmKUIdnFOTFsGc.c!/o/dB4AAAAAAAAA&ek=1&kp=1&pt=0&bo=bwI9AG8CPQADACU!&su=195422273&sce=0-12-12&rf=2-9\n","slug":"关于《校园RMB》用户隐私相关问题的声明与致歉信","published":1,"updated":"2016-01-26T03:22:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabs4002fdbtjyjzwzm6v","sticky":0},{"title":"大三和同学生了个儿子","date":"2015-04-13T10:19:04.000Z","_content":"\n&#160; &#160; &#160; &#160;这是我15年4月份的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;当时还在读大三，花了七个多月的时间自己牵头做了一个项目。回头看看，虽然现在这个网站已经下线，域名和服务器都已经被回收了，但这段经历是我大学生活中最激情燃烧的岁月。我希望它不只是个即将被尘封的故事，它应该也是个序言，希望在我的职业生涯里，后面还有很厚很厚的正文。\n\n----------\n\n\n&#160; &#160; &#160; &#160;中午朋友@ヅッ 从武汉打电话过来，给我讲他们学校一个很受学生欢迎的青年老师突然就离世了，医生鉴定为过劳死，孩子才一两岁的样子。几番感叹，然后我跟他讲起前几天那位36岁的清华毕业的IT前辈猝死的事情，也是一番惋惜。之后他突然话锋一转，问我懂他突然来电的意思了没有……原来是来问还活着没 ……\n\n&#160; &#160; &#160; &#160;被他这么一黑也是感触颇深。从去年九月份开始忙自己的一个创业项目，到今天忽的一下已经快七个月了。下午3000张传单到货，之后就要开始正式推了，今天就算给这个产品做一个简单的发布会吧。\n\n&#160; &#160; &#160; &#160;目前这个产品的形式还是一个网站，因为这个东西是一个创意作品，有点新生事物的感觉，所以具体的业务我一句两句也讲不完。感兴趣朋友的可以直接戳进去玩一玩，就大概了解了。\n\n&#160; &#160; &#160; &#160;项目起步是在九月底，当时花了三天攻破关键技术点之后，兴奋的睡不着。也是在夜深人静的时候下定决心要把这个东西做出来。十一长假结束之后，拿着最小的可运行成果，开始在学校的几个技术群里找会iOS开发的队友。QQ联系上之后约在学校图书馆咖啡吧里见了面。当时点了一壶20块钱的茶，两个人边喝边聊了两小时，不止把这位后来的团队\"技术总监\"@信电王跃凯 说动了心，还把自己也弄的激动了一把。\n\n&#160; &#160; &#160; &#160;之后就是长达两个多月的开发期。这期间受到前辈@陈缘 指点，鉴于团队技术能力有限所以暂时放弃移动客户端开发而转战WEB项目，好吧其实就是决定不做App改做网站了。每天大清早六点多爬起来吃完早饭冲到实验室，管门的叔叔有时候还在穿秋裤。晚上实验室要关门了还不肯走，也是被那个大叔天天催。。。无奈之下给他又是递烟又是送水果，甚至还想过过年返校给他带点周黑鸭 。。。妈蛋想专注的敲会代码也是蛮拼的。连着近两个月没有周末、每天睁眼想的都是这个事情。跟朋友交流项目的时候也被泼过冷水，看着强大的竞争对手已经上线的产品也很犹豫要不要继续坚持做，辛亏当时其他的事情不多，不然可能也动摇了。\n\n&#160; &#160; &#160; &#160;第一期上线后，喊了20多个朋友帮忙内测了一下，有给鼓励的也有直言界面丑到看不下去的，但是没想到的是马上就吸引到两位同行入伙。这两个一个是我们班班花@软件钟倩 一个是我们班班草@软件顾孝立。平时我们三就经常组各种饭局，说到饭局又不得不感叹一下，自从入了程序员这一行，体重是不停的飙升。记得大一的时候保持在一百四左右，当时还是校足球队的，经常运动锻炼什么的。后来迷上了代码，再加上做自己最感兴趣的项目，呆在电脑面前根本不想去运动。不运动就算了，还狂吃。结果了，好了，特么的直奔一百七。\n\n&#160; &#160; &#160; &#160;开发组变成4个人之后，整个人也越来越坚定。有时候课都不想上了跑回实验室要解决bug。记得有一回为了解决数据库级联删除的一个bug，从早上7点多弄到九点半，没弄出来，跑去上课，上了半节课受不了了，翘掉回实验室接着弄。12点左右解决掉之后，拍案怒吼一声”艹**，爽”….结果回头发现一个不认识的妹子在那边默默低头吃饭...后来再也没见过她，不知道她是不是因为觉得实验室有个人素质太低，再也不想见到这种人了，所以不来了...\n\n&#160; &#160; &#160; &#160;15年1.7号我们班就放寒假了。不过整个开发组留下来做开发将近一个月的时间之后才陆陆续续回家。前端工程师（班花，不开心被叫美工）看到朋友飞去韩国玩自己要蹲在实验室敲代码也是有点不平衡，不过还是功不可没的给整个网站的UI奠定了基调，这一个月的主要工作也是重构用户界面，完全抛弃之前我写的丑的看不下去的那一套...回家之前去见了风投，一起吃饭的时候根本顾不上吃，拿着笔记本对着他在那边涛涛不绝。可惜关于产品的大方向到今天为止依然还在磨合。\n\n&#160; &#160; &#160; &#160;过年在家里弄阿里云备案的事情，断断续续也花了快一个月。期间开发也是断断续续，SVN的服务器地址都换了两三次。效率极低，也只好等到开学。3.9号那天阿里云备案通过，域名可以访问了。于是几个人又在什么社团群老乡群班级群里喊了好多朋友进来玩，开开心心第一天用户过百。第二天实验室要纳新，跟老师讲好了用我们的网站做报名，算是帮忙拉用户的一种方式。结果晚上六点多收到阿里云的短信说”您的服务器正在遭受DDoS攻击”，然后服务器直接挂掉两个多小时不能访问。老师马上打电话过来问怎么了，结局就是第一笔业务黄了，老师那边果断放弃我的网站换了另一个途径。百思不得其解的是谁在攻击我的服务器，通过拦截的ip地址和他用sql注入时留下的痕迹，确定就是我们计算机学院的学生。当时那个心里窝火，真想把他拉出来推到墨湖里面去。你能想象他连续攻击我服务器3天导致网站不能访问？你能想象阿里云技术客服让我联系网监局？你能想象我打网警电话网警叫我到派出所报案？你能想象派出所说你可以来报案呀但是你损失不超过5000块我们是不给立案的 ？后来换了种解决方式，事情才慢慢过去。\n\n&#160; &#160; &#160; &#160;在忙自己这个项目的时候还兼顾着帮学校学生处做一个勤工俭学管理的系统，有时候工期比较紧，压力也是很大。有天晚上为了赶工偷偷的在实验室一个人通宵了一晚上 ，写着写着累了就直接趴桌上睡了，睡醒了再趁着电脑屏幕的一点蓝光继续写，写到天亮去上课。。。所以回到刚开始朋友的那个电话，仔细想想也有后怕。心里开始有那么个打算30岁之后转去做管理而不做技术了。这里也诚挚的追思一下那位不幸逝世的IT前辈，和朋友的那位青年才俊的老师，祝愿你们的家人能早日振作，希望生活对他们多点补偿。\n\n&#160; &#160; &#160; &#160;好了，这个项目到现在还在进行中，不敢期望他能改变世界也不指望他给我赚什么钱，但还是愿意倾情投入。谁知道当年高三班主任让我们在后黑板上写自己的人生理想，我居然就写了个”编程师”。现在技术依然很菜，都已经被队友骂成lowbee了。暑假也准备出去实习找个技术Leader带带我。这个项目经历，希望会是我未来人生中的一段缩影。明天过后，学校里可能到处都是我们丢的传单，网站可能会因为代码不够健壮被测出各种bug，或者间歇性瘫痪，又或者出现我最不愿看到的无人问津的现象。都接受。自己的儿子自己最疼爱。\n\n\n----------\n\n\nPS：网站地址 http://xiaoyuanrmb.com\n        或者百度搜索： 校园人脉邦 。戳第一条。\n        本网站目前只允许浙江工商大学校友访问，没有账号但是对项目感兴趣的朋友可以私我，我这边有测试账号。\n        如果觉得不错，请帮忙顶一下这个帖子，http://tieba.baidu.com/p/3626509912 让更多的浙江工商大学校友看到并入驻。谢谢。\n\n\n\n![rmb](http://r.photo.store.qq.com/psb?/V12Ygc7P0WPY9F/6t2qIP46z*eRX4*2ZAY1DlcUXr1wcayEXbEipEGA4Dc!/o/dAoAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAJOA54CdgMDAAM!&su=1265676673&sce=0-12-12&rf=2-9)\n\n\n  [1]: http://user.qzone.qq.com/935961250/2\n  [2]: http://cdn.duitang.com/uploads/item/201601/24/20160124165046_yWUBV.png\n","source":"_posts/:2015-04-13-大三和同学生了个儿子.md","raw":"---\ntitle: 大三和同学生了个儿子\ndate: 2015-04-13 18:19:04\ncategories: Before 2016\n\n---\n\n&#160; &#160; &#160; &#160;这是我15年4月份的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;当时还在读大三，花了七个多月的时间自己牵头做了一个项目。回头看看，虽然现在这个网站已经下线，域名和服务器都已经被回收了，但这段经历是我大学生活中最激情燃烧的岁月。我希望它不只是个即将被尘封的故事，它应该也是个序言，希望在我的职业生涯里，后面还有很厚很厚的正文。\n\n----------\n\n\n&#160; &#160; &#160; &#160;中午朋友@ヅッ 从武汉打电话过来，给我讲他们学校一个很受学生欢迎的青年老师突然就离世了，医生鉴定为过劳死，孩子才一两岁的样子。几番感叹，然后我跟他讲起前几天那位36岁的清华毕业的IT前辈猝死的事情，也是一番惋惜。之后他突然话锋一转，问我懂他突然来电的意思了没有……原来是来问还活着没 ……\n\n&#160; &#160; &#160; &#160;被他这么一黑也是感触颇深。从去年九月份开始忙自己的一个创业项目，到今天忽的一下已经快七个月了。下午3000张传单到货，之后就要开始正式推了，今天就算给这个产品做一个简单的发布会吧。\n\n&#160; &#160; &#160; &#160;目前这个产品的形式还是一个网站，因为这个东西是一个创意作品，有点新生事物的感觉，所以具体的业务我一句两句也讲不完。感兴趣朋友的可以直接戳进去玩一玩，就大概了解了。\n\n&#160; &#160; &#160; &#160;项目起步是在九月底，当时花了三天攻破关键技术点之后，兴奋的睡不着。也是在夜深人静的时候下定决心要把这个东西做出来。十一长假结束之后，拿着最小的可运行成果，开始在学校的几个技术群里找会iOS开发的队友。QQ联系上之后约在学校图书馆咖啡吧里见了面。当时点了一壶20块钱的茶，两个人边喝边聊了两小时，不止把这位后来的团队\"技术总监\"@信电王跃凯 说动了心，还把自己也弄的激动了一把。\n\n&#160; &#160; &#160; &#160;之后就是长达两个多月的开发期。这期间受到前辈@陈缘 指点，鉴于团队技术能力有限所以暂时放弃移动客户端开发而转战WEB项目，好吧其实就是决定不做App改做网站了。每天大清早六点多爬起来吃完早饭冲到实验室，管门的叔叔有时候还在穿秋裤。晚上实验室要关门了还不肯走，也是被那个大叔天天催。。。无奈之下给他又是递烟又是送水果，甚至还想过过年返校给他带点周黑鸭 。。。妈蛋想专注的敲会代码也是蛮拼的。连着近两个月没有周末、每天睁眼想的都是这个事情。跟朋友交流项目的时候也被泼过冷水，看着强大的竞争对手已经上线的产品也很犹豫要不要继续坚持做，辛亏当时其他的事情不多，不然可能也动摇了。\n\n&#160; &#160; &#160; &#160;第一期上线后，喊了20多个朋友帮忙内测了一下，有给鼓励的也有直言界面丑到看不下去的，但是没想到的是马上就吸引到两位同行入伙。这两个一个是我们班班花@软件钟倩 一个是我们班班草@软件顾孝立。平时我们三就经常组各种饭局，说到饭局又不得不感叹一下，自从入了程序员这一行，体重是不停的飙升。记得大一的时候保持在一百四左右，当时还是校足球队的，经常运动锻炼什么的。后来迷上了代码，再加上做自己最感兴趣的项目，呆在电脑面前根本不想去运动。不运动就算了，还狂吃。结果了，好了，特么的直奔一百七。\n\n&#160; &#160; &#160; &#160;开发组变成4个人之后，整个人也越来越坚定。有时候课都不想上了跑回实验室要解决bug。记得有一回为了解决数据库级联删除的一个bug，从早上7点多弄到九点半，没弄出来，跑去上课，上了半节课受不了了，翘掉回实验室接着弄。12点左右解决掉之后，拍案怒吼一声”艹**，爽”….结果回头发现一个不认识的妹子在那边默默低头吃饭...后来再也没见过她，不知道她是不是因为觉得实验室有个人素质太低，再也不想见到这种人了，所以不来了...\n\n&#160; &#160; &#160; &#160;15年1.7号我们班就放寒假了。不过整个开发组留下来做开发将近一个月的时间之后才陆陆续续回家。前端工程师（班花，不开心被叫美工）看到朋友飞去韩国玩自己要蹲在实验室敲代码也是有点不平衡，不过还是功不可没的给整个网站的UI奠定了基调，这一个月的主要工作也是重构用户界面，完全抛弃之前我写的丑的看不下去的那一套...回家之前去见了风投，一起吃饭的时候根本顾不上吃，拿着笔记本对着他在那边涛涛不绝。可惜关于产品的大方向到今天为止依然还在磨合。\n\n&#160; &#160; &#160; &#160;过年在家里弄阿里云备案的事情，断断续续也花了快一个月。期间开发也是断断续续，SVN的服务器地址都换了两三次。效率极低，也只好等到开学。3.9号那天阿里云备案通过，域名可以访问了。于是几个人又在什么社团群老乡群班级群里喊了好多朋友进来玩，开开心心第一天用户过百。第二天实验室要纳新，跟老师讲好了用我们的网站做报名，算是帮忙拉用户的一种方式。结果晚上六点多收到阿里云的短信说”您的服务器正在遭受DDoS攻击”，然后服务器直接挂掉两个多小时不能访问。老师马上打电话过来问怎么了，结局就是第一笔业务黄了，老师那边果断放弃我的网站换了另一个途径。百思不得其解的是谁在攻击我的服务器，通过拦截的ip地址和他用sql注入时留下的痕迹，确定就是我们计算机学院的学生。当时那个心里窝火，真想把他拉出来推到墨湖里面去。你能想象他连续攻击我服务器3天导致网站不能访问？你能想象阿里云技术客服让我联系网监局？你能想象我打网警电话网警叫我到派出所报案？你能想象派出所说你可以来报案呀但是你损失不超过5000块我们是不给立案的 ？后来换了种解决方式，事情才慢慢过去。\n\n&#160; &#160; &#160; &#160;在忙自己这个项目的时候还兼顾着帮学校学生处做一个勤工俭学管理的系统，有时候工期比较紧，压力也是很大。有天晚上为了赶工偷偷的在实验室一个人通宵了一晚上 ，写着写着累了就直接趴桌上睡了，睡醒了再趁着电脑屏幕的一点蓝光继续写，写到天亮去上课。。。所以回到刚开始朋友的那个电话，仔细想想也有后怕。心里开始有那么个打算30岁之后转去做管理而不做技术了。这里也诚挚的追思一下那位不幸逝世的IT前辈，和朋友的那位青年才俊的老师，祝愿你们的家人能早日振作，希望生活对他们多点补偿。\n\n&#160; &#160; &#160; &#160;好了，这个项目到现在还在进行中，不敢期望他能改变世界也不指望他给我赚什么钱，但还是愿意倾情投入。谁知道当年高三班主任让我们在后黑板上写自己的人生理想，我居然就写了个”编程师”。现在技术依然很菜，都已经被队友骂成lowbee了。暑假也准备出去实习找个技术Leader带带我。这个项目经历，希望会是我未来人生中的一段缩影。明天过后，学校里可能到处都是我们丢的传单，网站可能会因为代码不够健壮被测出各种bug，或者间歇性瘫痪，又或者出现我最不愿看到的无人问津的现象。都接受。自己的儿子自己最疼爱。\n\n\n----------\n\n\nPS：网站地址 http://xiaoyuanrmb.com\n        或者百度搜索： 校园人脉邦 。戳第一条。\n        本网站目前只允许浙江工商大学校友访问，没有账号但是对项目感兴趣的朋友可以私我，我这边有测试账号。\n        如果觉得不错，请帮忙顶一下这个帖子，http://tieba.baidu.com/p/3626509912 让更多的浙江工商大学校友看到并入驻。谢谢。\n\n\n\n![rmb](http://r.photo.store.qq.com/psb?/V12Ygc7P0WPY9F/6t2qIP46z*eRX4*2ZAY1DlcUXr1wcayEXbEipEGA4Dc!/o/dAoAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAJOA54CdgMDAAM!&su=1265676673&sce=0-12-12&rf=2-9)\n\n\n  [1]: http://user.qzone.qq.com/935961250/2\n  [2]: http://cdn.duitang.com/uploads/item/201601/24/20160124165046_yWUBV.png\n","slug":"大三和同学生了个儿子","published":1,"updated":"2016-06-29T12:53:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabs7002hdbtj7dbpxsgl","sticky":0},{"title":"第一个自己独立开发并发布的软件","date":"2014-09-09T02:23:38.000Z","_content":"\n&#160; &#160; &#160; &#160;这篇博文也是产于14年。[点此查看原文][1]\n&#160; &#160; &#160; &#160;当时比较有空，自己鼓捣出了一个桌面软件，超鸡冻！现在再看觉得有点杀鸡用牛刀了，同样的功能也许curl一下简单方便又高效。而且连API文档都不知道该怎么使用，但是当时做这个东西的热情和执着，还是值得表扬的哈哈哈哈哈哈哈哈。\n\n\n----------\n&#160; &#160; &#160; &#160;9.15号才开学，前几天闲的蛋疼，跟一朋友聊起了“超级课程表”。我一直以为他们是跟每个高校有合作，才能取得各高校的数据库数据。后来百度了一下发现原来他们不是通过这个方式，而是直接用学生输入的用户名和密码来访问各高校的教务网获取课程表之类的相关数据。这样就有一个问题让我很感兴趣，各教务网的验证码系统他们是如何攻破的。然后我又百度了一下验证码的破解与反破解原理，想拿QQ空间的留言板来对比着理解一下，结果意外发现不知道什么时候QQ空间的留言板不再需要输入验证码即可发表留言。。。然后我思绪突然一转就把验证码的事给抛到一边了，想能不能自己写个自动刷QQ空间留言的工具？\n \n&#160; &#160; &#160; &#160;根据自身的知识储备我找到了一条思路，利用SeleniumIDE录制留言过程，然后把脚本转换成Java代码。接着就是一步步的调试和修改，当天晚上6点开始动手，到凌晨两点的时候程序基本跑通，可以实现自动留言，兴奋的一整夜没睡着。但是因为QQ空间留言板的CSS比较复杂，我当天只实现了通过点击表情按钮来实现留言，还无法直接输入任意字符串作为留言内容。\n \n&#160; &#160; &#160; &#160;后来想起来以前见过有人提供刷空间留言服务来赚钱的，于是自己也想尝试一下。加了好多QQ群，像什么初中生群呀，00后群呀，00后富二代群呀。。。刚想到这个点子的那个晚上在群里问了一下，有个孩子跟我说市场很有需求，结果我信了。我想这么晚了，估计他们都睡了，明天再开始宣传吧~然后自己就躺在床上开始YY，心想如果真的有市场，一个孩子我给他刷个几千条赚一百块，一天可以赚好几百，那不是要发财了？越想越兴奋，然后这个晚上又一整夜没睡着。。。接下来的几天我天天给那些小阔少爷阔小姐私聊发广告，可是到头来要么不鸟我，要么问我想表达什么，要么“呵呵”，要么“傻X，我才不上你的当了！！”。。。\n  \n&#160; &#160; &#160; &#160;之后无奈放弃了这个念头，但是不想让这个程序就死在我的MyEclipse IDE里面。所以决定把它做成一款软件。想想之前也有过类似想法，但因为知识储备不足一直没能实现，现在何不尝试一下了。于是又开始码代码。\n\n&#160; &#160; &#160; &#160;改善代码的过程中碰到最棘手的问题就是前文提到的，如何直接输入任意字符串作为留言内容，而不是单一的表情。本来这应该很简单的，用下面这行代码可以解决。\n   \n``` java\n   selenium.type(locator, value);\n```\n&#160; &#160; &#160; &#160;但是这个是针对输入框、复选框、下拉框等才有效的一个函数，QQ空间留言板的那个输入框不是一个input,而是放在一个iframe下面的可编辑的body下面的一个div.所以我尝试了N次都不能实现以字符串作为留言内容的功能，期间一度情绪暴躁。。。\n\n&#160; &#160; &#160; &#160;后来到一个软件测试群里面去请教了一下，慢慢摸索慢慢尝试终于被我踩到狗屎了.\n\n```java\nselenium.selectFrame(\"veditor1_Iframe\");//进入一个iframe\nselenium.runScript(content);//留言内容\n```\n\n&#160; &#160; &#160; &#160;首先得进入那个iframe里面，然后使用selenium.runScript(String script)这个函数就可以达成目的。说实话我也不清楚为什么这个函数可以，也没谁告诉我用这个函数，只是真 的挑了个函数试一下，结果“留言成功”。意外欣喜之情难以言表。。。\n\n&#160; &#160; &#160; &#160;再啰嗦一下这个iframe,按常理来讲Selenium IDE应该能录下我输入文字作为留言内容的这段代码,可是就是这个iframe捣蛋，搞得录出来的代码只有我“点击”发表按钮那一行。\n```java\nselenium.click(\"id=btnPostMsg\");\n```\n&#160; &#160; &#160; &#160;所以我才一步步摸索出，怎么调用Selenium RC的API才能实现以字符串作为留言内容的功能。\n \n&#160; &#160; &#160; &#160;之后的路就相对平坦一点了，用SWING给这个程序套了个又丑又土的GUI壳子，然后整个项目打包成一个Jar文件。然后再用exe4j将其转化成一个.exe文件，但是这样还是不能让这个程序在没有安装JRE的机器上跑，所有又找了个瘦身过的JRE，加上那个Jar文件一起打包成一个.exe文件。这样就终于可以在没有安装的JRE或者JDK的机器上运行了。终于可以一次编译，满世界的跑。\n \n&#160; &#160; &#160; &#160;可是当我把这个程序放到同学的电脑上测试的时候，一秒钟就被360这条狗当成木马病毒给删掉了。我去你大爷。国人的原创积极性就是这样被打消的，狗一样的360。没办法，正好我也想把这个软件搞的正式一点，于是就用Inno Setup给这个程序做了个安装包，这样再重新安装到有360的机器上面，它就一声都不叫了。这样的工作做下来，三天中秋假期基本没怎么休息，全是在操心这事。昨晚上弄好了，又兴奋地一夜睡不着。。。凌晨3点穿个裤衩坐在阳台上点支籣州，想一个魂淡妹子。。。\n\n&#160; &#160; &#160; &#160;下面是本软件1.0.0版的下载地址，百度云盘下载下来如果文件名乱码重命名一下正常解压缩就好。好用的话帮忙转发支持一下，谢谢。\n  \n  [点此下载][2]\n  \n&#160; &#160; &#160; &#160;验证码的事，以后再说吧~~~\n \n\n\n  [1]: http://www.cnblogs.com/aiyokaishuige/p/3962534.html\n  [2]: http://pan.baidu.com/s/1hqqtjW4\n","source":"_posts/:2014-09-09-第一个自己独立开发并发布的软件.md","raw":"---\ntitle: 第一个自己独立开发并发布的软件\ndate: 2014-09-09 10:23:38\ncategories: Before 2016\ntags: Selenium\n---\n\n&#160; &#160; &#160; &#160;这篇博文也是产于14年。[点此查看原文][1]\n&#160; &#160; &#160; &#160;当时比较有空，自己鼓捣出了一个桌面软件，超鸡冻！现在再看觉得有点杀鸡用牛刀了，同样的功能也许curl一下简单方便又高效。而且连API文档都不知道该怎么使用，但是当时做这个东西的热情和执着，还是值得表扬的哈哈哈哈哈哈哈哈。\n\n\n----------\n&#160; &#160; &#160; &#160;9.15号才开学，前几天闲的蛋疼，跟一朋友聊起了“超级课程表”。我一直以为他们是跟每个高校有合作，才能取得各高校的数据库数据。后来百度了一下发现原来他们不是通过这个方式，而是直接用学生输入的用户名和密码来访问各高校的教务网获取课程表之类的相关数据。这样就有一个问题让我很感兴趣，各教务网的验证码系统他们是如何攻破的。然后我又百度了一下验证码的破解与反破解原理，想拿QQ空间的留言板来对比着理解一下，结果意外发现不知道什么时候QQ空间的留言板不再需要输入验证码即可发表留言。。。然后我思绪突然一转就把验证码的事给抛到一边了，想能不能自己写个自动刷QQ空间留言的工具？\n \n&#160; &#160; &#160; &#160;根据自身的知识储备我找到了一条思路，利用SeleniumIDE录制留言过程，然后把脚本转换成Java代码。接着就是一步步的调试和修改，当天晚上6点开始动手，到凌晨两点的时候程序基本跑通，可以实现自动留言，兴奋的一整夜没睡着。但是因为QQ空间留言板的CSS比较复杂，我当天只实现了通过点击表情按钮来实现留言，还无法直接输入任意字符串作为留言内容。\n \n&#160; &#160; &#160; &#160;后来想起来以前见过有人提供刷空间留言服务来赚钱的，于是自己也想尝试一下。加了好多QQ群，像什么初中生群呀，00后群呀，00后富二代群呀。。。刚想到这个点子的那个晚上在群里问了一下，有个孩子跟我说市场很有需求，结果我信了。我想这么晚了，估计他们都睡了，明天再开始宣传吧~然后自己就躺在床上开始YY，心想如果真的有市场，一个孩子我给他刷个几千条赚一百块，一天可以赚好几百，那不是要发财了？越想越兴奋，然后这个晚上又一整夜没睡着。。。接下来的几天我天天给那些小阔少爷阔小姐私聊发广告，可是到头来要么不鸟我，要么问我想表达什么，要么“呵呵”，要么“傻X，我才不上你的当了！！”。。。\n  \n&#160; &#160; &#160; &#160;之后无奈放弃了这个念头，但是不想让这个程序就死在我的MyEclipse IDE里面。所以决定把它做成一款软件。想想之前也有过类似想法，但因为知识储备不足一直没能实现，现在何不尝试一下了。于是又开始码代码。\n\n&#160; &#160; &#160; &#160;改善代码的过程中碰到最棘手的问题就是前文提到的，如何直接输入任意字符串作为留言内容，而不是单一的表情。本来这应该很简单的，用下面这行代码可以解决。\n   \n``` java\n   selenium.type(locator, value);\n```\n&#160; &#160; &#160; &#160;但是这个是针对输入框、复选框、下拉框等才有效的一个函数，QQ空间留言板的那个输入框不是一个input,而是放在一个iframe下面的可编辑的body下面的一个div.所以我尝试了N次都不能实现以字符串作为留言内容的功能，期间一度情绪暴躁。。。\n\n&#160; &#160; &#160; &#160;后来到一个软件测试群里面去请教了一下，慢慢摸索慢慢尝试终于被我踩到狗屎了.\n\n```java\nselenium.selectFrame(\"veditor1_Iframe\");//进入一个iframe\nselenium.runScript(content);//留言内容\n```\n\n&#160; &#160; &#160; &#160;首先得进入那个iframe里面，然后使用selenium.runScript(String script)这个函数就可以达成目的。说实话我也不清楚为什么这个函数可以，也没谁告诉我用这个函数，只是真 的挑了个函数试一下，结果“留言成功”。意外欣喜之情难以言表。。。\n\n&#160; &#160; &#160; &#160;再啰嗦一下这个iframe,按常理来讲Selenium IDE应该能录下我输入文字作为留言内容的这段代码,可是就是这个iframe捣蛋，搞得录出来的代码只有我“点击”发表按钮那一行。\n```java\nselenium.click(\"id=btnPostMsg\");\n```\n&#160; &#160; &#160; &#160;所以我才一步步摸索出，怎么调用Selenium RC的API才能实现以字符串作为留言内容的功能。\n \n&#160; &#160; &#160; &#160;之后的路就相对平坦一点了，用SWING给这个程序套了个又丑又土的GUI壳子，然后整个项目打包成一个Jar文件。然后再用exe4j将其转化成一个.exe文件，但是这样还是不能让这个程序在没有安装JRE的机器上跑，所有又找了个瘦身过的JRE，加上那个Jar文件一起打包成一个.exe文件。这样就终于可以在没有安装的JRE或者JDK的机器上运行了。终于可以一次编译，满世界的跑。\n \n&#160; &#160; &#160; &#160;可是当我把这个程序放到同学的电脑上测试的时候，一秒钟就被360这条狗当成木马病毒给删掉了。我去你大爷。国人的原创积极性就是这样被打消的，狗一样的360。没办法，正好我也想把这个软件搞的正式一点，于是就用Inno Setup给这个程序做了个安装包，这样再重新安装到有360的机器上面，它就一声都不叫了。这样的工作做下来，三天中秋假期基本没怎么休息，全是在操心这事。昨晚上弄好了，又兴奋地一夜睡不着。。。凌晨3点穿个裤衩坐在阳台上点支籣州，想一个魂淡妹子。。。\n\n&#160; &#160; &#160; &#160;下面是本软件1.0.0版的下载地址，百度云盘下载下来如果文件名乱码重命名一下正常解压缩就好。好用的话帮忙转发支持一下，谢谢。\n  \n  [点此下载][2]\n  \n&#160; &#160; &#160; &#160;验证码的事，以后再说吧~~~\n \n\n\n  [1]: http://www.cnblogs.com/aiyokaishuige/p/3962534.html\n  [2]: http://pan.baidu.com/s/1hqqtjW4\n","slug":"第一个自己独立开发并发布的软件","published":1,"updated":"2016-01-13T02:35:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabsa002jdbtjo7qdcwk2","sticky":0},{"title":"第一个JavaWeb项目体验","date":"2014-05-16T13:24:40.000Z","_content":"\n&#160; &#160; &#160; &#160;这是我14年在博客园写的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;很多东西现在看来觉得太小儿科，心智不够成熟，解决问题的思路也有些不恰当，但是毕竟第一个javaweb项目，熬过来不容易。\n&#160; &#160; &#160; &#160;谨以此文，留作纪念。\n\n----------\n\n\n&#160; &#160; &#160; &#160;从四月初到五月十五，一直在忙一个JavaWeb项目。昨天交了主办方规定要交的文档和视频之后，比赛算是暂时告一段落了。身体累其实也不算什么，主要心很累。想写的冲动并不太强烈，只是觉得总该总结一下，过几天估计还得继续忙这个破事，到时候又没时间了，所以还是跑到图书馆带上耳机开始好好总结一下。技术上的，感悟上的都有。\n\n &#160; &#160; &#160; &#160;当时决定参加这个浙江省服务外包大赛的时候其实是信心满满的，还一副有十足把握的样子鼓励队友要自信。结果刚起步不久就被一个SSH框架给卡死。技术不成熟是一方面的原因，毕竟这个学期才开WEB课，而且基本自学。但是程序员不就是讲究一个快速的自学能力吗，自己花了一个多星期，还不能搞懂该如何套着框架写代码，当时是各种自责和心急如焚。越急，越不能静下心来看书或者教学视频。不知道怎么把握团队的方向，只知道到图书馆一摞一摞的书借过来，这本翻一翻那本看一看，感觉都用不上，烦，急，崩溃。\n\n &#160; &#160; &#160; &#160;幸好队伍里面另外一名队友找到突破口了，确定采用SSH2框架，并且能够教其他队友按照那个模式码代码。现在我会坦承是“幸好”，当时的我并不这么想呀。20岁的小伙子，平时就是争强好胜很多方面都不愿输给谁的一个人。当时感觉自己那么拼命的花了那么多时间和精力为什么我搞不出来，为什么。队友弄出来的时候我却想逃，想自己也马上去弄一个出来，至少把原理搞懂不要只按照他说的填代码。可是越这么想我发现自己越痛苦而且越弄不出来。那段时间经常给老姐打电话讲起这个比赛的事，讲起自己不是队伍的一把手怎么怎么不太开心。姐说她整个大学参加过的各种活动各种社团各种比赛中，她通常都是当二把手的，辅助队伍的核心。数学建模国赛美赛均是一等奖，创新立项两个，自己带的编辑部也是充当二把手，现在也保研到复旦金融系了。她还讲团队竞赛的意义不是要在队内竞争证明我比谁强，我偏不听谁的，我偏要当核心，而是要去证明我们这个团队比别的队伍强比别的队伍好比别的队伍更懂团结。这些道理平时要让我说我也会说，但是真的碰上问题了，我还是难改好斗的本性。但好在，我还是强按住了自己的本性，一脸歉意的找那个队友帮我讲解了一下SSH2的跳转映射流程，框架这个坎就算这样迈过去了，我也算调整好心态，当奶妈打辅助。\n\n&#160; &#160; &#160; &#160;之后在一个留言板功能模块，涉及到写入数据库，但是写入之后发现乱码了。没什么经验，所以就百度，百度上主要提供的一个信息就是可能是MySql的统一编码方式没有设好，我用命令行检查了一下：\n\n![photo1](http://images.cnitblog.com/i/602925/201405/161313583121085.jpg)\n\n&#160; &#160; &#160; &#160;发现没问题啊，清一色UTF-8。后来又看到说MySql的编码方式要设置到数据表的字段一级。然后我就把留言那张表的字段一个个的检查了一遍，依然全部是utf-8.之后是各种坑爹的关于配置文件可能出错的说法，要去C盘找my.ini配置文件然后在里面再改编码方式，按照这个东西弄下去我终于成功的把MySql服务弄的不能开启了，OK。绝望的边缘以为要重装MySql了，不过好在胡乱的又把配置文件根据记忆给改了回来，MySql服务正常开启。也是从这里开始事情好像发生转机，我决定根据参数的传递路径来查一下到底是不是数据库编码乱码。没想到直接在Action中将JSP页面传过来的参数打印一下就出现乱码。尼玛问题范围瞬间缩小了。\n```java\nSystem.out.println(Message.getReply());\n```\n&#160; &#160; &#160; &#160;打印出来是这样的：\n![photo2](http://images.cnitblog.com/i/602925/201405/161331573904116.jpg)\n\n&#160; &#160; &#160; &#160;于是又去百度,说这种从JSP传到Action中就乱码的问题可以通过写一个过滤器放在web.xml里面，我百度了一段代码放进去，重启Tomcat，依然不行。又在无意中发现，据说这是struts2-core-2.1.6.jar的一个bug,建议使用struts2-core-2.1.8.jar。尼玛我打开工程的Web App Library文件夹一看果然使用的是struts2-core-2.1.6.jar。正准备换2.1.8试试，又发现某位好心人说有一种简单的解决方式，就是对传过来的字符串先解码，再编码，最后再保存到数据库，代码如下：\n```java\n Message msg=messageService.findByid(Message.getId());  //通过ID找到某条留言。\n String s1=new String(Message.getReply().getBytes(\"ISO8859_1\"), \"UTF8\");  \n//接收从jsp传过来的留言回复字段的值，按照ISO8859_1标准解码，再按照UTF-8标准重新编码，生成新的字符串s1.\n\n msg.setReply(s1);  //将msg的回复字段值设为s1.\n messageService.update(msg);  //更新msg。\n```\n&#160; &#160; &#160; &#160;**按照他说的做了，真的成功了，好开心！**\n\n&#160; &#160; &#160; &#160;乱码的问题解决了，感觉心情好一点了，毕竟困扰了两三天。然后信心回来一点了，于是决定再静下心来把一直想解决的分页查看功能实现一下。还是以留言为例，要实现分页，可以在数据库中取的时候就分页，即为真分页。也可以把数据全部取出来，存在LIST对象中，在JSP页面控制显示，即为假分页。之前在很多诸如《javaweb典型模块与项目实战》等参考书中看到过分页功能的实现，可能是因为采用的框架不同，又或者是我心浮气躁，反正就是感觉用那些书上的代码套不到我们的项目中来，分页始终实现不出来。那天烦躁的不行，一怒之下甩开各种书啊视频什么的，自己写了一个假分页。原理很简单，但是算是自己的原创，不算抄代码，感觉倍儿爽。下面代码奉上:\n```jsp\n<%\n    List<MessageView> list = (List) request.getAttribute(\"messagelist\");  //取得Action中查出来存起来的留言LIST\n    int begin = 0;  //begin代表该页从第几条留言开始显示，初始化为0\n    if (request.getParameter(\"begin\") == null) {\n        begin = 0;\n    } else {\n        begin = Integer.parseInt(request.getParameter(\"begin\"));\n    }\n %>\n    <%    for (int i = begin; i < (((begin + 4)<list.size())?(begin+4):list.size()); i++) {\n   %>//这里4代表每页显示的留言条数，可以自己设置。循环的判断中用到三目预算，主要是针对最后一页，如果最后一页数据少于4条然而依然使用和其他页一样的遍历方式就会报错空指针。\n   留言内容： <%=list.get(i).getContent()%>\n   ...\n   <%}%>\n  \n //下面的代码通过简单的逻辑判断来控制是否显示上一页和下一页的超链接，不做详细解释了，相信能看懂。\n // 其中的超链接跳转的地址是本页面，但是传的参数begin会变化，页面也是根据取到的begin参数来决定从哪一条记录开始显示的。\n\n <%if (begin >= 4) {%>\n <a href=\"messageQuery?begin=<%=begin -4%>\">上一页</a>&nbsp;&nbsp;\n <%}\n if ( begin <= (list.size() - 4)) { %>    \n <a href=\"messageQuery?begin=<%=begin + 4%>\">下一页</a>  \n <%} else{%>\n 已到最后一页\n <%} %><br>\n```\n&#160; &#160; &#160; &#160;虽然很简陋，估计以后也不能用在正规的项目中，但只是想说有些问题如果参看别人的方法感觉搞不出来的话，自己尝试撸一下，说不定就撸出来了。\n\n&#160; &#160; &#160; &#160;好，分页功能实现。转去实现一个订单功能。队友在建数据库的时候很专业的把订单表的表名取为Order,是吧，订单用英语翻译过去就是Order啊！可是尼玛就是这个破Order表坑了我三天，信心和耐心都几乎被磨灭殆尽。其实实现下订单的功能和其他功能一样呀，都是对一张表实现增删改查操作。但是每次一点确定预定，就报错，说:\n```java\ncould not execute query; nested exception is org.hibernate.exception.SQLGrammarException: could not execute query\n```\n&#160; &#160; &#160; &#160;刚开始百度说可能是字段名和MySql关键字冲突了，将信将疑的在这张Order表的所有字段名的前面全部加了\"my_\"前缀，再跑。还是could not execute query、could not execute insert;等等等等。烦死了，找另一个队友说，你来写一遍，不要看我的代码，看看是不是我哪个地方没注意，字段名尼玛都这样了怎么会冲突了，肯定是有其他原因。结果那妹子写了一遍，报了同样的错误，我不知道该说什么了。正当念着Order,Order我草你丫的时候，脑袋转过来了，Order！Order!!!尼玛自己经常用 Order by id desc 语句来实现对查询结果的倒序排列，这个时候没注意，肯定是Order与MySQL关键字冲突了。于是简单粗暴的把这张破Order表的表名改成了Dingdan. D-ing订，D-an单，多好记啊！多好用啊！马上各种query啊，insert啊，delete啊再也不报错了。三天的阴影解除，Fuck.\n\n&#160; &#160; &#160; &#160;还有遇到过一些小问题，大多解决的比较快，这里就不多说了。初赛的作品要刻到光盘上，因为有个破缓存文件捣乱，昨天刻坏了7张盘才成功。队友一起写的60多页的文档用彩纸印刷出来真是高大上，尽管作品本身技术含量不算高，但是毕竟都尽力了。\n&#160; &#160; &#160; &#160;第一篇半随笔半技术博客，希望自己以后能学到更多可以拿出来分享的东西。周末愉快。\n\n\n  [1]: http://www.cnblogs.com/aiyokaishuige/p/3732229.html\n","source":"_posts/:2014-05-16-第一个JavaWeb项目体验.md","raw":"---\ntitle: 第一个JavaWeb项目体验\ndate: 2014-05-16 21:24:40\ncategories: Before 2016\ntags: JavaWeb\n---\n\n&#160; &#160; &#160; &#160;这是我14年在博客园写的一篇博文，[点此查看原文][1]\n&#160; &#160; &#160; &#160;很多东西现在看来觉得太小儿科，心智不够成熟，解决问题的思路也有些不恰当，但是毕竟第一个javaweb项目，熬过来不容易。\n&#160; &#160; &#160; &#160;谨以此文，留作纪念。\n\n----------\n\n\n&#160; &#160; &#160; &#160;从四月初到五月十五，一直在忙一个JavaWeb项目。昨天交了主办方规定要交的文档和视频之后，比赛算是暂时告一段落了。身体累其实也不算什么，主要心很累。想写的冲动并不太强烈，只是觉得总该总结一下，过几天估计还得继续忙这个破事，到时候又没时间了，所以还是跑到图书馆带上耳机开始好好总结一下。技术上的，感悟上的都有。\n\n &#160; &#160; &#160; &#160;当时决定参加这个浙江省服务外包大赛的时候其实是信心满满的，还一副有十足把握的样子鼓励队友要自信。结果刚起步不久就被一个SSH框架给卡死。技术不成熟是一方面的原因，毕竟这个学期才开WEB课，而且基本自学。但是程序员不就是讲究一个快速的自学能力吗，自己花了一个多星期，还不能搞懂该如何套着框架写代码，当时是各种自责和心急如焚。越急，越不能静下心来看书或者教学视频。不知道怎么把握团队的方向，只知道到图书馆一摞一摞的书借过来，这本翻一翻那本看一看，感觉都用不上，烦，急，崩溃。\n\n &#160; &#160; &#160; &#160;幸好队伍里面另外一名队友找到突破口了，确定采用SSH2框架，并且能够教其他队友按照那个模式码代码。现在我会坦承是“幸好”，当时的我并不这么想呀。20岁的小伙子，平时就是争强好胜很多方面都不愿输给谁的一个人。当时感觉自己那么拼命的花了那么多时间和精力为什么我搞不出来，为什么。队友弄出来的时候我却想逃，想自己也马上去弄一个出来，至少把原理搞懂不要只按照他说的填代码。可是越这么想我发现自己越痛苦而且越弄不出来。那段时间经常给老姐打电话讲起这个比赛的事，讲起自己不是队伍的一把手怎么怎么不太开心。姐说她整个大学参加过的各种活动各种社团各种比赛中，她通常都是当二把手的，辅助队伍的核心。数学建模国赛美赛均是一等奖，创新立项两个，自己带的编辑部也是充当二把手，现在也保研到复旦金融系了。她还讲团队竞赛的意义不是要在队内竞争证明我比谁强，我偏不听谁的，我偏要当核心，而是要去证明我们这个团队比别的队伍强比别的队伍好比别的队伍更懂团结。这些道理平时要让我说我也会说，但是真的碰上问题了，我还是难改好斗的本性。但好在，我还是强按住了自己的本性，一脸歉意的找那个队友帮我讲解了一下SSH2的跳转映射流程，框架这个坎就算这样迈过去了，我也算调整好心态，当奶妈打辅助。\n\n&#160; &#160; &#160; &#160;之后在一个留言板功能模块，涉及到写入数据库，但是写入之后发现乱码了。没什么经验，所以就百度，百度上主要提供的一个信息就是可能是MySql的统一编码方式没有设好，我用命令行检查了一下：\n\n![photo1](http://images.cnitblog.com/i/602925/201405/161313583121085.jpg)\n\n&#160; &#160; &#160; &#160;发现没问题啊，清一色UTF-8。后来又看到说MySql的编码方式要设置到数据表的字段一级。然后我就把留言那张表的字段一个个的检查了一遍，依然全部是utf-8.之后是各种坑爹的关于配置文件可能出错的说法，要去C盘找my.ini配置文件然后在里面再改编码方式，按照这个东西弄下去我终于成功的把MySql服务弄的不能开启了，OK。绝望的边缘以为要重装MySql了，不过好在胡乱的又把配置文件根据记忆给改了回来，MySql服务正常开启。也是从这里开始事情好像发生转机，我决定根据参数的传递路径来查一下到底是不是数据库编码乱码。没想到直接在Action中将JSP页面传过来的参数打印一下就出现乱码。尼玛问题范围瞬间缩小了。\n```java\nSystem.out.println(Message.getReply());\n```\n&#160; &#160; &#160; &#160;打印出来是这样的：\n![photo2](http://images.cnitblog.com/i/602925/201405/161331573904116.jpg)\n\n&#160; &#160; &#160; &#160;于是又去百度,说这种从JSP传到Action中就乱码的问题可以通过写一个过滤器放在web.xml里面，我百度了一段代码放进去，重启Tomcat，依然不行。又在无意中发现，据说这是struts2-core-2.1.6.jar的一个bug,建议使用struts2-core-2.1.8.jar。尼玛我打开工程的Web App Library文件夹一看果然使用的是struts2-core-2.1.6.jar。正准备换2.1.8试试，又发现某位好心人说有一种简单的解决方式，就是对传过来的字符串先解码，再编码，最后再保存到数据库，代码如下：\n```java\n Message msg=messageService.findByid(Message.getId());  //通过ID找到某条留言。\n String s1=new String(Message.getReply().getBytes(\"ISO8859_1\"), \"UTF8\");  \n//接收从jsp传过来的留言回复字段的值，按照ISO8859_1标准解码，再按照UTF-8标准重新编码，生成新的字符串s1.\n\n msg.setReply(s1);  //将msg的回复字段值设为s1.\n messageService.update(msg);  //更新msg。\n```\n&#160; &#160; &#160; &#160;**按照他说的做了，真的成功了，好开心！**\n\n&#160; &#160; &#160; &#160;乱码的问题解决了，感觉心情好一点了，毕竟困扰了两三天。然后信心回来一点了，于是决定再静下心来把一直想解决的分页查看功能实现一下。还是以留言为例，要实现分页，可以在数据库中取的时候就分页，即为真分页。也可以把数据全部取出来，存在LIST对象中，在JSP页面控制显示，即为假分页。之前在很多诸如《javaweb典型模块与项目实战》等参考书中看到过分页功能的实现，可能是因为采用的框架不同，又或者是我心浮气躁，反正就是感觉用那些书上的代码套不到我们的项目中来，分页始终实现不出来。那天烦躁的不行，一怒之下甩开各种书啊视频什么的，自己写了一个假分页。原理很简单，但是算是自己的原创，不算抄代码，感觉倍儿爽。下面代码奉上:\n```jsp\n<%\n    List<MessageView> list = (List) request.getAttribute(\"messagelist\");  //取得Action中查出来存起来的留言LIST\n    int begin = 0;  //begin代表该页从第几条留言开始显示，初始化为0\n    if (request.getParameter(\"begin\") == null) {\n        begin = 0;\n    } else {\n        begin = Integer.parseInt(request.getParameter(\"begin\"));\n    }\n %>\n    <%    for (int i = begin; i < (((begin + 4)<list.size())?(begin+4):list.size()); i++) {\n   %>//这里4代表每页显示的留言条数，可以自己设置。循环的判断中用到三目预算，主要是针对最后一页，如果最后一页数据少于4条然而依然使用和其他页一样的遍历方式就会报错空指针。\n   留言内容： <%=list.get(i).getContent()%>\n   ...\n   <%}%>\n  \n //下面的代码通过简单的逻辑判断来控制是否显示上一页和下一页的超链接，不做详细解释了，相信能看懂。\n // 其中的超链接跳转的地址是本页面，但是传的参数begin会变化，页面也是根据取到的begin参数来决定从哪一条记录开始显示的。\n\n <%if (begin >= 4) {%>\n <a href=\"messageQuery?begin=<%=begin -4%>\">上一页</a>&nbsp;&nbsp;\n <%}\n if ( begin <= (list.size() - 4)) { %>    \n <a href=\"messageQuery?begin=<%=begin + 4%>\">下一页</a>  \n <%} else{%>\n 已到最后一页\n <%} %><br>\n```\n&#160; &#160; &#160; &#160;虽然很简陋，估计以后也不能用在正规的项目中，但只是想说有些问题如果参看别人的方法感觉搞不出来的话，自己尝试撸一下，说不定就撸出来了。\n\n&#160; &#160; &#160; &#160;好，分页功能实现。转去实现一个订单功能。队友在建数据库的时候很专业的把订单表的表名取为Order,是吧，订单用英语翻译过去就是Order啊！可是尼玛就是这个破Order表坑了我三天，信心和耐心都几乎被磨灭殆尽。其实实现下订单的功能和其他功能一样呀，都是对一张表实现增删改查操作。但是每次一点确定预定，就报错，说:\n```java\ncould not execute query; nested exception is org.hibernate.exception.SQLGrammarException: could not execute query\n```\n&#160; &#160; &#160; &#160;刚开始百度说可能是字段名和MySql关键字冲突了，将信将疑的在这张Order表的所有字段名的前面全部加了\"my_\"前缀，再跑。还是could not execute query、could not execute insert;等等等等。烦死了，找另一个队友说，你来写一遍，不要看我的代码，看看是不是我哪个地方没注意，字段名尼玛都这样了怎么会冲突了，肯定是有其他原因。结果那妹子写了一遍，报了同样的错误，我不知道该说什么了。正当念着Order,Order我草你丫的时候，脑袋转过来了，Order！Order!!!尼玛自己经常用 Order by id desc 语句来实现对查询结果的倒序排列，这个时候没注意，肯定是Order与MySQL关键字冲突了。于是简单粗暴的把这张破Order表的表名改成了Dingdan. D-ing订，D-an单，多好记啊！多好用啊！马上各种query啊，insert啊，delete啊再也不报错了。三天的阴影解除，Fuck.\n\n&#160; &#160; &#160; &#160;还有遇到过一些小问题，大多解决的比较快，这里就不多说了。初赛的作品要刻到光盘上，因为有个破缓存文件捣乱，昨天刻坏了7张盘才成功。队友一起写的60多页的文档用彩纸印刷出来真是高大上，尽管作品本身技术含量不算高，但是毕竟都尽力了。\n&#160; &#160; &#160; &#160;第一篇半随笔半技术博客，希望自己以后能学到更多可以拿出来分享的东西。周末愉快。\n\n\n  [1]: http://www.cnblogs.com/aiyokaishuige/p/3732229.html\n","slug":"第一个JavaWeb项目体验","published":1,"updated":"2016-01-13T02:35:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgqabsd002ndbtj4i95pn86","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cizgqabqb0005dbtjs7y3mcjv","category_id":"cizgqabqd0006dbtj6g5c65n3","_id":"cizgqabqf0009dbtjpsmm81jy"},{"post_id":"cizgqabqh000adbtj407kbcx9","category_id":"cizgqabqj000bdbtjdc1g8ow9","_id":"cizgqabqj000edbtj0gtk8u7o"},{"post_id":"cizgqabql000fdbtjckgqtj3u","category_id":"cizgqabqn000gdbtjve9eeg2r","_id":"cizgqabqn000jdbtjkcu573gc"},{"post_id":"cizgqabqp000kdbtjg2s0g1i0","category_id":"cizgqabqq000ldbtjy67hno8r","_id":"cizgqabqr000odbtjb3mocciw"},{"post_id":"cizgqabqs000pdbtj62ugq29e","category_id":"cizgqabqt000qdbtjkt2f27p5","_id":"cizgqabqu000tdbtjfvk9nxpn"},{"post_id":"cizgqabqw000udbtjycj5dulh","category_id":"cizgqabqt000qdbtjkt2f27p5","_id":"cizgqabqx000vdbtjii11k3dr"},{"post_id":"cizgqabr10010dbtjiil5xjoc","category_id":"cizgqabr20011dbtjoevn6gze","_id":"cizgqabr30014dbtjx3sxyyho"},{"post_id":"cizgqabr50015dbtjd9i980mp","category_id":"cizgqabr60016dbtjwqrflvri","_id":"cizgqabr70019dbtj3ra2q52f"},{"post_id":"cizgqabrg001gdbtjnzqalt1q","category_id":"cizgqabrh001hdbtjan9l8vb4","_id":"cizgqabri001kdbtjo6yudxnn"},{"post_id":"cizgqabrm001qdbtjjcuu3j20","category_id":"cizgqabr20011dbtjoevn6gze","_id":"cizgqabrn001rdbtjyroxi3mx"},{"post_id":"cizgqabrp001tdbtj4s1q3sou","category_id":"cizgqabrq001udbtjuknacz0k","_id":"cizgqabrs001xdbtjf3519ldx"},{"post_id":"cizgqabru0022dbtj8k9qvc97","category_id":"cizgqabrv0023dbtjkd4d96hl","_id":"cizgqabrw0026dbtj9lxnclbh"},{"post_id":"cizgqabry0027dbtj8f3smpfg","category_id":"cizgqabrq001udbtjuknacz0k","_id":"cizgqabrz0028dbtjjfy4lmcq"},{"post_id":"cizgqabs1002bdbtj4j0ffgho","category_id":"cizgqabs2002cdbtj6vu2x6x6","_id":"cizgqabs3002edbtj5b182txz"},{"post_id":"cizgqabs4002fdbtjyjzwzm6v","category_id":"cizgqabs2002cdbtj6vu2x6x6","_id":"cizgqabs6002gdbtjx7u9il38"},{"post_id":"cizgqabs7002hdbtj7dbpxsgl","category_id":"cizgqabs2002cdbtj6vu2x6x6","_id":"cizgqabs8002idbtjty9lc4d2"},{"post_id":"cizgqabsa002jdbtjo7qdcwk2","category_id":"cizgqabs2002cdbtj6vu2x6x6","_id":"cizgqabsb002kdbtjya1tnleg"},{"post_id":"cizgqabsd002ndbtj4i95pn86","category_id":"cizgqabs2002cdbtj6vu2x6x6","_id":"cizgqabsf002odbtjxsblkuwg"}],"PostTag":[{"post_id":"cizgqabqb0005dbtjs7y3mcjv","tag_id":"cizgqabqd0007dbtjotjti8bo","_id":"cizgqabqf0008dbtjvokcpxoa"},{"post_id":"cizgqabqh000adbtj407kbcx9","tag_id":"cizgqabqj000cdbtj8hx9uf3o","_id":"cizgqabqj000ddbtj47kwsjtg"},{"post_id":"cizgqabql000fdbtjckgqtj3u","tag_id":"cizgqabqn000hdbtjkm0ld0qn","_id":"cizgqabqn000idbtjdt1swiu2"},{"post_id":"cizgqabqp000kdbtjg2s0g1i0","tag_id":"cizgqabqq000mdbtjee3nrplq","_id":"cizgqabqr000ndbtjz95zuge4"},{"post_id":"cizgqabqs000pdbtj62ugq29e","tag_id":"cizgqabqt000rdbtjmwor9gh0","_id":"cizgqabqu000sdbtje47pet09"},{"post_id":"cizgqabqw000udbtjycj5dulh","tag_id":"cizgqabqq000mdbtjee3nrplq","_id":"cizgqabqx000wdbtjj5ao9q3y"},{"post_id":"cizgqabqy000xdbtjphfdv5gb","tag_id":"cizgqabqz000ydbtjznjxoxxx","_id":"cizgqabqz000zdbtjkb0gf0br"},{"post_id":"cizgqabr10010dbtjiil5xjoc","tag_id":"cizgqabr20012dbtjvg29ajfu","_id":"cizgqabr30013dbtjy7nyoumz"},{"post_id":"cizgqabr50015dbtjd9i980mp","tag_id":"cizgqabr60017dbtj56s6b8q5","_id":"cizgqabr70018dbtj5j0fylq3"},{"post_id":"cizgqabr8001adbtjfjp1gi1g","tag_id":"cizgqabr9001bdbtje1zvl3kp","_id":"cizgqabr9001cdbtjqtndhql3"},{"post_id":"cizgqabra001ddbtj6h9l61ci","tag_id":"cizgqabrb001edbtjp3ae19sj","_id":"cizgqabrb001fdbtjlnzty77i"},{"post_id":"cizgqabrg001gdbtjnzqalt1q","tag_id":"cizgqabrh001idbtj9wttkfvc","_id":"cizgqabri001ldbtjfz7ug6t8"},{"post_id":"cizgqabrg001gdbtjnzqalt1q","tag_id":"cizgqabrh001jdbtjzgjehkgc","_id":"cizgqabri001mdbtjlq9id32c"},{"post_id":"cizgqabrk001ndbtj5jjho0t6","tag_id":"cizgqabrl001odbtj3azcm4ee","_id":"cizgqabrl001pdbtjhed03xkt"},{"post_id":"cizgqabrm001qdbtjjcuu3j20","tag_id":"cizgqabr20012dbtjvg29ajfu","_id":"cizgqabro001sdbtjt0rddip6"},{"post_id":"cizgqabrp001tdbtj4s1q3sou","tag_id":"cizgqabrr001vdbtjzs1ihvjs","_id":"cizgqabrt001zdbtj4mfkor5w"},{"post_id":"cizgqabrp001tdbtj4s1q3sou","tag_id":"cizgqabrr001wdbtjjc0fmurz","_id":"cizgqabrt0020dbtj3sk74e0e"},{"post_id":"cizgqabrp001tdbtj4s1q3sou","tag_id":"cizgqabrs001ydbtjttmv1kxe","_id":"cizgqabrt0021dbtjcduzxqzf"},{"post_id":"cizgqabru0022dbtj8k9qvc97","tag_id":"cizgqabrv0024dbtjbzqsoo1t","_id":"cizgqabrw0025dbtjdxpx57dw"},{"post_id":"cizgqabry0027dbtj8f3smpfg","tag_id":"cizgqabrz0029dbtjz08y3ev7","_id":"cizgqabrz002adbtj96qlyry3"},{"post_id":"cizgqabs1002bdbtj4j0ffgho","tag_id":"cizgqabr60017dbtj56s6b8q5","_id":"cizgqabs2002ddbtjvwdjgjrd"},{"post_id":"cizgqabsa002jdbtjo7qdcwk2","tag_id":"cizgqabsc002ldbtjgiyohk77","_id":"cizgqabsc002mdbtjhdadj25w"},{"post_id":"cizgqabsd002ndbtj4i95pn86","tag_id":"cizgqabsf002pdbtjcrvbjiff","_id":"cizgqabsf002qdbtjf75u6upb"}],"Tag":[{"name":"项目管理","_id":"cizgqabqd0007dbtjotjti8bo"},{"name":"Jenkins","_id":"cizgqabqj000cdbtj8hx9uf3o"},{"name":"log","_id":"cizgqabqn000hdbtjkm0ld0qn"},{"name":"Kubernetes","_id":"cizgqabqq000mdbtjee3nrplq"},{"name":"Heapster","_id":"cizgqabqt000rdbtjmwor9gh0"},{"name":"Mac","_id":"cizgqabqz000ydbtjznjxoxxx"},{"name":"Kindle","_id":"cizgqabr20012dbtjvg29ajfu"},{"name":"随笔杂记","_id":"cizgqabr60017dbtj56s6b8q5"},{"name":"堆糖","_id":"cizgqabr9001bdbtje1zvl3kp"},{"name":"Yaml","_id":"cizgqabrb001edbtjp3ae19sj"},{"name":"算法","_id":"cizgqabrh001idbtj9wttkfvc"},{"name":"时间复杂度","_id":"cizgqabrh001jdbtjzgjehkgc"},{"name":"life","_id":"cizgqabrl001odbtj3azcm4ee"},{"name":"Jackson","_id":"cizgqabrr001vdbtjzs1ihvjs"},{"name":"序列化","_id":"cizgqabrr001wdbtjjc0fmurz"},{"name":"反序列化","_id":"cizgqabrs001ydbtjttmv1kxe"},{"name":"调酒师","_id":"cizgqabrv0024dbtjbzqsoo1t"},{"name":"Guava","_id":"cizgqabrz0029dbtjz08y3ev7"},{"name":"Selenium","_id":"cizgqabsc002ldbtjgiyohk77"},{"name":"JavaWeb","_id":"cizgqabsf002pdbtjcrvbjiff"}]}}